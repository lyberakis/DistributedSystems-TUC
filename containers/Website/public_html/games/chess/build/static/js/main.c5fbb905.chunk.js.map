{"version":3,"sources":["images/white_bishop.svg","images/black_bishop.svg","images/white_king.svg","images/black_king.svg","images/white_knight.svg","images/black_knight.svg","images/white_pawn.svg","images/black_pawn.svg","images/white_queen.svg","images/black_queen.svg","images/white_rook.svg","images/black_rook.svg","components/square.js","components/board.js","components/fallen-soldier-block.js","pieces/piece.js","pieces/bishop.js","pieces/king.js","pieces/knight.js","pieces/pawn.js","pieces/queen.js","pieces/rook.js","helpers/board-initialiser.js","components/multiplayer.js","components/game.js","components/messages.js.js","index.js"],"names":["module","exports","Square","props","className","shade","onClick","style","Board","i","squareShade","this","squares","board","squareRows","j","isEven","push","renderSquare","id","React","Component","num","FallenSoldierBlock","square","piece","whiteFallenSoldiers","map","ws","index","blackFallenSoldiers","bs","Piece","player","iconUrl","backgroundImage","Bishop","require","src","dest","Math","abs","pathStart","pathEnd","incrementBy","path","King","Knight","Pawn","initialPositions","1","2","isDestEnemyOccupied","indexOf","Queen","mod","diff","Rook","initialiseChessBoard","Array","fill","connect","server","token","handShake","query","socket","openSocket","setListeners","obj","state","on","message","setState","connectionStatus","roundID","type","myTurn","myColor","console","log","classes","stringsToClasses","turn","status","kingStatus","endstate","disconnect","xhr","XMLHttpRequest","onload","e","readyState","respone","JSON","parse","responseText","port","playmaster","host","data","reconnect","ms","min","max","url","gamemaster","floor","random","setTimeout","open","setRequestHeader","send","length","splitter","toString","split","parseInt","Game","args","url_string","window","location","URL","hostname","searchParams","get","conn","sourceSelection","changePawn","progress","setBishop","bind","setQueen","setKnight","setRook","slice","backgroundColor","isPossible","srcToDestPath1","getSrcToDestPath","srcToDestPath2","srcToDestPath3","isMovePossible","isMoveLegal","textSquares","classesToStrings","textWhiteFallenSoldiers","textBlackFallenSoldiers","emit","srcToDestPath","whitePushed","blackPushed","check","itisCheck","saveSquare","moveOn","k","checkSrcToDestPath","pop","l","m","countMoves","blackPieces","whitePieces","isLegal","newSquares","dontChange","showButtons","ui","endState","symbol","handleClick","dangerouslySetInnerHTML","__html","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c5fbb905.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/white_bishop.28e8d8aa.svg\";","module.exports = __webpack_public_path__ + \"static/media/black_bishop.749373a9.svg\";","module.exports = __webpack_public_path__ + \"static/media/white_king.31362a80.svg\";","module.exports = __webpack_public_path__ + \"static/media/black_king.ea645f11.svg\";","module.exports = __webpack_public_path__ + \"static/media/white_knight.3ece5029.svg\";","module.exports = __webpack_public_path__ + \"static/media/black_knight.88ad52be.svg\";","module.exports = __webpack_public_path__ + \"static/media/white_pawn.27d127d0.svg\";","module.exports = __webpack_public_path__ + \"static/media/black_pawn.44553199.svg\";","module.exports = __webpack_public_path__ + \"static/media/white_queen.01938cfd.svg\";","module.exports = __webpack_public_path__ + \"static/media/black_queen.9fbe0beb.svg\";","module.exports = __webpack_public_path__ + \"static/media/white_rook.007b43f5.svg\";","module.exports = __webpack_public_path__ + \"static/media/black_rook.e7f61dec.svg\";","import React from 'react';\n\nimport '../index.css';\n\nexport default function Square(props) {\n\t\n    return (\n      <button className={\"square \" + props.shade}\n      onClick={props.onClick}\n      style={props.style}>\n       \n      </button>\n    );\n  \n}\n","import React from 'react';\n\nimport '../index.css';\nimport Square from './square.js';\n\nexport default class Board extends React.Component {\n\n  renderSquare(i, squareShade) {\n    return <Square \n    style = {this.props.squares[i]? this.props.squares[i].style : null}\n    shade = {squareShade}\n    onClick={() => this.props.onClick(i)}\n    />\n  }\n\n  render() {\n    const board = [];\n    for(let i = 0; i < 8; i++){\n      const squareRows = [];\n      for(let j = 0; j < 8; j++){\n        const squareShade = (isEven(i) && isEven(j)) || (!isEven(i) && !isEven(j))? \"light-square\" : \"dark-square\";\n        squareRows.push(this.renderSquare((i*8) + j, squareShade));\n      }\n      board.push(<div className=\"board-row\">{squareRows}</div>)\n    }\n\n    return (\n      <div id=\"centered\">\n        {board}\n      </div>\n    );\n  }\n}\n\n\nfunction isEven(num){\n  return num % 2 === 0\n}","import React from 'react';\n\nimport '../index.css';\nimport Square from './square.js';\n\nexport default class FallenSoldierBlock extends React.Component {\n\n  renderSquare(square, i, squareShade) {\n    return <Square \n    piece = {square} \n    style = {square.style}\n    />\n  }\n\n  render() {\n    return (\n      <div>\n      <div className=\"board-row\">{this.props.whiteFallenSoldiers.map((ws, index) =>\n        this.renderSquare(ws, index)\n        )}</div>\n      <div className=\"board-row\">{this.props.blackFallenSoldiers.map((bs, index) =>\n        this.renderSquare(bs, index)\n        )}</div>\n      </div>\n      );\n  }\n}\n\n","export default class Piece {\n  constructor(player, iconUrl){\n    this.player = player;\n    this.style = {backgroundImage: \"url('\"+iconUrl+\"')\"};\n  }\n}","import Piece from './piece.js';\n\nexport default class Bishop extends Piece {\n  constructor(player){\n    super(player, (player === 1? require(\"../images/white_bishop.svg\") : require(\"../images/black_bishop.svg\")));\n  }\n\n  isMovePossible(src, dest){\n    return (Math.abs(src - dest) % 9 === 0 || Math.abs(src - dest) % 7 === 0);\n  }\n\n  /**\n   * get path between src and dest (src and dest exclusive)\n   * @param  {num} src  \n   * @param  {num} dest \n   * @return {[array]}      \n   */\n  getSrcToDestPath(src, dest){\n    let path = [], pathStart, pathEnd, incrementBy;\n    if(src > dest){\n      pathStart = dest;\n      pathEnd = src;\n    }\n    else{\n      pathStart = src;\n      pathEnd = dest;\n    }\n    if(Math.abs(src - dest) % 9 === 0){\n      incrementBy = 9;\n      pathStart += 9;\n    }\n    else{\n      incrementBy = 7;\n      pathStart += 7;\n    }\n\n    for(let i = pathStart; i < pathEnd; i+=incrementBy){\n      path.push(i);\n    }\n    return path;\n  }\n}\n","import Piece from './piece.js';\n\nexport default class King extends Piece {\n  constructor(player){\n    super(player, (player === 1? require(\"../images/white_king.svg\") : require(\"../images/black_king.svg\")));\n  }\n\n  isMovePossible(src, dest){\n    return (src - 9 === dest || \n      src - 8 === dest || \n      src - 7 === dest || \n      src + 1 === dest || \n      src + 9 === dest || \n      src + 8 === dest || \n      src + 7 === dest || \n      src - 1 === dest);\n  }\n\n  /**\n   * always returns empty array because of one step\n   * @return {[]}\n   */\n  getSrcToDestPath(src, dest){\n    return [];\n  }\n}\n","import Piece from './piece.js';\n\nexport default class Knight extends Piece {\n  constructor(player){\n    super(player, (player === 1? require(\"../images/white_knight.svg\") : require(\"../images/black_knight.svg\")));\n  }\n\n  isMovePossible(src, dest){\n    return (src - 17 === dest || \n      src - 10 === dest || \n      src + 6 === dest || \n      src + 15 === dest || \n      src - 15 === dest || \n      src - 6 === dest || \n      src + 10 === dest || \n      src + 17 === dest);\n  }\n\n  /**\n   * always returns empty array because of jumping\n   * @return {[]}\n   */\n  getSrcToDestPath(){\n    return [];\n  }\n}\n","import Piece from './piece.js';\n\nexport default class Pawn extends Piece {\n  constructor(player){\n    super(player, (player === 1?  require(\"../images/white_pawn.svg\") : require(\"../images/black_pawn.svg\")));\n    this.initialPositions = {\n      1: [48, 49, 50, 51, 52, 53, 54, 55],\n      2: [8, 9, 10, 11, 12, 13, 14, 15]\n    }\n  }\n\n  isMovePossible(src, dest, isDestEnemyOccupied){\n\n    if(this.player === 1){\n      if((dest === src - 8 && !isDestEnemyOccupied) || (dest === src - 16 && this.initialPositions[1].indexOf(src) !== -1)){\n        return true;\n      }\n      else if(isDestEnemyOccupied && (dest === src - 9 || dest === src - 7)){\n        return true;\n      }\n    }\n    else if(this.player === 2){\n      if((dest === src + 8 && !isDestEnemyOccupied) || (dest === src + 16 && this.initialPositions[2].indexOf(src) !== -1)){\n        return true;\n      }\n      else if(isDestEnemyOccupied && (dest === src + 9 || dest === src + 7)){\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * returns array of one if pawn moves two steps, else returns empty array  \n   * @param  {[type]} src  [description]\n   * @param  {[type]} dest [description]\n   * @return {[type]}      [description]\n   */\n  getSrcToDestPath(src, dest){\n    if(dest === src - 16){\n      return [src - 8];\n    }\n    else if(dest === src + 16){\n      return [src + 8];\n    }\n    return [];\n  }\n}\n","import Piece from './piece.js';\n\nexport default class Queen extends Piece {\n  constructor(player){\n    super(player, (player === 1? require(\"../images/white_queen.svg\") : require(\"../images/black_queen.svg\")));\n  }\n\n  isMovePossible(src, dest){\n    let mod = src % 8;\n    let diff = 8 - mod;\n    \n    return (Math.abs(src - dest) % 9 === 0 || Math.abs(src - dest) % 7 === 0) ||\n      (Math.abs(src - dest) % 8 === 0 || (dest >= (src - mod) && dest < (src + diff)));\n  }\n\n  /**\n   * get path between src and dest (src and dest exclusive)\n   * @param  {num} src  \n   * @param  {num} dest \n   * @return {[array]}      \n   */\n  getSrcToDestPath(src, dest){\n    let path = [], pathStart, pathEnd, incrementBy;\n    if(src > dest){\n      pathStart = dest;\n      pathEnd = src;\n    }\n    else{\n      pathStart = src;\n      pathEnd = dest;\n    }\n    if(Math.abs(src - dest) % 8 === 0){\n      incrementBy = 8;\n      pathStart += 8;\n    }\n    else if(Math.abs(src - dest) % 9 === 0){\n      incrementBy = 9;\n      pathStart += 9;\n    }\n    else if(Math.abs(src - dest) % 7 === 0){\n      incrementBy = 7;\n      pathStart += 7;\n    }\n    else{\n      incrementBy = 1;\n      pathStart += 1;\n    }\n\n    for(let i = pathStart; i < pathEnd; i+=incrementBy){\n      path.push(i);\n    }\n    return path;\n  }\n}","import Piece from './piece.js';\n\nexport default class Rook extends Piece {\n  constructor(player){\n    super(player, (player === 1? require(\"../images/white_rook.svg\") : require(\"../images/black_rook.svg\")));\n  }\n\n  isMovePossible(src, dest){\n    let mod = src % 8;\n    let diff = 8 - mod;\n    return (Math.abs(src - dest) % 8 === 0 || (dest >= (src - mod) && dest < (src + diff)));\n  }\n\n  /**\n   * get path between src and dest (src and dest exclusive)\n   * @param  {num} src  \n   * @param  {num} dest \n   * @return {[array]}      \n   */\n  getSrcToDestPath(src, dest){\n    let path = [], pathStart, pathEnd, incrementBy;\n    if(src > dest){\n      pathStart = dest;\n      pathEnd = src;\n    }\n    else{\n      pathStart = src;\n      pathEnd = dest;\n    }\n    if(Math.abs(src - dest) % 8 === 0){\n      incrementBy = 8;\n      pathStart += 8;\n    }\n    else{\n      incrementBy = 1;\n      pathStart += 1;\n    }\n\n    for(let i = pathStart; i < pathEnd; i+=incrementBy){\n      path.push(i);\n    }\n    return path;\n  }\n}\n","import Bishop from '../pieces/bishop.js';\nimport King from '../pieces/king.js';\nimport Knight from '../pieces/knight.js';\nimport Pawn from '../pieces/pawn.js';\nimport Queen from '../pieces/queen.js';\nimport Rook from '../pieces/rook.js';\n\nexport default function initialiseChessBoard(){\n  const squares = Array(64).fill(null);\n\n  for(let i = 8; i < 16; i++){\n    squares[i] = new Pawn(2);\n    squares[i+40] = new Pawn(1);\n  }\n  squares[0] = new Rook(2);\n  squares[7] = new Rook(2);\n  squares[56] = new Rook(1);\n  squares[63] = new Rook(1);\n\n  squares[1] = new Knight(2);\n  squares[6] = new Knight(2);\n  squares[57] = new Knight(1);\n  squares[62] = new Knight(1);\n\n  squares[2] = new Bishop(2);\n  squares[5] = new Bishop(2);\n  squares[58] = new Bishop(1);\n  squares[61] = new Bishop(1);\n\n  squares[3] = new Queen(2);\n  squares[4] = new King(2);\n\n  squares[59] = new Queen(1);\n  squares[60] = new King(1);\n\n  return squares;\n}","import openSocket from 'socket.io-client';\nimport Bishop from '../pieces/bishop.js';\nimport Knight from '../pieces/knight.js';\nimport Queen from '../pieces/queen.js';\nimport Rook from '../pieces/rook.js';\nimport King from '../pieces/king.js';\nimport Pawn from '../pieces/pawn.js';\n// ==========================================\n// ==> Variables in state <==\n\n//==> host: The domain of the host (localhost)\n//==> gamemaster: the port of gamemaster for client requests\n//==> token: the unique token of the user issued from the Authorization Service\n//==> socket: the socket objet of the client connected to the server\n//==> type: the symbol of the user (X,O or white, black)\n//==> roundID: the ID of the game\n\n//==> connectionStatus: Connection Status\n  // -3 => unauthorized user\n  // -2 => trying to reconnect\n  // -1 => no connection (the client has not connect to the giver Playmaster)\n  //  0 => connected\n  //  1 => wait opponent to connect\n  //  2 => ready to play\n  //  3 => the game is completed\n  //  4 => winner because opponent left\n  //  5 => spectator mode\n\n\n// ==========================================\n// ==> Messages from client to playmaster <==\n\n// 1. Send the new board \n\n// let message = {\n//   roundID : this.state.roundID,\n//   board : squares\n// }\n// this.state.socket.emit('update', message)\n\n\n// 2. Inform the playmaster for the winner, if you are the last to play\n\n// let message = {\n//   roundID : this.state.roundID,\n//   winner: winnerInfo,  //0 for tie, 1 if you won, -1 if you lost\n// }\n// this.state.socket.emit('endgame', message)\n\n// ==========================================\n\n// ===> FOR OTHER GAME CHANGE THE LINE 109 and 133-140\n// ==========================================\n\n\n//Get argument from the URL\nexport function getArgumenets() {\n\tlet url_string = window.location['href'];\n  \tlet url = new URL(url_string);\n\n  \tlet host = url.hostname;\n  \tlet playmaster = url.searchParams.get(\"pm\");\n  \tlet gamemaster = url.searchParams.get(\"gm\");\n  \tlet token = url.searchParams.get(\"token\");\n\n  \tlet args = {\n  \t\t'host': host,\n  \t\t'token': token,\n  \t\t'playmaster' : playmaster,\n  \t\t'gamemaster' : gamemaster,\n  \t};\n\n  \treturn args;\n}\n\n\n//Connect to Playmaster\nexport function connect(server, token){\n\n    let handShake = {\n    \tquery:'token='+token\n    }\n\n    let socket = openSocket(server, handShake)\n\n    let response = {\n    \t'socket': socket,\n    \t'connectionStatus': socket['connected'] ? 0 : -1,\n    }\n\n    return response;\n}\n\n\nexport function setListeners(obj){\n\n  //You connected first, wait for the opponent to connect\n  obj.state.socket.on('wait', message => {\n    obj.setState({\n        connectionStatus: 1,\n        roundID: message['roundID'],\n      })\n  });\n\n\n\n  //Both players are connected. The game can begin\n  obj.state.socket.on('init', message => {\n\n    //Check if the game is new or it is continued from server fault.\n    if (obj.state.type === null){\n      obj.setState({\n        connectionStatus: 2,\n        myTurn: message['turn'],\n        roundID: message['roundID'],\n        myColor: message['turn'] ? 'white' : 'black',\n      })\n    }else{\n      obj.setState({\n        connectionStatus: 2,\n        roundID: message['roundID']   //get the new round ID\n      })\n    }\n  });\n\n  //Both players are connected. The game can begin\n  obj.state.socket.on('viewer', board => {\n    console.log('VIWER')\n    var classes = stringsToClasses(board);\n    \n    obj.setState({\n      connectionStatus: 5,\n      squares: classes,\n      myTurn: false\n    })\n  });\n\n\n  //Receive the updated board\n  obj.state.socket.on('board', board => {\n    var classes = stringsToClasses(board[\"board\"]);\n    var whiteFallenSoldiers = stringsToClasses(board[\"whiteFallenSoldiers\"]);\n    var blackFallenSoldiers = stringsToClasses(board[\"blackFallenSoldiers\"]);\n    var turn, player;\n    if (!board['dontChange']){\n      turn = obj.state.turn === 'white'? 'black' : 'white';\n      player = obj.state.player === 1? 2: 1;\n    }else{\n      turn = obj.state.turn;\n      player = obj.state.player;\n    }\n    console.log(board[\"board\"]);\n    console.log(classes);\n      obj.setState({\n        squares: classes,\n        turn: turn,\n        whiteFallenSoldiers: whiteFallenSoldiers,\n        blackFallenSoldiers: blackFallenSoldiers,\n        status: board['status'],\n        kingStatus: board['kingStatus'],\n        player: player,\n        myTurn: true,\n      })\n\n      //Set Game progress\n      if (board['progress']===1) {\n        obj.setState({\n          connectionStatus: 3,\n          endstate: 1\n        })\n      }else if (board['progress']===2){\n        obj.setState({\n          connectionStatus: 3,\n          endstate: 2,\n        })\n\n      }\n  }); \n\n\n  //Handler for server disconnection\n  obj.state.socket.on('disconnect', board => {\n\n    //if you never connected or the game is completed, return\n    if (obj.state.connectionStatus < 0 || obj.state.connectionStatus > 2) {\n      return;\n    }\n\n    obj.state.socket.disconnect()\n\n    obj.setState({\n      connectionStatus: -2,\n    })\n    \n    //Create a request to GameMaster\n    var xhr = new XMLHttpRequest()\n\n    xhr.onload = function (e) {\n\n      if (xhr.readyState === 4) {\n\n        //Check if the GameMaster accepted the request\n        if (xhr.connectionStatus === 200) {  \n          let respone = JSON.parse(xhr.responseText);\n          reconnect(obj, respone['playmaster']);\n        }else if(xhr.connectionStatus === 403){\n          obj.setState({\n            connectionStatus: -3,\n            endstate: 1,\n          })\n        }\n      }\n    }\n\n    let game = 'chess';\n    let master = obj.state.host + ':' + obj.state.gamemaster+'/client';\n    let url = 'http://'+master+'?'+'token='+obj.state.token+'&game='+game+'&roundID='+ obj.state.roundID;\n    \n    const delay = (ms, cb) => setTimeout(cb, ms);\n    \n    delay(getRndInteger(1,300)*100, () => {\n      xhr.open('GET', url);\n      xhr.setRequestHeader('Access-Control-Allow-Origin', '*');\n      xhr.send();\n    })\n  }); \n\n  //The game is over from the server's side\n  obj.state.socket.on('endgame', message => {\n      obj.setState({\n        connectionStatus: 4,\n      })\n      obj.state.socket.disconnect();\n  }); \n\n}\n\nfunction getRndInteger(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) ) + min;\n}\n\n//Establish a new connections\nexport function reconnect(obj, port){\n  console.log('reconnecting...')\n  let playmaster = obj.state.host + ':' + port;\n  let token = obj.state.token;\n  var data = connect(playmaster,token)\n\n  obj.setState({\n    socket: data['socket'],\n    status: data['status'],\n  });\n\n  console.log(data['socket']);\n  setListeners(obj);\n}\n\nfunction stringsToClasses(squares){\n  var classes = [];\n\n  if (squares){\n    for (let i=0; i<squares.length; i++){\n      let splitter = squares[i].toString().split(\" \");\n\n      switch(splitter[0]){\n        case \"King\":\n          classes.push(new King(parseInt(splitter[1])));\n          break;\n        case \"Pawn\":\n          classes.push(new Pawn(parseInt(splitter[1])));\n          break;\n        case \"Queen\":\n          classes.push(new Queen(parseInt(splitter[1])));\n          break;\n        case \"Bishop\":\n          classes.push(new Bishop(parseInt(splitter[1])));\n          break;\n        case \"Knight\":\n          classes.push(new Knight(parseInt(splitter[1])));\n          break;\n        case \"Rook\":\n          classes.push(new Rook(parseInt(splitter[1])));\n          break;\n        default:\n          classes.push(null);\n      }\n    }\n  }\n  \n  return classes;\n}","import React from 'react';\n\nimport '../index.css';\nimport Board from './board.js';\nimport FallenSoldierBlock from './fallen-soldier-block.js';\nimport initialiseChessBoard from '../helpers/board-initialiser.js';\nimport Bishop from '../pieces/bishop.js';\nimport King from '../pieces/king.js';\nimport Knight from '../pieces/knight.js';\nimport Queen from '../pieces/queen.js';\nimport Pawn from '../pieces/pawn.js';\nimport Rook from '../pieces/rook.js';\nimport * as conn from './multiplayer.js'; \nimport * as ui from './messages.js'\n\nexport default class Game extends React.Component {\n  constructor(props){\n    super(props);\n    let args = conn.getArgumenets();\n    let data = conn.connect(args['host']+':'+args['playmanster'],args['token']);\n    this.state = {\n      squares: initialiseChessBoard(),\n      whiteFallenSoldiers: [],\n      blackFallenSoldiers: [],\n      player: 1,\n      sourceSelection: -1,\n      kingStatus: '',\n      turn: 'white',\n      type: null,\n      myTurn: false,\n      changePawn: -1,\n      host: args['host'],\n      gamemaster: args['gamemaster'],\n      token: args['token'],\n      socket: data['socket'],\n      status: '',\n      connectionStatus: data['connectionStatus'],\n      progress: 0,\n      roundID: null,\n      endstate: 0,\n    }\n    this.setBishop = this.setBishop.bind(this);\n    this.setQueen = this.setQueen.bind(this);\n    this.setKnight = this.setKnight.bind(this);\n    this.setRook = this.setRook.bind(this);\n    conn.setListeners(this);\n  }\n \n  handleClick(i){\n    if (this.state.myTurn){\n      const squares = this.state.squares.slice();\n      \n      if(this.state.sourceSelection === -1){\n        if(!squares[i] || squares[i].player !== this.state.player){\n          this.setState({status: \"Wrong selection. Choose player \" + this.state.player + \" pieces.\"});\n          if (squares[i]) {\n            squares[i].style = {...squares[i].style, backgroundColor: \"\"};\n          }\n        }\n        else{\n          squares[i].style = {...squares[i].style, backgroundColor: \"RGB(111,143,114)\"}; // Emerald from http://omgchess.blogspot.com/2015/09/chess-board-color-schemes.html\n          this.setState({\n            status: \"Choose destination for the selected piece\",\n            sourceSelection: i\n          });\n        }\n      }else if(this.state.sourceSelection > -1){\n        squares[this.state.sourceSelection].style = {...squares[this.state.sourceSelection].style, backgroundColor: \"\"};\n\n        if(squares[i] && squares[i].player === this.state.player && \n          (squares[this.state.sourceSelection] instanceof King || squares[this.state.sourceSelection] instanceof Rook) &&\n          (squares[i] instanceof King || squares[i] instanceof Rook)){/////////////////castling case\n          \n          let isPossible = true;\n\n          if (squares[i].player === 1){//check correct position of pieces\n            if (this.state.sourceSelection===60 && squares[this.state.sourceSelection] instanceof King){\n              if (i!==63 && i!==56)\n                isPossible=false;\n            }else if (i===60 && squares[i] instanceof King){\n              if (this.state.sourceSelection!==63 && this.state.sourceSelection!==56)\n                isPossible=false;\n            }else\n              isPossible=false;\n          }else{\n            if (this.state.sourceSelection===4 && squares[this.state.sourceSelection] instanceof King){\n              if (i!==0 && i!==7)\n                isPossible=false;\n            }else if (i===4 && squares[i] instanceof King){\n              if (this.state.sourceSelection!==0 && this.state.sourceSelection!==7)\n                isPossible=false;\n            }else\n              isPossible=false;\n          }\n\n          if (isPossible){//check that there are no pieces between them\n            if (squares[i].player === 1){\n              if (i===63 || this.state.sourceSelection===63){\n                if (squares[61] || squares[62])\n                  isPossible=false;\n              }else{\n                if (squares[57] || squares[58] || squares[59])\n                  isPossible=false;\n              }\n            }else{\n              if (i===7 || this.state.sourceSelection===7){\n                if (squares[5] || squares[6])\n                  isPossible=false;\n              }else{\n                if (squares[1] || squares[2] || squares[3])\n                  isPossible=false;\n              }\n            }\n\n            if (isPossible){//check if king is or passes from check\n              if (squares[i].player === 1){\n                if (i===63 || this.state.sourceSelection===63){\n                  for (let j=0; j<squares.length; j++){\n                    if (squares[j] && squares[j].player!==this.state.player){\n                      const srcToDestPath1 = squares[j].getSrcToDestPath(j, 60);\n                      const srcToDestPath2 = squares[j].getSrcToDestPath(j, 61);\n                      const srcToDestPath3 = squares[j].getSrcToDestPath(j, 62);\n                      if ((squares[j].isMovePossible(j, 60, false) && this.isMoveLegal(srcToDestPath1, squares)) ||\n                          (squares[j].isMovePossible(j, 61, false) && this.isMoveLegal(srcToDestPath2, squares)) ||\n                          (squares[j].isMovePossible(j, 62, false) && this.isMoveLegal(srcToDestPath3, squares))){\n                        isPossible=false;\n                        break;\n                      }\n                    }\n                  }\n                }else{\n                  for (let j=0; j<squares.length; j++){\n                    if (squares[j] && squares[j].player!==this.state.player){\n                      const srcToDestPath1 = squares[j].getSrcToDestPath(j, 60);\n                      const srcToDestPath2 = squares[j].getSrcToDestPath(j, 59);\n                      const srcToDestPath3 = squares[j].getSrcToDestPath(j, 58);\n                      if ((squares[j].isMovePossible(j, 60, false) && this.isMoveLegal(srcToDestPath1, squares)) ||\n                          (squares[j].isMovePossible(j, 59, false) && this.isMoveLegal(srcToDestPath2, squares)) ||\n                          (squares[j].isMovePossible(j, 58, false) && this.isMoveLegal(srcToDestPath3, squares))){\n                        isPossible=false;\n                        break;\n                      }\n                    }\n                  }\n                }\n              }else{\n                if (i===7 || this.state.sourceSelection===7){\n                  for (let j=0; j<squares.length; j++){\n                    if (squares[j] && squares[j].player!==this.state.player){\n                      const srcToDestPath1 = squares[j].getSrcToDestPath(j, 4);\n                      const srcToDestPath2 = squares[j].getSrcToDestPath(j, 5);\n                      const srcToDestPath3 = squares[j].getSrcToDestPath(j, 6);\n                      if ((squares[j].isMovePossible(j, 4, false) && this.isMoveLegal(srcToDestPath1, squares)) ||\n                          (squares[j].isMovePossible(j, 5, false) && this.isMoveLegal(srcToDestPath2, squares)) ||\n                          (squares[j].isMovePossible(j, 6, false) && this.isMoveLegal(srcToDestPath3, squares))){\n                        isPossible=false;\n                        break;\n                      }\n                    }\n                  }\n                }else{\n                  for (let j=0; j<squares.length; j++){\n                    if (squares[j] && squares[j].player!==this.state.player){\n                      const srcToDestPath1 = squares[j].getSrcToDestPath(j, 4);\n                      const srcToDestPath2 = squares[j].getSrcToDestPath(j, 3);\n                      const srcToDestPath3 = squares[j].getSrcToDestPath(j, 2);\n                      if ((squares[j].isMovePossible(j, 4, false) && this.isMoveLegal(srcToDestPath1, squares)) ||\n                          (squares[j].isMovePossible(j, 3, false) && this.isMoveLegal(srcToDestPath2, squares)) ||\n                          (squares[j].isMovePossible(j, 2, false) && this.isMoveLegal(srcToDestPath3, squares))){\n                        isPossible=false;\n                        break;\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n\n          if (isPossible){\n            if (squares[i].player === 1){\n              if (i===63 || this.state.sourceSelection===63){\n                squares[62]=squares[60];\n                squares[61]=squares[63];\n                squares[63]=null;\n              }else{\n                squares[58]=squares[60];\n                squares[59]=squares[56];\n                squares[56]=null;\n              }\n              squares[60]=null;\n            }else{\n              if (i===7 || this.state.sourceSelection===7){\n                squares[6]=squares[4];\n                squares[5]=squares[7];\n                squares[7]=null;\n              }else{\n                squares[2]=squares[4];\n                squares[3]=squares[0];\n                squares[0]=null;\n              }\n              squares[4]=null;\n            }\n\n            let player = this.state.player === 1? 2: 1;\n            let turn = this.state.turn === 'white'? 'black' : 'white';\n            this.setState({\n              squares: squares,\n              player: player,\n              turn: turn,\n              type: turn,\n              kingStatus: '',\n              myTurn: !this.state.myTurn,\n              changePawn: -1,\n              status: \"Castling occured.\",\n              sourceSelection: -1,\n            });\n            var textSquares = this.classesToStrings(squares);\n            var textWhiteFallenSoldiers = this.classesToStrings(this.state.whiteFallenSoldiers);\n            var textBlackFallenSoldiers = this.classesToStrings(this.state.blackFallenSoldiers);\n            let message = {\n              roundID : this.state.roundID,\n              board : textSquares,\n              whiteFallenSoldiers: textWhiteFallenSoldiers,\n              blackFallenSoldiers: textBlackFallenSoldiers,\n              progress : 0\n            }\n            this.state.socket.emit('update', message);\n          }else{\n            this.setState({\n              status: \"Wrong selection. Castling not allowed.\",\n              sourceSelection: -1,\n            });\n          }\n\n        }else if(squares[i] && squares[i].player === this.state.player){\n          this.setState({\n            status: \"Wrong selection. Choose valid source and destination again.\",\n            sourceSelection: -1,\n          });\n        }else{\n          const whiteFallenSoldiers = this.state.whiteFallenSoldiers.slice();\n          const blackFallenSoldiers = this.state.blackFallenSoldiers.slice();\n          const isDestEnemyOccupied = squares[i]? true : false; \n          const isMovePossible = squares[this.state.sourceSelection].isMovePossible(this.state.sourceSelection, i, isDestEnemyOccupied);\n          const srcToDestPath = squares[this.state.sourceSelection].getSrcToDestPath(this.state.sourceSelection, i);\n          const isMoveLegal = this.isMoveLegal(srcToDestPath, squares);\n\n          if(isMovePossible && isMoveLegal){\n            let whitePushed=false, blackPushed=false;\n            if(squares[i] !== null){\n              if(squares[i].player === 1){\n                whiteFallenSoldiers.push(squares[i]);     \n                whitePushed=true;         \n              }else{\n                blackFallenSoldiers.push(squares[i]);\n                blackPushed=true;\n              }\n            }\n\n            let check=false;\n            if (this.state.kingStatus===\"Check.\")\n              check=true;\n\n            var kingStatus = 0;\n            var itisCheck = false;\n            const saveSquare = squares[i];\n            squares[i] = squares[this.state.sourceSelection];\n            squares[this.state.sourceSelection] = null;\n            let player = this.state.player === 1? 2: 1;\n            let turn = this.state.turn === 'white'? 'black' : 'white';\n            this.setState({\n              sourceSelection: -1,\n              squares: squares,\n              whiteFallenSoldiers: whiteFallenSoldiers,\n              blackFallenSoldiers: blackFallenSoldiers,\n              myTurn: !this.state.myTurn,\n              player: player,\n              status: '',\n              kingStatus: '',\n              turn: turn,\n              type: turn,\n              changePawn: -1\n            });\n\n            let moveOn=true;\n            if (check){\n              for (let j=0; j<squares.length; j++){\n                if (squares[j] && squares[j] instanceof King && squares[j].player===this.state.player){//find the king\n                  for (let k=0; k<squares.length; k++){\n                    if (squares[k] && squares[k].player!==this.state.player){\n                      const checkSrcToDestPath = squares[k].getSrcToDestPath(k, j);\n                      if (squares[k].isMovePossible(k, j, isDestEnemyOccupied) && this.isMoveLegal(checkSrcToDestPath, squares)){//find if enemy threatens the king\n                        squares[this.state.sourceSelection] = squares[i];\n                        squares[i]=saveSquare;\n                        player = this.state.player === 1? 1: 2;\n                        turn = this.state.turn === 'white'? 'white' : 'black';\n                        if (whitePushed)\n                          whiteFallenSoldiers.pop();\n                        else if(blackPushed)\n                          blackFallenSoldiers.pop();\n                        this.setState({\n                          squares: squares,\n                          whiteFallenSoldiers: whiteFallenSoldiers,\n                          blackFallenSoldiers: blackFallenSoldiers,\n                          player: player,\n                          myTurn: this.state.myTurn,\n                          kingStatus: \"Check.\",\n                          status: 'Wrong selection. You need to avoid check.',\n                          turn: turn,\n                          type: turn\n                        });\n                        kingStatus=-1;\n                        moveOn=false;\n                        break;\n                      }\n                    }\n                  }\n                  break;\n                }\n              }\n            }else{\n              for (let j=0; j<squares.length; j++){\n                if (squares[j] && squares[j] instanceof King && squares[j].player===this.state.player){//find the king\n                  for (let k=0; k<squares.length; k++){\n                    if (squares[k] && squares[k].player!==this.state.player){\n                      const checkSrcToDestPath = squares[k].getSrcToDestPath(k, j);\n                      if (squares[k].isMovePossible(k, j, isDestEnemyOccupied) && this.isMoveLegal(checkSrcToDestPath, squares)){//find if enemy threatens the king\n                        squares[this.state.sourceSelection] = squares[i];\n                        squares[i]=saveSquare;\n                        player = this.state.player === 1? 1: 2;\n                        turn = this.state.turn === 'white'? 'white' : 'black';\n                        if (whitePushed)\n                          whiteFallenSoldiers.pop();\n                        else if(blackPushed)\n                          blackFallenSoldiers.pop();\n                        this.setState({\n                          squares: squares,\n                          whiteFallenSoldiers: whiteFallenSoldiers,\n                          blackFallenSoldiers: blackFallenSoldiers,\n                          myTurn: this.state.myTurn,\n                          player: player,\n                          kingStatus: '',\n                          status: 'Wrong selection. You cannot go to check.',\n                          turn: turn,\n                          type: turn\n                        });\n                        kingStatus=-1;\n                        moveOn=false;\n                        break;\n                      }\n                    }\n                  }\n                  break;\n                }\n              }\n            }\n\n            if (moveOn){\n              //code for check and checkmate\n              for (let j=0; j<squares.length; j++){\n                if (squares[j] && squares[j] instanceof King && squares[j].player!==this.state.player){//find the king\n                  for (let k=0; k<squares.length; k++){\n                    if (squares[k] && squares[k].player===this.state.player){\n                      const srcToDestPath = squares[k].getSrcToDestPath(k, j);\n                      if (squares[k].isMovePossible(k, j, isDestEnemyOccupied) && this.isMoveLegal(srcToDestPath, squares)){//find if enemy threatens the king\n\n                        for (let l=0; l<squares.length; l++){\n                          if (squares[l] && squares[l].player!==this.state.player){\n                            for (let m=0; m<srcToDestPath.length; m++){\n                              if (squares[l].isMovePossible(l, srcToDestPath[m], isDestEnemyOccupied) && this.isMoveLegal(squares[l].getSrcToDestPath(l, srcToDestPath[m]), squares) \n                                && !(squares[l] instanceof King)){\n                                itisCheck=true;\n                                break;\n                              }\n                            }\n                          }\n                        }\n\n                        if (itisCheck===true){//find king's possible moves and check if they avoid checkmate\n                          let countMoves = 0;\n\n                          if ((!squares[j-1] || j-1===k) && j-1>=0){\n                            for (let l=0; l<squares.length; l++){\n                              if (squares[l] && squares[l].player===this.state.player && l!==k){\n                                const isDestEnemyOccupied = squares[l]? true : false; \n                                if (squares[l].isMovePossible(l, j-1, isDestEnemyOccupied) && this.isMoveLegal(squares[l].getSrcToDestPath(l, j-1), squares)){\n                                  countMoves++;\n                                  break;\n                                }\n                              }\n                            }\n                          }else\n                            countMoves++;\n            \n                          if ((!squares[j+1] || (j+1)===k) && j+1<64){\n                            for (let l=0; l<squares.length; l++){\n                              if (squares[l] && squares[l].player===this.state.player && l!==k){\n                                const isDestEnemyOccupied = squares[l]? true : false;\n                                  if (squares[l].isMovePossible(l, j+1, isDestEnemyOccupied) && this.isMoveLegal(squares[l].getSrcToDestPath(l, j+1), squares)){\n                                    countMoves++;\n                                    break;\n                                  }\n                                }\n                              }\n                            }else\n                              countMoves++;\n\n                          if ((!squares[j-7] || (j-7)===k) && j-7>=0){\n                            for (let l=0; l<squares.length; l++){\n                              if (squares[l] && squares[l].player===this.state.player && l!==k){\n                                const isDestEnemyOccupied = squares[l]? true : false;\n                                if (squares[l].isMovePossible(l, j-7, isDestEnemyOccupied) && this.isMoveLegal(squares[l].getSrcToDestPath(l, j-7), squares)){\n                                  countMoves++;\n                                  break;\n                                }\n                              }\n                            }\n                          }else\n                            countMoves++;\n\n                          if ((!squares[j+7] || (j+7)===k) && j+7<64){\n                            for (let l=0; l<squares.length; l++){\n                              if (squares[l] && squares[l].player===this.state.player && l!==k){\n                                const isDestEnemyOccupied = squares[l]? true : false;\n                                if (squares[l].isMovePossible(l, j+7, isDestEnemyOccupied) && this.isMoveLegal(squares[l].getSrcToDestPath(l, j+7), squares)){\n                                  countMoves++;\n                                  break;\n                                }\n                              }\n                            }\n                          }else\n                            countMoves++;\n\n                          if ((!squares[j-8] || (j-8)===k) && j-8>=0){\n                            for (let l=0; l<squares.length; l++){\n                              if (squares[l] && squares[l].player===this.state.player && l!==k){\n                                const isDestEnemyOccupied = squares[l]? true : false;\n                                if (squares[l].isMovePossible(l, j-8, isDestEnemyOccupied) && this.isMoveLegal(squares[l].getSrcToDestPath(l, j-8), squares)){\n                                  countMoves++;\n                                  break;\n                                }\n                              }\n                            }\n                          }else\n                            countMoves++;\n\n                          if ((!squares[j+8] || (j+8)===k) && j+8<64){\n                            for (let l=0; l<squares.length; l++){\n                              if (squares[l] && squares[l].player===this.state.player && l!==k){\n                                const isDestEnemyOccupied = squares[l]? true : false;\n                                if (squares[l].isMovePossible(l, j+8, isDestEnemyOccupied) && this.isMoveLegal(squares[l].getSrcToDestPath(l, j+8), squares)){\n                                  countMoves++;\n                                  break;\n                                }\n                              }\n                            }\n                          }else\n                            countMoves++;\n\n                          if ((!squares[j-9] || (j-9)===k) && j-9>=0){\n                            for (let l=0; l<squares.length; l++){\n                              if (squares[l] && squares[l].player===this.state.player && l!==k){\n                                const isDestEnemyOccupied = squares[l]? true : false;\n                                if (squares[l].isMovePossible(l, j-9, isDestEnemyOccupied) && this.isMoveLegal(squares[l].getSrcToDestPath(l, j-9), squares)){\n                                  countMoves++;\n                                  break;\n                                }\n                              }\n                            }\n                          }else\n                            countMoves++;\n\n                          if ((!squares[j+9] || (j+9)===k) && j+9<64){\n                            for (let l=0; l<squares.length; l++){\n                              if (squares[l] && squares[l].player===this.state.player && l!==k){\n                                const isDestEnemyOccupied = squares[l]? true : false;\n                                if (squares[l].isMovePossible(l, j+9, isDestEnemyOccupied) && this.isMoveLegal(squares[l].getSrcToDestPath(l, j+9), squares)){\n                                  countMoves++;\n                                  break;\n                                }\n                              }\n                            }\n                          }else\n                            countMoves++;\n\n                          if (countMoves===8)\n                            itisCheck=false;\n                        }\n                                              \n                        if (itisCheck===true){\n                          this.setState({kingStatus: \"Check.\"});\n                          kingStatus=1;\n                        }else{\n                          this.setState({kingStatus: \"Checkmate.\"});\n                          kingStatus=2;\n                        }\n\n                        break;\n                      }\n                    }\n                  }\n                  break;\n                }\n              } \n\n              //code for stalemate\n              let blackPieces=0, whitePieces=0; \n              for (let j=0; j<squares.length; j++){\n                if (squares[j]){\n                  if (squares[j].player===1)\n                    whitePieces++;\n                  else\n                    blackPieces++;\n                }\n              }\n\n              if (blackPieces===1 && whitePieces===1){\n                this.setState({kingStatus: \"Stalemate.\"});\n                kingStatus=3;\n              }else if ((blackPieces===1 && this.state.player===1) || (whitePieces===1 && this.state.player===2)){\n                for (let j=0; j<squares.length; j++){\n                  if (squares[j] && squares[j] instanceof King && squares[j].player!==this.state.player){//find the king\n                    let countMoves = 0;\n\n                    if (!squares[j-1] && j-1>0){\n                      for (let l=0; l<squares.length; l++){\n                        if (squares[l] && squares[l].player===this.state.player){\n                          const isDestEnemyOccupied = squares[l]? true : false;\n                          if (squares[l].isMovePossible(l, j-1, isDestEnemyOccupied) && this.isMoveLegal(squares[l].getSrcToDestPath(l, j-1), squares)){\n                            countMoves++;\n                            break;\n                          }\n                        }\n                      }\n                    }else\n                      countMoves++;\n\n                    if (!squares[j+1] && j+1<64){\n                      for (let l=0; l<squares.length; l++){\n                        if (squares[l] && squares[l].player===this.state.player){\n                          const isDestEnemyOccupied = squares[l]? true : false;\n                          if (squares[l].isMovePossible(l, j+1, isDestEnemyOccupied) && this.isMoveLegal(squares[l].getSrcToDestPath(l, j+1), squares)){\n                            countMoves++;\n                            break;\n                          }\n                        }\n                      }\n                    }else\n                      countMoves++;\n\n                    if (!squares[j-7] && j-7>0){\n                      for (let l=0; l<squares.length; l++){\n                        if (squares[l] && squares[l].player===this.state.player){\n                          const isDestEnemyOccupied = squares[l]? true : false;\n                          if (squares[l].isMovePossible(l, j-7, isDestEnemyOccupied) && this.isMoveLegal(squares[l].getSrcToDestPath(l, j-7), squares)){\n                            countMoves++;\n                             break;\n                          }\n                        }\n                      }\n                    }else\n                      countMoves++;\n\n                    if (!squares[j+7] && j+7<64){\n                      for (let l=0; l<squares.length; l++){\n                        if (squares[l] && squares[l].player===this.state.player){\n                          const isDestEnemyOccupied = squares[l]? true : false;\n                          if (squares[l].isMovePossible(l, j+7, isDestEnemyOccupied) && this.isMoveLegal(squares[l].getSrcToDestPath(l, j+7), squares)){\n                            countMoves++;\n                            break;\n                          }\n                        }\n                      }\n                    }else\n                      countMoves++;\n\n                   if (!squares[j-8] && j-8>0){\n                      for (let l=0; l<squares.length; l++){\n                        if (squares[l] && squares[l].player===this.state.player){\n                          const isDestEnemyOccupied = squares[l]? true : false;\n                          if (squares[l].isMovePossible(l, j-8, isDestEnemyOccupied) && this.isMoveLegal(squares[l].getSrcToDestPath(l, j-8), squares)){\n                            countMoves++;\n                            break;\n                          }\n                        }\n                      }\n                    }else\n                      countMoves++;\n                    \n                    if (!squares[j+8] && j+8<64){\n                      for (let l=0; l<squares.length; l++){\n                        if (squares[l] && squares[l].player===this.state.player){\n                          const isDestEnemyOccupied = squares[l]? true : false;\n                          if (squares[l].isMovePossible(l, j+8, isDestEnemyOccupied) && this.isMoveLegal(squares[l].getSrcToDestPath(l, j+8), squares)){\n                            countMoves++;\n                            break;\n                          }\n                        }\n                      }\n                    }else\n                      countMoves++;\n\n                    if (!squares[j-9] && j-9>0){\n                      for (let l=0; l<squares.length; l++){\n                        if (squares[l] && squares[l].player===this.state.player){\n                          const isDestEnemyOccupied = squares[l]? true : false;\n                          if (squares[l].isMovePossible(l, j-9, isDestEnemyOccupied) && this.isMoveLegal(squares[l].getSrcToDestPath(l, j-9), squares)){\n                            countMoves++;\n                            break;\n                          }\n                        }\n                      }\n                    }else\n                      countMoves++;\n\n                    if (!squares[j+9] && j+9<64){\n                      for (let l=0; l<squares.length; l++){\n                        if (squares[l] && squares[l].player===this.state.player){\n                          const isDestEnemyOccupied = squares[l]? true : false;\n                          if (squares[l].isMovePossible(l, j+9, isDestEnemyOccupied) && this.isMoveLegal(squares[l].getSrcToDestPath(l, j+9), squares)){\n                            countMoves++;\n                            break;\n                          }\n                        }\n                      }\n                    }else\n                      countMoves++;\n                    \n                   if (countMoves===8){\n                      this.setState({kingStatus: \"Stalemate.\"});\n                      kingStatus=3;\n                   }\n\n                    break;\n                  }\n                }\n              }\n\n              //code for pawn change\n              if (this.state.player===1){\n                for (let j=0; j<8; j++){\n                  if (squares[j] && squares[j].player===1 && squares[j] instanceof Pawn){\n                    this.setState({changePawn: j});\n                    break;\n                  }\n                }\n              }else{\n                for (let j=56; j<64; j++){\n                  if (squares[j] && squares[j].player===2 && squares[j] instanceof Pawn){\n                    this.setState({changePawn: j});\n                    break;\n                  }\n                }\n              }\n            }\n            if (kingStatus!==-1){\n\n\n              textSquares = this.classesToStrings(squares);\n              textWhiteFallenSoldiers = this.classesToStrings(whiteFallenSoldiers);\n              textBlackFallenSoldiers = this.classesToStrings(blackFallenSoldiers);\n              var message = {\n                roundID : this.state.roundID,\n                board : textSquares,\n                whiteFallenSoldiers: textWhiteFallenSoldiers,\n                blackFallenSoldiers: textBlackFallenSoldiers,\n                kingStatus: '',\n                progress : 0\n              }\n\n              if (kingStatus===2){\n                message = {\n                  roundID : this.state.roundID,\n                  board : textSquares,\n                  kingStatus: 'Checkmate.',\n                  whiteFallenSoldiers: textWhiteFallenSoldiers,\n                  blackFallenSoldiers: textBlackFallenSoldiers,\n                  progress : 1\n                }\n                this.setState({\n                  endstate: 3,\n                })\n              }else if(kingStatus===3){\n                message = {\n                  roundID : this.state.roundID,\n                  board : textSquares,\n                  kingStatus: 'Stalemate.',\n                  whiteFallenSoldiers: textWhiteFallenSoldiers,\n                  blackFallenSoldiers: textBlackFallenSoldiers,\n                  progress : 2\n                }\n                this.setState({\n                  endstate: 2,\n                })\n              }else if(kingStatus===1){\n                message = {\n                  roundID : this.state.roundID,\n                  board : textSquares,\n                  whiteFallenSoldiers: textWhiteFallenSoldiers,\n                  blackFallenSoldiers: textBlackFallenSoldiers,\n                  kingStatus: 'Check.',\n                  progress : 0\n                }\n              }\n                        \n              this.state.socket.emit('update', message);\n            }\n          }else{\n            this.setState({\n              status: \"Wrong selection. Choose valid source and destination again.\",\n              sourceSelection: -1,\n            });\n          }\n        }\n      }\n    }\n  }\n  /**\n   * Check all path indices are null. For one steps move of pawn/others or jumping moves of knight array is empty, so  move is legal.\n   * @param  {[type]}  srcToDestPath [array of board indices comprising path between src and dest ]\n   * @return {Boolean}               \n   */ \n  isMoveLegal(srcToDestPath, squares){\n    let isLegal = true;\n    for(let i = 0; i < srcToDestPath.length; i++){\n      if(squares[srcToDestPath[i]] !== null){\n        isLegal = false;\n      }\n    }\n    return isLegal;\n  }\n\n  classesToStrings(squares){\n    console.log(\"squares\")\n    console.log(squares)\n   var textSquares = [];\n    for (let i=0; i<squares.length; i++){\n      if (squares[i]){\n          if (squares[i] instanceof King){\n            if (squares[i].player===1)\n              textSquares.push(\"King 1\");\n            else\n              textSquares.push(\"King 2\");\n          }else if (squares[i] instanceof Pawn){\n            if (squares[i].player===1)\n              textSquares.push(\"Pawn 1\");\n            else\n              textSquares.push(\"Pawn 2\");\n          }else if (squares[i] instanceof Queen){\n            if (squares[i].player===1)\n              textSquares.push(\"Queen 1\");\n            else\n              textSquares.push(\"Queen 2\");\n          }else if (squares[i] instanceof Bishop){\n            if (squares[i].player===1)\n              textSquares.push(\"Bishop 1\");\n            else\n              textSquares.push(\"Bishop 2\");\n          }else if (squares[i] instanceof Knight){\n            if (squares[i].player===1)\n              textSquares.push(\"Knight 1\");\n            else\n              textSquares.push(\"Knight 2\");\n          }else if (squares[i] instanceof Rook){\n            if (squares[i].player===1)\n              textSquares.push(\"Rook 1\");\n            else\n              textSquares.push(\"Rook 2\");\n          }\n      }else{\n        textSquares.push(0);\n      }\n    }\n    console.log(\"textSquares\");\n    console.log(textSquares);\n    return textSquares;\n  }\n\n  // classesToStrings(squares){\n  //   console.log(\"squares\")\n  //   console.log(squares)\n  //  var textSquares = [];\n  //   for (let i=0; i<squares.length; i++){\n  //     if (squares[i]){\n  //       console.log(squares[i] instanceof Bishop)\n  //       console.log(i)\n  //       switch(squares[i].constructor.name){\n  //         case \"King\":\n  //           if (squares[i].player===1)\n  //             textSquares.push(\"King 1\");\n  //           else\n  //             textSquares.push(\"King 2\");\n  //           break;\n  //         case \"Pawn\":\n  //           if (squares[i].player===1)\n  //             textSquares.push(\"Pawn 1\");\n  //           else\n  //             textSquares.push(\"Pawn 2\");\n  //           break;\n  //         case \"Queen\":\n  //           if (squares[i].player===1)\n  //             textSquares.push(\"Queen 1\");\n  //           else\n  //             textSquares.push(\"Queen 2\");\n  //           break;\n  //         case \"Bishop\":\n  //           if (squares[i].player===1)\n  //             textSquares.push(\"Bishop 1\");\n  //           else\n  //             textSquares.push(\"Bishop 2\");\n  //           break;\n  //         case \"Knight\":\n  //           if (squares[i].player===1)\n  //             textSquares.push(\"Knight 1\");\n  //           else\n  //             textSquares.push(\"Knight 2\");\n  //           break;\n  //         case \"Rook\":\n  //           if (squares[i].player===1)\n  //             textSquares.push(\"Rook 1\");\n  //           else\n  //             textSquares.push(\"Rook 2\");\n  //           break;\n  //         default:\n  //           break;\n  //       }\n  //     }else{\n  //       textSquares.push(0);\n  //     }\n  //   }\n  //   console.log(\"textSquares\");\n  //   console.log(textSquares);\n  //   return textSquares;\n  // }\n\n  setBishop(){\n    let newSquares = this.state.squares;\n    if (this.state.player===1){\n      newSquares[this.state.changePawn] = new Bishop(2);\n      this.setState({\n        squares: newSquares,\n        changePawn: -1\n      });\n    }else{\n      newSquares[this.state.changePawn] = new Bishop(1);\n      this.setState({\n        squares: newSquares,\n        changePawn: -1\n      });\n    }\n    var textSquares = this.classesToStrings(this.state.squares);\n    var message = {\n      roundID : this.state.roundID,\n      board: textSquares,\n      dontChange: true\n    }\n    this.state.socket.emit('update', message);\n  }\n\n  setQueen(){\n    let newSquares = this.state.squares;\n    if (this.state.player===1){\n      newSquares[this.state.changePawn] = new Queen(2);\n      this.setState({\n        squares: newSquares,\n        changePawn: -1\n      });\n    }else{\n      newSquares[this.state.changePawn] = new Queen(1);\n      this.setState({\n        squares: newSquares,\n        changePawn: -1\n      });\n    }\n    var textSquares = this.classesToStrings(this.state.squares);\n    var message = {\n      roundID : this.state.roundID,\n      board: textSquares,\n      dontChange: true\n    }\n    this.state.socket.emit('update', message);\n  }\n\n  setKnight(){\n    let newSquares = this.state.squares;\n    if (this.state.player===1){\n      newSquares[this.state.changePawn] = new Knight(2);\n      this.setState({\n        squares: newSquares,\n        changePawn: -1\n      });\n    }else{\n      newSquares[this.state.changePawn] = new Knight(1);\n      this.setState({\n        squares: newSquares,\n        changePawn: -1\n      });\n    }\n    var textSquares = this.classesToStrings(this.state.squares);\n    var message = {\n      roundID : this.state.roundID,\n      board: textSquares,\n      dontChange: true\n    }\n    this.state.socket.emit('update', message);\n  }\n\n  setRook(){\n    let newSquares = this.state.squares;\n    if (this.state.player===1){\n      newSquares[this.state.changePawn] = new Rook(2);\n      this.setState({\n        squares: newSquares,\n        changePawn: -1\n      });\n    }else{\n      newSquares[this.state.changePawn] = new Rook(1);\n      this.setState({\n        squares: newSquares,\n        changePawn: -1\n      });\n    }\n    var textSquares = this.classesToStrings(this.state.squares);\n    var message = {\n      roundID : this.state.roundID,\n      board: textSquares,\n      dontChange: true\n    }\n    this.state.socket.emit('update', message);\n  }\n\n  render() {\n    let showButtons=false;\n    if (this.state.changePawn!==-1)\n      showButtons=true;\n    \n    let status = ui.showGameStatus(this.state.connectionStatus);\n    let endState = ui.showWinner(this.state.endstate, this.state.connectionStatus);\n\n    if (this.state.connectionStatus !== 5) {\n        var turn = ui.showTurn(this.state.connectionStatus, this.state.myTurn);\n        var symbol ='Your color: <div id=\"player-turn-box\" style=\"background-color:'+this.state.myColor+'\"></div>'\n    }\n        \n    return (\n      <div className=\"game\"> \n          <div className=\"game-title\">\n            <div>Chess</div>\n          </div>\n\n          <div className=\"game-board\">\n            <Board \n              squares = {this.state.squares}\n              onClick = {(i) => this.handleClick(i)}\n            />\n          </div>\n\n          <div className=\"game-info\">\n            <div>{status}</div>\n            <td dangerouslySetInnerHTML={{__html: symbol}} />\n            <div>{turn}</div>\n           \n            <div className=\"game-status\">{this.state.kingStatus}</div>\n            <div className=\"game-status\">{this.state.status}</div>\n\n            <div className=\"fallen-soldier-block\">\n              \n              {<FallenSoldierBlock\n              whiteFallenSoldiers = {this.state.whiteFallenSoldiers}\n              blackFallenSoldiers = {this.state.blackFallenSoldiers}\n              />\n            }\n            </div>\n            {showButtons\n              ? <div> <button onClick = {this.setBishop}> Bishop </button> \n                      <button onClick = {this.setQueen}> Queen </button> \n                      <button onClick = {this.setKnight}> Knight </button> \n                      <button onClick = {this.setRook}> Rook </button> \n                </div>\n              : <div> </div>\n            }\n          </div>\n          <div id=\"endstate\">{endState}</div>\n\n      </div>\n    );\n  }\n}","\n\nexport function showGameStatus(status){\n\tlet message;\n\n\tswitch(status){\n\t\tcase -3:\n\t\t\tmessage = 'Unauthorized connection.';\n\t\t\tbreak;\n\t\tcase -2:\n\t\t\tmessage = 'Redirecting...';\n\t\t\tbreak;\n\t\tcase -1:\n\t\t\tmessage = 'No connection found.';\n\t\t\tbreak;\n\t\tcase 0:\n\t\t\tmessage = 'Connected!';\n\t\t\tbreak;\n\t\tcase 1:\n\t\t\tmessage = 'Wait for opponent to connect.';\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tmessage = 'The game is active.';\n\t\t\tbreak;\n\t\tcase 3:\n\t\t\tmessage = 'The game is completed!';\n\t\t\tbreak;\n\t\tcase 4:\n\t\t\tmessage = 'The opponent left.';\n\t\t\tbreak;\n\t\tcase 5:\n\t\t\tmessage = 'Spectator mode.';\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tmessage = 'Undefined status.';\n\t\t\tbreak;\n\t}\n\n\treturn message;\n}\n\n\nexport function showWinner(endstate, status){\n\tlet message;\n\n\tif (status !== 5) {\n\t\tif (endstate === 3) {\n\t\t\tmessage = 'VICTORY!';\n\t\t}else if (endstate === 1){\n\t\t\tmessage = 'DEFEAT!';\n\t\t}else if (endstate === 2) {\n\t\t\tmessage = 'TIE!';\n\t\t}\n\t}else{\n\t\t// if (win !== null) {\n\t\t// \tmessage = 'WINNER: '+win;\n\t\t// }else if (end){\n\t\t// \tmessage = 'TIE!';\n\t\t// }\n\t}\n\n\treturn message;\n}\n\nexport function showTurn(status, turn){\n\tlet message;\n\n\tif (status === 2) {\n\t\tif (turn) {\n\t\t\tmessage = 'Your turn.';\n\t\t}else{\n\t\t\tmessage = 'Opponent\\'s turn.';\n\t\t}\n\t}\n\n\treturn message;\n}\n\n\nexport function showSymbol(symbol){\n\tlet message;\n\n\tif (symbol) {\n\t\tmessage = 'You are: ' + symbol;\n\t}\n\n\treturn message;\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport Game from './components/game.js'\n\n\nReactDOM.render(\n  <Game />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}