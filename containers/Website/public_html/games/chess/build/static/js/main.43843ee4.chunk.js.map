{"version":3,"sources":["images/white_bishop.svg","images/black_bishop.svg","images/white_king.svg","images/black_king.svg","images/white_knight.svg","images/black_knight.svg","images/white_pawn.svg","images/black_pawn.svg","images/white_queen.svg","images/black_queen.svg","images/white_rook.svg","images/black_rook.svg","components/square.js","components/board.js","components/fallen-soldier-block.js","pieces/piece.js","pieces/bishop.js","pieces/king.js","pieces/knight.js","pieces/pawn.js","pieces/queen.js","pieces/rook.js","helpers/board-initialiser.js","components/multiplayer.js","components/game.js","index.js"],"names":["module","exports","Square","props","className","shade","onClick","style","Board","i","squareShade","this","squares","board","squareRows","j","isEven","push","renderSquare","id","React","Component","num","FallenSoldierBlock","square","piece","whiteFallenSoldiers","map","ws","index","blackFallenSoldiers","bs","Piece","player","iconUrl","backgroundImage","Bishop","require","src","dest","Math","abs","pathStart","pathEnd","incrementBy","path","King","Knight","Pawn","initialPositions","1","2","isDestEnemyOccupied","indexOf","Queen","mod","diff","Rook","initialiseChessBoard","Array","fill","connect","server","token","handShake","query","socket","openSocket","stringsToClasses","classes","length","splitter","toString","split","parseInt","Game","obj","args","url_string","window","location","url","URL","host","hostname","playmanster","searchParams","get","gamemaster","conn","data","state","sourceSelection","kingStatus","turn","type","myTurn","changePawn","status","connectionStatus","progress","roundID","setBishop","bind","setQueen","setKnight","setRook","on","message","setState","console","log","disconnect","xhr","XMLHttpRequest","onload","e","readyState","respone","JSON","parse","responseText","reconnect","open","send","slice","backgroundColor","constructor","name","isMovePossible","srcToDestPath","getSrcToDestPath","isMoveLegal","whitePushed","blackPushed","check","saveSquare","moveOn","k","checkSrcToDestPath","pop","itisCheck","l","m","countMoves","blackPieces","whitePieces","textSquares","classesToStrings","textWhiteFallenSoldiers","textBlackFallenSoldiers","emit","isPossible","srcToDestPath1","srcToDestPath2","srcToDestPath3","isLegal","newSquares","dontChange","showButtons","handleClick","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.43843ee4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/white_bishop.28e8d8aa.svg\";","module.exports = __webpack_public_path__ + \"static/media/black_bishop.749373a9.svg\";","module.exports = __webpack_public_path__ + \"static/media/white_king.31362a80.svg\";","module.exports = __webpack_public_path__ + \"static/media/black_king.ea645f11.svg\";","module.exports = __webpack_public_path__ + \"static/media/white_knight.3ece5029.svg\";","module.exports = __webpack_public_path__ + \"static/media/black_knight.88ad52be.svg\";","module.exports = __webpack_public_path__ + \"static/media/white_pawn.27d127d0.svg\";","module.exports = __webpack_public_path__ + \"static/media/black_pawn.44553199.svg\";","module.exports = __webpack_public_path__ + \"static/media/white_queen.01938cfd.svg\";","module.exports = __webpack_public_path__ + \"static/media/black_queen.9fbe0beb.svg\";","module.exports = __webpack_public_path__ + \"static/media/white_rook.007b43f5.svg\";","module.exports = __webpack_public_path__ + \"static/media/black_rook.e7f61dec.svg\";","import React from 'react';\n\nimport '../index.css';\n\nexport default function Square(props) {\n\t\n    return (\n      <button className={\"square \" + props.shade}\n      onClick={props.onClick}\n      style={props.style}>\n       \n      </button>\n    );\n  \n}\n","import React from 'react';\n\nimport '../index.css';\nimport Square from './square.js';\n\nexport default class Board extends React.Component {\n\n  renderSquare(i, squareShade) {\n    return <Square \n    style = {this.props.squares[i]? this.props.squares[i].style : null}\n    shade = {squareShade}\n    onClick={() => this.props.onClick(i)}\n    />\n  }\n\n  render() {\n    const board = [];\n    for(let i = 0; i < 8; i++){\n      const squareRows = [];\n      for(let j = 0; j < 8; j++){\n        const squareShade = (isEven(i) && isEven(j)) || (!isEven(i) && !isEven(j))? \"light-square\" : \"dark-square\";\n        squareRows.push(this.renderSquare((i*8) + j, squareShade));\n      }\n      board.push(<div className=\"board-row\">{squareRows}</div>)\n    }\n\n    return (\n      <div id=\"centered\">\n        {board}\n      </div>\n    );\n  }\n}\n\n\nfunction isEven(num){\n  return num % 2 === 0\n}","import React from 'react';\n\nimport '../index.css';\nimport Square from './square.js';\n\nexport default class FallenSoldierBlock extends React.Component {\n\n  renderSquare(square, i, squareShade) {\n    return <Square \n    piece = {square} \n    style = {square.style}\n    />\n  }\n\n  render() {\n    return (\n      <div>\n      <div className=\"board-row\">{this.props.whiteFallenSoldiers.map((ws, index) =>\n        this.renderSquare(ws, index)\n        )}</div>\n      <div className=\"board-row\">{this.props.blackFallenSoldiers.map((bs, index) =>\n        this.renderSquare(bs, index)\n        )}</div>\n      </div>\n      );\n  }\n}\n\n","export default class Piece {\n  constructor(player, iconUrl){\n    this.player = player;\n    this.style = {backgroundImage: \"url('\"+iconUrl+\"')\"};\n  }\n}","import Piece from './piece.js';\n\nexport default class Bishop extends Piece {\n  constructor(player){\n    super(player, (player === 1? require(\"../images/white_bishop.svg\") : require(\"../images/black_bishop.svg\")));\n  }\n\n  isMovePossible(src, dest){\n    return (Math.abs(src - dest) % 9 === 0 || Math.abs(src - dest) % 7 === 0);\n  }\n\n  /**\n   * get path between src and dest (src and dest exclusive)\n   * @param  {num} src  \n   * @param  {num} dest \n   * @return {[array]}      \n   */\n  getSrcToDestPath(src, dest){\n    let path = [], pathStart, pathEnd, incrementBy;\n    if(src > dest){\n      pathStart = dest;\n      pathEnd = src;\n    }\n    else{\n      pathStart = src;\n      pathEnd = dest;\n    }\n    if(Math.abs(src - dest) % 9 === 0){\n      incrementBy = 9;\n      pathStart += 9;\n    }\n    else{\n      incrementBy = 7;\n      pathStart += 7;\n    }\n\n    for(let i = pathStart; i < pathEnd; i+=incrementBy){\n      path.push(i);\n    }\n    return path;\n  }\n}\n","import Piece from './piece.js';\n\nexport default class King extends Piece {\n  constructor(player){\n    super(player, (player === 1? require(\"../images/white_king.svg\") : require(\"../images/black_king.svg\")));\n  }\n\n  isMovePossible(src, dest){\n    return (src - 9 === dest || \n      src - 8 === dest || \n      src - 7 === dest || \n      src + 1 === dest || \n      src + 9 === dest || \n      src + 8 === dest || \n      src + 7 === dest || \n      src - 1 === dest);\n  }\n\n  /**\n   * always returns empty array because of one step\n   * @return {[]}\n   */\n  getSrcToDestPath(src, dest){\n    return [];\n  }\n}\n","import Piece from './piece.js';\n\nexport default class Knight extends Piece {\n  constructor(player){\n    super(player, (player === 1? require(\"../images/white_knight.svg\") : require(\"../images/black_knight.svg\")));\n  }\n\n  isMovePossible(src, dest){\n    return (src - 17 === dest || \n      src - 10 === dest || \n      src + 6 === dest || \n      src + 15 === dest || \n      src - 15 === dest || \n      src - 6 === dest || \n      src + 10 === dest || \n      src + 17 === dest);\n  }\n\n  /**\n   * always returns empty array because of jumping\n   * @return {[]}\n   */\n  getSrcToDestPath(){\n    return [];\n  }\n}\n","import Piece from './piece.js';\n\nexport default class Pawn extends Piece {\n  constructor(player){\n    super(player, (player === 1?  require(\"../images/white_pawn.svg\") : require(\"../images/black_pawn.svg\")));\n    this.initialPositions = {\n      1: [48, 49, 50, 51, 52, 53, 54, 55],\n      2: [8, 9, 10, 11, 12, 13, 14, 15]\n    }\n  }\n\n  isMovePossible(src, dest, isDestEnemyOccupied){\n\n    if(this.player === 1){\n      if((dest === src - 8 && !isDestEnemyOccupied) || (dest === src - 16 && this.initialPositions[1].indexOf(src) !== -1)){\n        return true;\n      }\n      else if(isDestEnemyOccupied && (dest === src - 9 || dest === src - 7)){\n        return true;\n      }\n    }\n    else if(this.player === 2){\n      if((dest === src + 8 && !isDestEnemyOccupied) || (dest === src + 16 && this.initialPositions[2].indexOf(src) !== -1)){\n        return true;\n      }\n      else if(isDestEnemyOccupied && (dest === src + 9 || dest === src + 7)){\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * returns array of one if pawn moves two steps, else returns empty array  \n   * @param  {[type]} src  [description]\n   * @param  {[type]} dest [description]\n   * @return {[type]}      [description]\n   */\n  getSrcToDestPath(src, dest){\n    if(dest === src - 16){\n      return [src - 8];\n    }\n    else if(dest === src + 16){\n      return [src + 8];\n    }\n    return [];\n  }\n}\n","import Piece from './piece.js';\n\nexport default class Queen extends Piece {\n  constructor(player){\n    super(player, (player === 1? require(\"../images/white_queen.svg\") : require(\"../images/black_queen.svg\")));\n  }\n\n  isMovePossible(src, dest){\n    let mod = src % 8;\n    let diff = 8 - mod;\n    \n    return (Math.abs(src - dest) % 9 === 0 || Math.abs(src - dest) % 7 === 0) ||\n      (Math.abs(src - dest) % 8 === 0 || (dest >= (src - mod) && dest < (src + diff)));\n  }\n\n  /**\n   * get path between src and dest (src and dest exclusive)\n   * @param  {num} src  \n   * @param  {num} dest \n   * @return {[array]}      \n   */\n  getSrcToDestPath(src, dest){\n    let path = [], pathStart, pathEnd, incrementBy;\n    if(src > dest){\n      pathStart = dest;\n      pathEnd = src;\n    }\n    else{\n      pathStart = src;\n      pathEnd = dest;\n    }\n    if(Math.abs(src - dest) % 8 === 0){\n      incrementBy = 8;\n      pathStart += 8;\n    }\n    else if(Math.abs(src - dest) % 9 === 0){\n      incrementBy = 9;\n      pathStart += 9;\n    }\n    else if(Math.abs(src - dest) % 7 === 0){\n      incrementBy = 7;\n      pathStart += 7;\n    }\n    else{\n      incrementBy = 1;\n      pathStart += 1;\n    }\n\n    for(let i = pathStart; i < pathEnd; i+=incrementBy){\n      path.push(i);\n    }\n    return path;\n  }\n}","import Piece from './piece.js';\n\nexport default class Rook extends Piece {\n  constructor(player){\n    super(player, (player === 1? require(\"../images/white_rook.svg\") : require(\"../images/black_rook.svg\")));\n  }\n\n  isMovePossible(src, dest){\n    let mod = src % 8;\n    let diff = 8 - mod;\n    return (Math.abs(src - dest) % 8 === 0 || (dest >= (src - mod) && dest < (src + diff)));\n  }\n\n  /**\n   * get path between src and dest (src and dest exclusive)\n   * @param  {num} src  \n   * @param  {num} dest \n   * @return {[array]}      \n   */\n  getSrcToDestPath(src, dest){\n    let path = [], pathStart, pathEnd, incrementBy;\n    if(src > dest){\n      pathStart = dest;\n      pathEnd = src;\n    }\n    else{\n      pathStart = src;\n      pathEnd = dest;\n    }\n    if(Math.abs(src - dest) % 8 === 0){\n      incrementBy = 8;\n      pathStart += 8;\n    }\n    else{\n      incrementBy = 1;\n      pathStart += 1;\n    }\n\n    for(let i = pathStart; i < pathEnd; i+=incrementBy){\n      path.push(i);\n    }\n    return path;\n  }\n}\n","import Bishop from '../pieces/bishop.js';\nimport King from '../pieces/king.js';\nimport Knight from '../pieces/knight.js';\nimport Pawn from '../pieces/pawn.js';\nimport Queen from '../pieces/queen.js';\nimport Rook from '../pieces/rook.js';\n\nexport default function initialiseChessBoard(){\n  const squares = Array(64).fill(null);\n\n  for(let i = 8; i < 16; i++){\n    squares[i] = new Pawn(2);\n    squares[i+40] = new Pawn(1);\n  }\n  squares[0] = new Rook(2);\n  squares[7] = new Rook(2);\n  squares[56] = new Rook(1);\n  squares[63] = new Rook(1);\n\n  squares[1] = new Knight(2);\n  squares[6] = new Knight(2);\n  squares[57] = new Knight(1);\n  squares[62] = new Knight(1);\n\n  squares[2] = new Bishop(2);\n  squares[5] = new Bishop(2);\n  squares[58] = new Bishop(1);\n  squares[61] = new Bishop(1);\n\n  squares[3] = new Queen(2);\n  squares[4] = new King(2);\n\n  squares[59] = new Queen(1);\n  squares[60] = new King(1);\n\n  return squares;\n}","import openSocket from 'socket.io-client';\nimport Bishop from '../pieces/bishop.js';\nimport Knight from '../pieces/knight.js';\nimport Queen from '../pieces/queen.js';\nimport Rook from '../pieces/rook.js';\nimport King from '../pieces/king.js';\nimport Pawn from '../pieces/pawn.js';\n// ==========================================\n// ==> Variables in state <==\n\n//==> host: The domain of the host (localhost)\n//==> gamemaster: the port of gamemaster for client requests\n//==> token: the unique token of the user issued from the Authorization Service\n//==> socket: the socket objet of the client connected to the server\n//==> type: the symbol of the user (X,O or white, black)\n//==> roundID: the ID of the game\n\n//==> connectionStatus: Connection Status\n  // -3 => unauthorized user\n  // -2 => trying to reconnect\n  // -1 => no connection (the client has not connect to the giver Playmaster)\n  //  0 => connected\n  //  1 => wait opponent to connect\n  //  2 => ready to play\n  //  3 => the game is completed\n  //  4 => winner because opponent left\n  //  5 => spectator mode\n\n\n// ==========================================\n// ==> Messages from client to playmaster <==\n\n// 1. Send the new board \n\n// let message = {\n//   roundID : this.state.roundID,\n//   board : squares\n// }\n// this.state.socket.emit('update', message)\n\n\n// 2. Inform the playmaster for the winner, if you are the last to play\n\n// let message = {\n//   roundID : this.state.roundID,\n//   winner: winnerInfo,  //0 for tie, 1 if you won, -1 if you lost\n// }\n// this.state.socket.emit('endgame', message)\n\n// ==========================================\n\n// ===> FOR OTHER GAME CHANGE THE LINE 109 and 133-140\n// ==========================================\n\n\n//Get argument from the URL\nexport function getArgumenets() {\n\tlet url_string = window.location['href'];\n  \tlet url = new URL(url_string);\n\n  \tlet host = url.hostname;\n  \tlet playmanster = url.searchParams.get(\"pm\");\n  \tlet gamemaster = url.searchParams.get(\"gm\");\n  \tlet token = url.searchParams.get(\"token\");\n\n  \tlet args = {\n  \t\t'host': host,\n  \t\t'token': token,\n  \t\t'playmanster' : playmanster,\n  \t\t'gamemaster' : gamemaster,\n  \t};\n\n  \treturn args;\n}\n\n\n//Connect to Playmaster\nexport function connect(server, token){\n\n    let handShake = {\n    \tquery:'token='+token\n    }\n\n    let socket = openSocket(server, handShake)\n\n    let response = {\n    \t'socket': socket,\n    \t'connectionStatus': socket['connected'] ? 0 : -1,\n    }\n\n    return response;\n}\n\n\nexport function setListeners(obj){\n\n  //You connected first, wait for the opponent to connect\n  obj.state.socket.on('wait', message => {\n    obj.setState({\n        connectionStatus: 1,\n        roundID: message['roundID'],\n      })\n  });\n\n\n\n  //Both players are connected. The game can begin\n  obj.state.socket.on('init', message => {\n\n    //Check if the game is new or it is continued from server fault.\n    if (obj.state.type === null){\n      obj.setState({\n        connectionStatus: 2,\n        myTurn: message['turn'],\n        roundID: message['roundID']\n      })\n    }else{\n      obj.setState({\n        connectionStatus: 2,\n        roundID: message['roundID']   //get the new round ID\n      })\n    }\n  });\n\n  //Both players are connected. The game can begin\n  obj.state.socket.on('viewer', board => {\n    console.log('VIWER')\n    var classes = stringsToClasses(board);\n    \n    obj.setState({\n      connectionStatus: 5,\n      squares: classes,\n      myTurn: false\n    })\n  });\n\n\n  //Receive the updated board\n  obj.state.socket.on('board', board => {\n    var classes = stringsToClasses(board[\"board\"]);\n    var whiteFallenSoldiers = stringsToClasses(board[\"whiteFallenSoldiers\"]);\n    var blackFallenSoldiers = stringsToClasses(board[\"blackFallenSoldiers\"]);\n    var turn, player;\n    if (!board['dontChange']){\n      turn = obj.state.turn === 'white'? 'black' : 'white';\n      player = obj.state.player === 1? 2: 1;\n    }else{\n      turn = obj.state.turn;\n      player = obj.state.player;\n    }\n    console.log(board[\"board\"]);\n    console.log(classes);\n      obj.setState({\n        squares: classes,\n        turn: turn,\n        whiteFallenSoldiers: whiteFallenSoldiers,\n        blackFallenSoldiers: blackFallenSoldiers,\n        status: board['status'],\n        kingStatus: board['kingStatus'],\n        player: player,\n        myTurn: true,\n      })\n\n      //Set Game progress\n      if (board['progress']!==0) {\n        obj.setState({\n          connectionStatus: 3,\n        })\n      }\n  }); \n\n\n  //Handler for server disconnection\n  obj.state.socket.on('disconnect', board => {\n\n      //if you never connected or the game is completed, return\n      if (obj.state.connectionStatus < 0 || obj.state.connectionStatus > 2) {\n        return;\n      }\n\n    obj.state.socket.disconnect()\n\n    obj.setState({\n      connectionStatus: 4,\n    })\n    \n    //Create a request to GameMaster\n    var xhr = new XMLHttpRequest()\n\n    xhr.onload = function (e) {\n\n      if (xhr.readyState === 4) {\n\n        //Check if the GameMaster accepted the request\n        if (xhr.connectionStatus === 200) {  \n          let respone = JSON.parse(xhr.responseText);\n          obj.reconnect(respone['playmaster']);\n        }else if(xhr.connectionStatus === 403){\n          obj.setState({\n            connectionStatus: -3,\n          })\n        }\n      }\n    }\n\n    let game = 'chess';\n    let master = obj.state.host + ':' + obj.state.gamemaster\n    let url = 'http://'+master+'?'+'token='+obj.state.token+'&game='+game;\n\n    xhr.open('GET', url);\n    xhr.send();\n  }); \n\n  //The game is over from the server's side\n  obj.state.socket.on('endgame', message => {\n      obj.setState({\n        connectionStatus: 4,\n      })\n      obj.state.socket.disconnect();\n  }); \n\n}\n\n//Establish a new connections\nexport function reconnect(obj, port){\n  console.log('reconnecting...')\n  let playmaster = this.state.host + ':' + port;\n  let token = this.state.token;\n  var data = connect(playmaster,token)\n\n  obj.setState({\n    socket: data['socket'],\n    connectionStatus: data['connectionStatus'],\n  });\n\n  console.log(data['socket']);\n  obj.setListeners();\n}\n\nfunction stringsToClasses(squares){\n  var classes = [];\n\n  if (squares){\n    for (let i=0; i<squares.length; i++){\n      let splitter = squares[i].toString().split(\" \");\n\n      switch(splitter[0]){\n        case \"King\":\n          classes.push(new King(parseInt(splitter[1])));\n          break;\n        case \"Pawn\":\n          classes.push(new Pawn(parseInt(splitter[1])));\n          break;\n        case \"Queen\":\n          classes.push(new Queen(parseInt(splitter[1])));\n          break;\n        case \"Bishop\":\n          classes.push(new Bishop(parseInt(splitter[1])));\n          break;\n        case \"Knight\":\n          classes.push(new Knight(parseInt(splitter[1])));\n          break;\n        case \"Rook\":\n          classes.push(new Rook(parseInt(splitter[1])));\n          break;\n        default:\n          classes.push(null);\n      }\n    }\n  }\n  \n  return classes;\n}","import React from 'react';\n\nimport '../index.css';\nimport Board from './board.js';\nimport FallenSoldierBlock from './fallen-soldier-block.js';\nimport initialiseChessBoard from '../helpers/board-initialiser.js';\nimport Bishop from '../pieces/bishop.js';\nimport King from '../pieces/king.js';\nimport Knight from '../pieces/knight.js';\nimport Queen from '../pieces/queen.js';\nimport Pawn from '../pieces/pawn.js';\nimport Rook from '../pieces/rook.js';\nimport * as conn from './multiplayer.js'; \n\nexport default class Game extends React.Component {\n  constructor(props){\n    super(props);\n    let args = conn.getArgumenets();\n    let data = conn.connect(args['host']+':'+args['playmanster'],args['token']);\n    this.state = {\n      squares: initialiseChessBoard(),\n      whiteFallenSoldiers: [],\n      blackFallenSoldiers: [],\n      player: 1,\n      sourceSelection: -1,\n      kingStatus: '',\n      turn: 'white',\n      type: null,\n      myTurn: false,\n      changePawn: -1,\n      host: args['host'],\n      gamemaster: args['gamemaster'],\n      token: args['token'],\n      socket: data['socket'],\n      status: '',\n      connectionStatus: data['connectionStatus'],\n      progress: 0,\n      roundID: null\n    }\n    this.setBishop = this.setBishop.bind(this);\n    this.setQueen = this.setQueen.bind(this);\n    this.setKnight = this.setKnight.bind(this);\n    this.setRook = this.setRook.bind(this);\n    conn.setListeners(this);\n  }\n \n  handleClick(i){\n    if (this.state.myTurn){\n      const squares = this.state.squares.slice();\n      \n      if(this.state.sourceSelection === -1){\n        if(!squares[i] || squares[i].player !== this.state.player){\n          this.setState({status: \"Wrong selection. Choose player \" + this.state.player + \" pieces.\"});\n          if (squares[i]) {\n            squares[i].style = {...squares[i].style, backgroundColor: \"\"};\n          }\n        }\n        else{\n          squares[i].style = {...squares[i].style, backgroundColor: \"RGB(111,143,114)\"}; // Emerald from http://omgchess.blogspot.com/2015/09/chess-board-color-schemes.html\n          this.setState({\n            status: \"Choose destination for the selected piece\",\n            sourceSelection: i\n          });\n        }\n      }else if(this.state.sourceSelection > -1){\n        squares[this.state.sourceSelection].style = {...squares[this.state.sourceSelection].style, backgroundColor: \"\"};\n\n        if(squares[i] && squares[i].player === this.state.player && \n          (squares[this.state.sourceSelection].constructor.name===\"King\" || squares[this.state.sourceSelection].constructor.name===\"Rook\") &&\n          (squares[i].constructor.name===\"King\" || squares[i].constructor.name===\"Rook\")){/////////////////castling case\n          \n          let isPossible = true;\n\n          if (squares[i].player === 1){//check correct position of pieces\n            if (this.state.sourceSelection===60 && squares[this.state.sourceSelection].constructor.name===\"King\"){\n              if (i!==63 && i!==56)\n                isPossible=false;\n            }else if (i===60 && squares[i].constructor.name===\"King\"){\n              if (this.state.sourceSelection!==63 && this.state.sourceSelection!==56)\n                isPossible=false;\n            }else\n              isPossible=false;\n          }else{\n            if (this.state.sourceSelection===4 && squares[this.state.sourceSelection].constructor.name===\"King\"){\n              if (i!==0 && i!==7)\n                isPossible=false;\n            }else if (i===4 && squares[i].constructor.name===\"King\"){\n              if (this.state.sourceSelection!==0 && this.state.sourceSelection!==7)\n                isPossible=false;\n            }else\n              isPossible=false;\n          }\n\n          if (isPossible){//check that there are no pieces between them\n            if (squares[i].player === 1){\n              if (i===63 || this.state.sourceSelection===63){\n                if (squares[61] || squares[62])\n                  isPossible=false;\n              }else{\n                if (squares[57] || squares[58] || squares[59])\n                  isPossible=false;\n              }\n            }else{\n              if (i===7 || this.state.sourceSelection===7){\n                if (squares[5] || squares[6])\n                  isPossible=false;\n              }else{\n                if (squares[1] || squares[2] || squares[3])\n                  isPossible=false;\n              }\n            }\n\n            if (isPossible){//check if king is or passes from check\n              if (squares[i].player === 1){\n                if (i===63 || this.state.sourceSelection===63){\n                  for (let j=0; j<squares.length; j++){\n                    if (squares[j] && squares[j].player!==this.state.player){\n                      const srcToDestPath1 = squares[j].getSrcToDestPath(j, 60);\n                      const srcToDestPath2 = squares[j].getSrcToDestPath(j, 61);\n                      const srcToDestPath3 = squares[j].getSrcToDestPath(j, 62);\n                      if ((squares[j].isMovePossible(j, 60, false) && this.isMoveLegal(srcToDestPath1, squares)) ||\n                          (squares[j].isMovePossible(j, 61, false) && this.isMoveLegal(srcToDestPath2, squares)) ||\n                          (squares[j].isMovePossible(j, 62, false) && this.isMoveLegal(srcToDestPath3, squares))){\n                        isPossible=false;\n                        break;\n                      }\n                    }\n                  }\n                }else{\n                  for (let j=0; j<squares.length; j++){\n                    if (squares[j] && squares[j].player!==this.state.player){\n                      const srcToDestPath1 = squares[j].getSrcToDestPath(j, 60);\n                      const srcToDestPath2 = squares[j].getSrcToDestPath(j, 59);\n                      const srcToDestPath3 = squares[j].getSrcToDestPath(j, 58);\n                      if ((squares[j].isMovePossible(j, 60, false) && this.isMoveLegal(srcToDestPath1, squares)) ||\n                          (squares[j].isMovePossible(j, 59, false) && this.isMoveLegal(srcToDestPath2, squares)) ||\n                          (squares[j].isMovePossible(j, 58, false) && this.isMoveLegal(srcToDestPath3, squares))){\n                        isPossible=false;\n                        break;\n                      }\n                    }\n                  }\n                }\n              }else{\n                if (i===7 || this.state.sourceSelection===7){\n                  for (let j=0; j<squares.length; j++){\n                    if (squares[j] && squares[j].player!==this.state.player){\n                      const srcToDestPath1 = squares[j].getSrcToDestPath(j, 4);\n                      const srcToDestPath2 = squares[j].getSrcToDestPath(j, 5);\n                      const srcToDestPath3 = squares[j].getSrcToDestPath(j, 6);\n                      if ((squares[j].isMovePossible(j, 4, false) && this.isMoveLegal(srcToDestPath1, squares)) ||\n                          (squares[j].isMovePossible(j, 5, false) && this.isMoveLegal(srcToDestPath2, squares)) ||\n                          (squares[j].isMovePossible(j, 6, false) && this.isMoveLegal(srcToDestPath3, squares))){\n                        isPossible=false;\n                        break;\n                      }\n                    }\n                  }\n                }else{\n                  for (let j=0; j<squares.length; j++){\n                    if (squares[j] && squares[j].player!==this.state.player){\n                      const srcToDestPath1 = squares[j].getSrcToDestPath(j, 4);\n                      const srcToDestPath2 = squares[j].getSrcToDestPath(j, 3);\n                      const srcToDestPath3 = squares[j].getSrcToDestPath(j, 2);\n                      if ((squares[j].isMovePossible(j, 4, false) && this.isMoveLegal(srcToDestPath1, squares)) ||\n                          (squares[j].isMovePossible(j, 3, false) && this.isMoveLegal(srcToDestPath2, squares)) ||\n                          (squares[j].isMovePossible(j, 2, false) && this.isMoveLegal(srcToDestPath3, squares))){\n                        isPossible=false;\n                        break;\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n\n          if (isPossible){\n            if (squares[i].player === 1){\n              if (i===63 || this.state.sourceSelection===63){\n                squares[62]=squares[60];\n                squares[61]=squares[63];\n                squares[63]=null;\n              }else{\n                squares[58]=squares[60];\n                squares[59]=squares[56];\n                squares[56]=null;\n              }\n              squares[60]=null;\n            }else{\n              if (i===7 || this.state.sourceSelection===7){\n                squares[6]=squares[4];\n                squares[5]=squares[7];\n                squares[7]=null;\n              }else{\n                squares[2]=squares[4];\n                squares[3]=squares[0];\n                squares[0]=null;\n              }\n              squares[4]=null;\n            }\n\n            let player = this.state.player === 1? 2: 1;\n            let turn = this.state.turn === 'white'? 'black' : 'white';\n            this.setState({\n              squares: squares,\n              player: player,\n              turn: turn,\n              type: turn,\n              kingStatus: '',\n              myTurn: !this.state.myTurn,\n              changePawn: -1,\n              status: \"Castling occured.\",\n              sourceSelection: -1,\n            });\n            var textSquares = this.classesToStrings(squares);\n            var textWhiteFallenSoldiers = this.classesToStrings(this.state.whiteFallenSoldiers);\n            var textBlackFallenSoldiers = this.classesToStrings(this.state.blackFallenSoldiers);\n            let message = {\n              roundID : this.state.roundID,\n              board : textSquares,\n              whiteFallenSoldiers: textWhiteFallenSoldiers,\n              blackFallenSoldiers: textBlackFallenSoldiers,\n              progress : 0\n            }\n            this.state.socket.emit('update', message);\n          }else{\n            this.setState({\n              status: \"Wrong selection. Castling not allowed.\",\n              sourceSelection: -1,\n            });\n          }\n\n        }else if(squares[i] && squares[i].player === this.state.player){\n          this.setState({\n            status: \"Wrong selection. Choose valid source and destination again.\",\n            sourceSelection: -1,\n          });\n        }else{\n          const whiteFallenSoldiers = this.state.whiteFallenSoldiers.slice();\n          const blackFallenSoldiers = this.state.blackFallenSoldiers.slice();\n          const isDestEnemyOccupied = squares[i]? true : false; \n          const isMovePossible = squares[this.state.sourceSelection].isMovePossible(this.state.sourceSelection, i, isDestEnemyOccupied);\n          const srcToDestPath = squares[this.state.sourceSelection].getSrcToDestPath(this.state.sourceSelection, i);\n          const isMoveLegal = this.isMoveLegal(srcToDestPath, squares);\n\n          if(isMovePossible && isMoveLegal){\n            let whitePushed=false, blackPushed=false;\n            if(squares[i] !== null){\n              if(squares[i].player === 1){\n                whiteFallenSoldiers.push(squares[i]);     \n                whitePushed=true;         \n              }else{\n                blackFallenSoldiers.push(squares[i]);\n                blackPushed=true;\n              }\n            }\n\n            let check=false;\n            if (this.state.kingStatus===\"Check.\")\n              check=true;\n\n            var kingStatus = 0;\n            const saveSquare = squares[i];\n            squares[i] = squares[this.state.sourceSelection];\n            squares[this.state.sourceSelection] = null;\n            let player = this.state.player === 1? 2: 1;\n            let turn = this.state.turn === 'white'? 'black' : 'white';\n            this.setState({\n              sourceSelection: -1,\n              squares: squares,\n              whiteFallenSoldiers: whiteFallenSoldiers,\n              blackFallenSoldiers: blackFallenSoldiers,\n              myTurn: !this.state.myTurn,\n              player: player,\n              status: '',\n              kingStatus: '',\n              turn: turn,\n              type: turn,\n              changePawn: -1\n            });\n\n            let moveOn=true;\n            if (check){\n              for (let j=0; j<squares.length; j++){\n                if (squares[j] && squares[j].constructor.name===\"King\" && squares[j].player===this.state.player){//find the king\n                  for (let k=0; k<squares.length; k++){\n                    if (squares[k] && squares[k].player!==this.state.player){\n                      const checkSrcToDestPath = squares[k].getSrcToDestPath(k, j);\n                      if (squares[k].isMovePossible(k, j, isDestEnemyOccupied) && this.isMoveLegal(checkSrcToDestPath, squares)){//find if enemy threatens the king\n                        squares[this.state.sourceSelection] = squares[i];\n                        squares[i]=saveSquare;\n                        player = this.state.player === 1? 1: 2;\n                        turn = this.state.turn === 'white'? 'white' : 'black';\n                        if (whitePushed)\n                          whiteFallenSoldiers.pop();\n                        else if(blackPushed)\n                          blackFallenSoldiers.pop();\n                        this.setState({\n                          squares: squares,\n                          whiteFallenSoldiers: whiteFallenSoldiers,\n                          blackFallenSoldiers: blackFallenSoldiers,\n                          player: player,\n                          myTurn: this.state.myTurn,\n                          kingStatus: \"Check.\",\n                          status: 'Wrong selection. You need to avoid check.',\n                          turn: turn,\n                          type: turn\n                        });\n                        kingStatus=-1;\n                        moveOn=false;\n                        break;\n                      }\n                    }\n                  }\n                  break;\n                }\n              }\n            }else{\n              for (let j=0; j<squares.length; j++){\n                if (squares[j] && squares[j].constructor.name===\"King\" && squares[j].player===this.state.player){//find the king\n                  for (let k=0; k<squares.length; k++){\n                    if (squares[k] && squares[k].player!==this.state.player){\n                      const checkSrcToDestPath = squares[k].getSrcToDestPath(k, j);\n                      if (squares[k].isMovePossible(k, j, isDestEnemyOccupied) && this.isMoveLegal(checkSrcToDestPath, squares)){//find if enemy threatens the king\n                        squares[this.state.sourceSelection] = squares[i];\n                        squares[i]=saveSquare;\n                        player = this.state.player === 1? 1: 2;\n                        turn = this.state.turn === 'white'? 'white' : 'black';\n                        if (whitePushed)\n                          whiteFallenSoldiers.pop();\n                        else if(blackPushed)\n                          blackFallenSoldiers.pop();\n                        this.setState({\n                          squares: squares,\n                          whiteFallenSoldiers: whiteFallenSoldiers,\n                          blackFallenSoldiers: blackFallenSoldiers,\n                          myTurn: this.state.myTurn,\n                          player: player,\n                          kingStatus: '',\n                          status: 'Wrong selection. You cannot go to check.',\n                          turn: turn,\n                          type: turn\n                        });\n                        kingStatus=-1;\n                        moveOn=false;\n                        break;\n                      }\n                    }\n                  }\n                  break;\n                }\n              }\n            }\n\n            if (moveOn){\n              //code for check and checkmate\n              for (let j=0; j<squares.length; j++){\n                if (squares[j] && squares[j].constructor.name===\"King\" && squares[j].player!==this.state.player){//find the king\n                  for (let k=0; k<squares.length; k++){\n                    if (squares[k] && squares[k].player===this.state.player){\n                      const srcToDestPath = squares[k].getSrcToDestPath(k, j);\n                      if (squares[k].isMovePossible(k, j, isDestEnemyOccupied) && this.isMoveLegal(srcToDestPath, squares)){//find if enemy threatens the king\n                        let itisCheck=false;\n                        srcToDestPath[srcToDestPath.length]=k;\n\n                        for (let l=0; l<squares.length; l++){\n                          if (squares[l] && squares[l].player!==this.state.player){\n                            for (let m=0; m<srcToDestPath.length; m++){\n                              if (squares[l].isMovePossible(l, srcToDestPath[m], isDestEnemyOccupied) && this.isMoveLegal(squares[l].getSrcToDestPath(l, srcToDestPath[m]), squares) \n                                && squares[l].constructor.name!==\"King\"){\n                                itisCheck=true;\n                                break;\n                              }\n                            }\n                          }\n                        }\n\n                        if (itisCheck===true){//find king's possible moves and check if they avoid checkmate\n                          let countMoves = 0;\n\n                          if ((!squares[j-1] || j-1===k) && j-1>=0){\n                            for (let l=0; l<squares.length; l++){\n                              if (squares[l] && squares[l].player===this.state.player && l!==k){\n                                const isDestEnemyOccupied = squares[l]? true : false; \n                                if (squares[l].isMovePossible(l, j-1, isDestEnemyOccupied) && this.isMoveLegal(squares[l].getSrcToDestPath(l, j-1), squares)){\n                                  countMoves++;\n                                  break;\n                                }\n                              }\n                            }\n                          }else\n                            countMoves++;\n            \n                          if ((!squares[j+1] || (j+1)===k) && j+1<64){\n                            for (let l=0; l<squares.length; l++){\n                              if (squares[l] && squares[l].player===this.state.player && l!==k){\n                                const isDestEnemyOccupied = squares[l]? true : false;\n                                  if (squares[l].isMovePossible(l, j+1, isDestEnemyOccupied) && this.isMoveLegal(squares[l].getSrcToDestPath(l, j+1), squares)){\n                                    countMoves++;\n                                    break;\n                                  }\n                                }\n                              }\n                            }else\n                              countMoves++;\n\n                          if ((!squares[j-7] || (j-7)===k) && j-7>=0){\n                            for (let l=0; l<squares.length; l++){\n                              if (squares[l] && squares[l].player===this.state.player && l!==k){\n                                const isDestEnemyOccupied = squares[l]? true : false;\n                                if (squares[l].isMovePossible(l, j-7, isDestEnemyOccupied) && this.isMoveLegal(squares[l].getSrcToDestPath(l, j-7), squares)){\n                                  countMoves++;\n                                  break;\n                                }\n                              }\n                            }\n                          }else\n                            countMoves++;\n\n                          if ((!squares[j+7] || (j+7)===k) && j+7<64){\n                            for (let l=0; l<squares.length; l++){\n                              if (squares[l] && squares[l].player===this.state.player && l!==k){\n                                const isDestEnemyOccupied = squares[l]? true : false;\n                                if (squares[l].isMovePossible(l, j+7, isDestEnemyOccupied) && this.isMoveLegal(squares[l].getSrcToDestPath(l, j+7), squares)){\n                                  countMoves++;\n                                  break;\n                                }\n                              }\n                            }\n                          }else\n                            countMoves++;\n\n                          if ((!squares[j-8] || (j-8)===k) && j-8>=0){\n                            for (let l=0; l<squares.length; l++){\n                              if (squares[l] && squares[l].player===this.state.player && l!==k){\n                                const isDestEnemyOccupied = squares[l]? true : false;\n                                if (squares[l].isMovePossible(l, j-8, isDestEnemyOccupied) && this.isMoveLegal(squares[l].getSrcToDestPath(l, j-8), squares)){\n                                  countMoves++;\n                                  break;\n                                }\n                              }\n                            }\n                          }else\n                            countMoves++;\n\n                          if ((!squares[j+8] || (j+8)===k) && j+8<64){\n                            for (let l=0; l<squares.length; l++){\n                              if (squares[l] && squares[l].player===this.state.player && l!==k){\n                                const isDestEnemyOccupied = squares[l]? true : false;\n                                if (squares[l].isMovePossible(l, j+8, isDestEnemyOccupied) && this.isMoveLegal(squares[l].getSrcToDestPath(l, j+8), squares)){\n                                  countMoves++;\n                                  break;\n                                }\n                              }\n                            }\n                          }else\n                            countMoves++;\n\n                          if ((!squares[j-9] || (j-9)===k) && j-9>=0){\n                            for (let l=0; l<squares.length; l++){\n                              if (squares[l] && squares[l].player===this.state.player && l!==k){\n                                const isDestEnemyOccupied = squares[l]? true : false;\n                                if (squares[l].isMovePossible(l, j-9, isDestEnemyOccupied) && this.isMoveLegal(squares[l].getSrcToDestPath(l, j-9), squares)){\n                                  countMoves++;\n                                  break;\n                                }\n                              }\n                            }\n                          }else\n                            countMoves++;\n\n                          if ((!squares[j+9] || (j+9)===k) && j+9<64){\n                            for (let l=0; l<squares.length; l++){\n                              if (squares[l] && squares[l].player===this.state.player && l!==k){\n                                const isDestEnemyOccupied = squares[l]? true : false;\n                                if (squares[l].isMovePossible(l, j+9, isDestEnemyOccupied) && this.isMoveLegal(squares[l].getSrcToDestPath(l, j+9), squares)){\n                                  countMoves++;\n                                  break;\n                                }\n                              }\n                            }\n                          }else\n                            countMoves++;\n\n                          if (countMoves===8)\n                            itisCheck=false;\n                        }\n                                              \n                        if (itisCheck===true){\n                          this.setState({kingStatus: \"Check.\"});\n                          kingStatus=1;\n                        }else{\n                          this.setState({kingStatus: \"Checkmate.\"});\n                          kingStatus=2;\n                        }\n\n                        break;\n                      }\n                    }\n                  }\n                  break;\n                }\n              } \n\n              //code for stalemate\n              let blackPieces=0, whitePieces=0; \n              for (let j=0; j<squares.length; j++){\n                if (squares[j]){\n                  if (squares[j].player===1)\n                    whitePieces++;\n                  else\n                    blackPieces++;\n                }\n              }\n\n              if (blackPieces===1 && whitePieces===1){\n                this.setState({kingStatus: \"Stalemate.\"});\n                kingStatus=3;\n              }else if ((blackPieces===1 && this.state.player===1) || (whitePieces===1 && this.state.player===2)){\n                for (let j=0; j<squares.length; j++){\n                  if (squares[j] && squares[j].constructor.name===\"King\" && squares[j].player!==this.state.player){//find the king\n                    let countMoves = 0;\n\n                    if (!squares[j-1] && j-1>0){\n                      for (let l=0; l<squares.length; l++){\n                        if (squares[l] && squares[l].player===this.state.player){\n                          const isDestEnemyOccupied = squares[l]? true : false;\n                          if (squares[l].isMovePossible(l, j-1, isDestEnemyOccupied) && this.isMoveLegal(squares[l].getSrcToDestPath(l, j-1), squares)){\n                            countMoves++;\n                            break;\n                          }\n                        }\n                      }\n                    }else\n                      countMoves++;\n\n                    if (!squares[j+1] && j+1<64){\n                      for (let l=0; l<squares.length; l++){\n                        if (squares[l] && squares[l].player===this.state.player){\n                          const isDestEnemyOccupied = squares[l]? true : false;\n                          if (squares[l].isMovePossible(l, j+1, isDestEnemyOccupied) && this.isMoveLegal(squares[l].getSrcToDestPath(l, j+1), squares)){\n                            countMoves++;\n                            break;\n                          }\n                        }\n                      }\n                    }else\n                      countMoves++;\n\n                    if (!squares[j-7] && j-7>0){\n                      for (let l=0; l<squares.length; l++){\n                        if (squares[l] && squares[l].player===this.state.player){\n                          const isDestEnemyOccupied = squares[l]? true : false;\n                          if (squares[l].isMovePossible(l, j-7, isDestEnemyOccupied) && this.isMoveLegal(squares[l].getSrcToDestPath(l, j-7), squares)){\n                            countMoves++;\n                             break;\n                          }\n                        }\n                      }\n                    }else\n                      countMoves++;\n\n                    if (!squares[j+7] && j+7<64){\n                      for (let l=0; l<squares.length; l++){\n                        if (squares[l] && squares[l].player===this.state.player){\n                          const isDestEnemyOccupied = squares[l]? true : false;\n                          if (squares[l].isMovePossible(l, j+7, isDestEnemyOccupied) && this.isMoveLegal(squares[l].getSrcToDestPath(l, j+7), squares)){\n                            countMoves++;\n                            break;\n                          }\n                        }\n                      }\n                    }else\n                      countMoves++;\n\n                   if (!squares[j-8] && j-8>0){\n                      for (let l=0; l<squares.length; l++){\n                        if (squares[l] && squares[l].player===this.state.player){\n                          const isDestEnemyOccupied = squares[l]? true : false;\n                          if (squares[l].isMovePossible(l, j-8, isDestEnemyOccupied) && this.isMoveLegal(squares[l].getSrcToDestPath(l, j-8), squares)){\n                            countMoves++;\n                            break;\n                          }\n                        }\n                      }\n                    }else\n                      countMoves++;\n                    \n                    if (!squares[j+8] && j+8<64){\n                      for (let l=0; l<squares.length; l++){\n                        if (squares[l] && squares[l].player===this.state.player){\n                          const isDestEnemyOccupied = squares[l]? true : false;\n                          if (squares[l].isMovePossible(l, j+8, isDestEnemyOccupied) && this.isMoveLegal(squares[l].getSrcToDestPath(l, j+8), squares)){\n                            countMoves++;\n                            break;\n                          }\n                        }\n                      }\n                    }else\n                      countMoves++;\n\n                    if (!squares[j-9] && j-9>0){\n                      for (let l=0; l<squares.length; l++){\n                        if (squares[l] && squares[l].player===this.state.player){\n                          const isDestEnemyOccupied = squares[l]? true : false;\n                          if (squares[l].isMovePossible(l, j-9, isDestEnemyOccupied) && this.isMoveLegal(squares[l].getSrcToDestPath(l, j-9), squares)){\n                            countMoves++;\n                            break;\n                          }\n                        }\n                      }\n                    }else\n                      countMoves++;\n\n                    if (!squares[j+9] && j+9<64){\n                      for (let l=0; l<squares.length; l++){\n                        if (squares[l] && squares[l].player===this.state.player){\n                          const isDestEnemyOccupied = squares[l]? true : false;\n                          if (squares[l].isMovePossible(l, j+9, isDestEnemyOccupied) && this.isMoveLegal(squares[l].getSrcToDestPath(l, j+9), squares)){\n                            countMoves++;\n                            break;\n                          }\n                        }\n                      }\n                    }else\n                      countMoves++;\n                    \n                   if (countMoves===8){\n                      this.setState({kingStatus: \"Stalemate.\"});\n                      kingStatus=3;\n                   }\n\n                    break;\n                  }\n                }\n              }\n\n              //code for pawn change\n              if (this.state.player===1){\n                for (let j=0; j<8; j++){\n                  if (squares[j] && squares[j].player===1 && squares[j].constructor.name===\"Pawn\"){\n                    this.setState({changePawn: j});\n                    break;\n                  }\n                }\n              }else{\n                for (let j=56; j<64; j++){\n                  if (squares[j] && squares[j].player===2 && squares[j].constructor.name===\"Pawn\"){\n                    this.setState({changePawn: j});\n                    break;\n                  }\n                }\n              }\n            }\n            if (kingStatus!==-1){\n\n\n              textSquares = this.classesToStrings(squares);\n              textWhiteFallenSoldiers = this.classesToStrings(whiteFallenSoldiers);\n              textBlackFallenSoldiers = this.classesToStrings(blackFallenSoldiers);\n              var message = {\n                roundID : this.state.roundID,\n                board : textSquares,\n                whiteFallenSoldiers: textWhiteFallenSoldiers,\n                blackFallenSoldiers: textBlackFallenSoldiers,\n                kingStatus: '',\n                progress : 0\n              }\n\n              if (kingStatus===2){\n                message = {\n                  roundID : this.state.roundID,\n                  board : textSquares,\n                  kingStatus: 'Checkmate.',\n                  whiteFallenSoldiers: textWhiteFallenSoldiers,\n                  blackFallenSoldiers: textBlackFallenSoldiers,\n                  progress : 1\n                }\n              }else if(kingStatus===3){\n                message = {\n                  roundID : this.state.roundID,\n                  board : textSquares,\n                  kingStatus: 'Stalemate.',\n                  whiteFallenSoldiers: textWhiteFallenSoldiers,\n                  blackFallenSoldiers: textBlackFallenSoldiers,\n                  progress : 2\n                }\n              }else if(kingStatus===1){\n                message = {\n                  roundID : this.state.roundID,\n                  board : textSquares,\n                  whiteFallenSoldiers: textWhiteFallenSoldiers,\n                  blackFallenSoldiers: textBlackFallenSoldiers,\n                  kingStatus: 'Check.',\n                  progress : 0\n                }\n              }\n                        \n              this.state.socket.emit('update', message);\n            }\n          }else{\n            this.setState({\n              status: \"Wrong selection. Choose valid source and destination again.\",\n              sourceSelection: -1,\n            });\n          }\n        }\n      }\n    }\n  }\n  /**\n   * Check all path indices are null. For one steps move of pawn/others or jumping moves of knight array is empty, so  move is legal.\n   * @param  {[type]}  srcToDestPath [array of board indices comprising path between src and dest ]\n   * @return {Boolean}               \n   */ \n  isMoveLegal(srcToDestPath, squares){\n    let isLegal = true;\n    for(let i = 0; i < srcToDestPath.length; i++){\n      if(squares[srcToDestPath[i]] !== null){\n        isLegal = false;\n      }\n    }\n    return isLegal;\n  }\n\n  classesToStrings(squares){\n    console.log(\"squares\")\n    console.log(squares)\n   var textSquares = [];\n    for (let i=0; i<squares.length; i++){\n      if (squares[i]){\n        console.log(squares[i] instanceof Bishop)\n        console.log(i)\n          if (squares[i] instanceof King){\n            if (squares[i].player===1)\n              textSquares.push(\"King 1\");\n            else\n              textSquares.push(\"King 2\");\n          }else if (squares[i] instanceof Pawn){\n            if (squares[i].player===1)\n              textSquares.push(\"Pawn 1\");\n            else\n              textSquares.push(\"Pawn 2\");\n          }else if (squares[i] instanceof Queen){\n            if (squares[i].player===1)\n              textSquares.push(\"Queen 1\");\n            else\n              textSquares.push(\"Queen 2\");\n          }else if (squares[i] instanceof Bishop){\n            if (squares[i].player===1)\n              textSquares.push(\"Bishop 1\");\n            else\n              textSquares.push(\"Bishop 2\");\n          }else if (squares[i] instanceof Knight){\n            if (squares[i].player===1)\n              textSquares.push(\"Knight 1\");\n            else\n              textSquares.push(\"Knight 2\");\n          }else if (squares[i] instanceof Rook){\n            if (squares[i].player===1)\n              textSquares.push(\"Rook 1\");\n            else\n              textSquares.push(\"Rook 2\");\n          }\n      }else{\n        textSquares.push(0);\n      }\n    }\n    console.log(\"textSquares\");\n    console.log(textSquares);\n    return textSquares;\n  }\n\n  // classesToStrings(squares){\n  //   console.log(\"squares\")\n  //   console.log(squares)\n  //  var textSquares = [];\n  //   for (let i=0; i<squares.length; i++){\n  //     if (squares[i]){\n  //       console.log(squares[i] instanceof Bishop)\n  //       console.log(i)\n  //       switch(squares[i].constructor.name){\n  //         case \"King\":\n  //           if (squares[i].player===1)\n  //             textSquares.push(\"King 1\");\n  //           else\n  //             textSquares.push(\"King 2\");\n  //           break;\n  //         case \"Pawn\":\n  //           if (squares[i].player===1)\n  //             textSquares.push(\"Pawn 1\");\n  //           else\n  //             textSquares.push(\"Pawn 2\");\n  //           break;\n  //         case \"Queen\":\n  //           if (squares[i].player===1)\n  //             textSquares.push(\"Queen 1\");\n  //           else\n  //             textSquares.push(\"Queen 2\");\n  //           break;\n  //         case \"Bishop\":\n  //           if (squares[i].player===1)\n  //             textSquares.push(\"Bishop 1\");\n  //           else\n  //             textSquares.push(\"Bishop 2\");\n  //           break;\n  //         case \"Knight\":\n  //           if (squares[i].player===1)\n  //             textSquares.push(\"Knight 1\");\n  //           else\n  //             textSquares.push(\"Knight 2\");\n  //           break;\n  //         case \"Rook\":\n  //           if (squares[i].player===1)\n  //             textSquares.push(\"Rook 1\");\n  //           else\n  //             textSquares.push(\"Rook 2\");\n  //           break;\n  //         default:\n  //           break;\n  //       }\n  //     }else{\n  //       textSquares.push(0);\n  //     }\n  //   }\n  //   console.log(\"textSquares\");\n  //   console.log(textSquares);\n  //   return textSquares;\n  // }\n\n  setBishop(){\n    let newSquares = this.state.squares;\n    if (this.state.player===1){\n      newSquares[this.state.changePawn] = new Bishop(2);\n      this.setState({\n        squares: newSquares,\n        changePawn: -1\n      });\n    }else{\n      newSquares[this.state.changePawn] = new Bishop(1);\n      this.setState({\n        squares: newSquares,\n        changePawn: -1\n      });\n    }\n    var textSquares = this.classesToStrings(this.state.squares);\n    var message = {\n      roundID : this.state.roundID,\n      board: textSquares,\n      dontChange: true\n    }\n    this.state.socket.emit('update', message);\n  }\n\n  setQueen(){\n    let newSquares = this.state.squares;\n    if (this.state.player===1){\n      newSquares[this.state.changePawn] = new Queen(2);\n      this.setState({\n        squares: newSquares,\n        changePawn: -1\n      });\n    }else{\n      newSquares[this.state.changePawn] = new Queen(1);\n      this.setState({\n        squares: newSquares,\n        changePawn: -1\n      });\n    }\n    var textSquares = this.classesToStrings(this.state.squares);\n    var message = {\n      roundID : this.state.roundID,\n      board: textSquares,\n      dontChange: true\n    }\n    this.state.socket.emit('update', message);\n  }\n\n  setKnight(){\n    let newSquares = this.state.squares;\n    if (this.state.player===1){\n      newSquares[this.state.changePawn] = new Knight(2);\n      this.setState({\n        squares: newSquares,\n        changePawn: -1\n      });\n    }else{\n      newSquares[this.state.changePawn] = new Knight(1);\n      this.setState({\n        squares: newSquares,\n        changePawn: -1\n      });\n    }\n    var textSquares = this.classesToStrings(this.state.squares);\n    var message = {\n      roundID : this.state.roundID,\n      board: textSquares,\n      dontChange: true\n    }\n    this.state.socket.emit('update', message);\n  }\n\n  setRook(){\n    let newSquares = this.state.squares;\n    if (this.state.player===1){\n      newSquares[this.state.changePawn] = new Rook(2);\n      this.setState({\n        squares: newSquares,\n        changePawn: -1\n      });\n    }else{\n      newSquares[this.state.changePawn] = new Rook(1);\n      this.setState({\n        squares: newSquares,\n        changePawn: -1\n      });\n    }\n    var textSquares = this.classesToStrings(this.state.squares);\n    var message = {\n      roundID : this.state.roundID,\n      board: textSquares,\n      dontChange: true\n    }\n    this.state.socket.emit('update', message);\n  }\n\n  render() {\n    let showButtons=false;\n    if (this.state.changePawn!==-1)\n      showButtons=true;\n        \n    return (\n      <div>\n        <div className=\"game\">\n          <div className=\"game-board\">\n            <Board \n              squares = {this.state.squares}\n              onClick = {(i) => this.handleClick(i)}\n            />\n          </div>\n          <div className=\"game-info\">\n            <h3>Turn</h3>\n            <div id=\"player-turn-box\" style={{backgroundColor: this.state.turn}}>\n  \n            </div>\n            <div className=\"game-status\">{this.state.kingStatus}</div>\n            <div className=\"game-status\">{this.state.status}</div>\n\n            <div className=\"fallen-soldier-block\">\n              \n              {<FallenSoldierBlock\n              whiteFallenSoldiers = {this.state.whiteFallenSoldiers}\n              blackFallenSoldiers = {this.state.blackFallenSoldiers}\n              />\n            }\n            </div>\n            {showButtons\n              ? <div> <button onClick = {this.setBishop}> Bishop </button> \n                      <button onClick = {this.setQueen}> Queen </button> \n                      <button onClick = {this.setKnight}> Knight </button> \n                      <button onClick = {this.setRook}> Rook </button> \n                </div>\n              : <div> </div>\n            }\n          </div>\n        </div>\n      </div>\n    );\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport Game from './components/game.js'\n\n\nReactDOM.render(\n  <Game />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}