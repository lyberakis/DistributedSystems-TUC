{"ast":null,"code":"import openSocket from'socket.io-client';import Bishop from'../pieces/bishop.js';import Knight from'../pieces/knight.js';import Queen from'../pieces/queen.js';import Rook from'../pieces/rook.js';import King from'../pieces/king.js';import Pawn from'../pieces/pawn.js';// ==========================================\n// ==> Variables in state <==\n//==> host: The domain of the host (localhost)\n//==> gamemaster: the port of gamemaster for client requests\n//==> token: the unique token of the user issued from the Authorization Service\n//==> socket: the socket objet of the client connected to the server\n//==> type: the symbol of the user (X,O or white, black)\n//==> roundID: the ID of the game\n//==> connectionStatus: Connection Status\n// -3 => unauthorized user\n// -2 => trying to reconnect\n// -1 => no connection (the client has not connect to the giver Playmaster)\n//  0 => connected\n//  1 => wait opponent to connect\n//  2 => ready to play\n//  3 => the game is completed\n//  4 => winner because opponent left\n//  5 => spectator mode\n// ==========================================\n// ==> Messages from client to playmaster <==\n// 1. Send the new board \n// let message = {\n//   roundID : this.state.roundID,\n//   board : squares\n// }\n// this.state.socket.emit('update', message)\n// 2. Inform the playmaster for the winner, if you are the last to play\n// let message = {\n//   roundID : this.state.roundID,\n//   winner: winnerInfo,  //0 for tie, 1 if you won, -1 if you lost\n// }\n// this.state.socket.emit('endgame', message)\n// ==========================================\n// ===> FOR OTHER GAME CHANGE THE LINE 109 and 133-140\n// ==========================================\nfunction stringsToClasses(squares){var classes=[];if(squares){for(var i=0;i<squares.length;i++){var splitter=squares[i].toString().split(\" \");switch(splitter[0]){case\"King\":classes.push(new King(parseInt(splitter[1])));break;case\"Pawn\":classes.push(new Pawn(parseInt(splitter[1])));break;case\"Queen\":classes.push(new Queen(parseInt(splitter[1])));break;case\"Bishop\":classes.push(new Bishop(parseInt(splitter[1])));break;case\"Knight\":classes.push(new Knight(parseInt(splitter[1])));break;case\"Rook\":classes.push(new Rook(parseInt(splitter[1])));break;default:classes.push(null);}}}return classes;}//Get argument from the URL\nexport function getArgumenets(){var url_string=window.location['href'];var url=new URL(url_string);var host=url.hostname;var playmanster=url.searchParams.get(\"pm\");var gamemaster=url.searchParams.get(\"gm\");var token=url.searchParams.get(\"token\");var args={'host':host,'token':token,'playmanster':playmanster,'gamemaster':gamemaster};return args;}//Connect to Playmaster\nexport function connect(server,token){var handShake={query:'token='+token};var socket=openSocket(server,handShake);var response={'socket':socket,'connectionStatus':socket['connected']?0:-1};return response;}export function setListeners(obj){//You connected first, wait for the opponent to connect\nobj.state.socket.on('wait',function(message){obj.setState({connectionStatus:1,roundID:message['roundID']});});//Both players are connected. The game can begin\nobj.state.socket.on('init',function(message){//Check if the game is new or it is continued from server fault.\nif(obj.state.type===null){obj.setState({connectionStatus:2,myTurn:message['turn'],roundID:message['roundID']});}else{obj.setState({connectionStatus:2,roundID:message['roundID']//get the new round ID\n});}});//Both players are connected. The game can begin\nobj.state.socket.on('viewer',function(board){console.log('VIWER');var classes=stringsToClasses(board);obj.setState({connectionStatus:5,squares:classes,myTurn:false});});//Receive the updated board\nobj.state.socket.on('board',function(board){var classes=stringsToClasses(board[\"board\"]);var whiteFallenSoldiers=stringsToClasses(board[\"whiteFallenSoldiers\"]);var blackFallenSoldiers=stringsToClasses(board[\"blackFallenSoldiers\"]);var turn,player;if(!board['dontChange']){turn=obj.state.turn==='white'?'black':'white';player=obj.state.player===1?2:1;}else{turn=obj.state.turn;player=obj.state.player;}obj.setState({// squares: classes,\nturn:turn,whiteFallenSoldiers:whiteFallenSoldiers,blackFallenSoldiers:blackFallenSoldiers,status:board['status'],kingStatus:board['kingStatus'],player:player,myTurn:true});//Set Game progress\nif(board['progress']!==0){obj.setState({connectionStatus:3});}});//Handler for server disconnection\nobj.state.socket.on('disconnect',function(board){//if you never connected or the game is completed, return\nif(obj.state.connectionStatus<0||obj.state.connectionStatus>2){return;}obj.state.socket.disconnect();obj.setState({connectionStatus:4});//Create a request to GameMaster\nvar xhr=new XMLHttpRequest();xhr.onload=function(e){if(xhr.readyState===4){//Check if the GameMaster accepted the request\nif(xhr.connectionStatus===200){var respone=JSON.parse(xhr.responseText);obj.reconnect(respone['playmaster']);}else if(xhr.connectionStatus===403){obj.setState({connectionStatus:-3});}}};var game='chess';var master=obj.state.host+':'+obj.state.gamemaster;var url='http://'+master+'?'+'token='+obj.state.token+'&game='+game;xhr.open('GET',url);xhr.send();});//The game is over from the server's side\nobj.state.socket.on('endgame',function(message){obj.setState({connectionStatus:4});obj.state.socket.disconnect();});}//Establish a new connections\nexport function reconnect(obj,port){console.log('reconnecting...');var playmaster=this.state.host+':'+port;var token=this.state.token;var data=connect(playmaster,token);obj.setState({socket:data['socket'],connectionStatus:data['connectionStatus']});console.log(data['socket']);obj.setListeners();}","map":{"version":3,"sources":["/home/panagiotis/Desktop/ds_project/containers/Website/public_html/games/chess/src/components/multiplayer.js"],"names":["openSocket","Bishop","Knight","Queen","Rook","King","Pawn","stringsToClasses","squares","classes","i","length","splitter","toString","split","push","parseInt","getArgumenets","url_string","window","location","url","URL","host","hostname","playmanster","searchParams","get","gamemaster","token","args","connect","server","handShake","query","socket","response","setListeners","obj","state","on","message","setState","connectionStatus","roundID","type","myTurn","board","console","log","whiteFallenSoldiers","blackFallenSoldiers","turn","player","status","kingStatus","disconnect","xhr","XMLHttpRequest","onload","e","readyState","respone","JSON","parse","responseText","reconnect","game","master","open","send","port","playmaster","data"],"mappings":"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","sourcesContent":["import openSocket from 'socket.io-client';\nimport Bishop from '../pieces/bishop.js';\nimport Knight from '../pieces/knight.js';\nimport Queen from '../pieces/queen.js';\nimport Rook from '../pieces/rook.js';\nimport King from '../pieces/king.js';\nimport Pawn from '../pieces/pawn.js';\n// ==========================================\n// ==> Variables in state <==\n\n//==> host: The domain of the host (localhost)\n//==> gamemaster: the port of gamemaster for client requests\n//==> token: the unique token of the user issued from the Authorization Service\n//==> socket: the socket objet of the client connected to the server\n//==> type: the symbol of the user (X,O or white, black)\n//==> roundID: the ID of the game\n\n//==> connectionStatus: Connection Status\n  // -3 => unauthorized user\n  // -2 => trying to reconnect\n  // -1 => no connection (the client has not connect to the giver Playmaster)\n  //  0 => connected\n  //  1 => wait opponent to connect\n  //  2 => ready to play\n  //  3 => the game is completed\n  //  4 => winner because opponent left\n  //  5 => spectator mode\n\n\n// ==========================================\n// ==> Messages from client to playmaster <==\n\n// 1. Send the new board \n\n// let message = {\n//   roundID : this.state.roundID,\n//   board : squares\n// }\n// this.state.socket.emit('update', message)\n\n\n// 2. Inform the playmaster for the winner, if you are the last to play\n\n// let message = {\n//   roundID : this.state.roundID,\n//   winner: winnerInfo,  //0 for tie, 1 if you won, -1 if you lost\n// }\n// this.state.socket.emit('endgame', message)\n\n// ==========================================\n\n// ===> FOR OTHER GAME CHANGE THE LINE 109 and 133-140\n// ==========================================\n\nfunction stringsToClasses(squares){\n  var classes = [];\n\n  if (squares){\n    for (let i=0; i<squares.length; i++){\n      let splitter = squares[i].toString().split(\" \");\n\n      switch(splitter[0]){\n        case \"King\":\n          classes.push(new King(parseInt(splitter[1])));\n          break;\n        case \"Pawn\":\n          classes.push(new Pawn(parseInt(splitter[1])));\n          break;\n        case \"Queen\":\n          classes.push(new Queen(parseInt(splitter[1])));\n          break;\n        case \"Bishop\":\n          classes.push(new Bishop(parseInt(splitter[1])));\n          break;\n        case \"Knight\":\n          classes.push(new Knight(parseInt(splitter[1])));\n          break;\n        case \"Rook\":\n          classes.push(new Rook(parseInt(splitter[1])));\n          break;\n        default:\n          classes.push(null);\n      }\n    }\n  }\n  \n  return classes;\n}\n\n//Get argument from the URL\nexport function getArgumenets() {\n\tlet url_string = window.location['href'];\n  \tlet url = new URL(url_string);\n\n  \tlet host = url.hostname;\n  \tlet playmanster = url.searchParams.get(\"pm\");\n  \tlet gamemaster = url.searchParams.get(\"gm\");\n  \tlet token = url.searchParams.get(\"token\");\n\n  \tlet args = {\n  \t\t'host': host,\n  \t\t'token': token,\n  \t\t'playmanster' : playmanster,\n  \t\t'gamemaster' : gamemaster,\n  \t};\n\n  \treturn args;\n}\n\n\n//Connect to Playmaster\nexport function connect(server, token){\n\n    let handShake = {\n    \tquery:'token='+token\n    }\n\n    let socket = openSocket(server, handShake)\n\n    let response = {\n    \t'socket': socket,\n    \t'connectionStatus': socket['connected'] ? 0 : -1,\n    }\n\n    return response;\n}\n\n\nexport function setListeners(obj){\n\n  //You connected first, wait for the opponent to connect\n  obj.state.socket.on('wait', message => {\n    obj.setState({\n        connectionStatus: 1,\n        roundID: message['roundID'],\n      })\n  });\n\n\n\n  //Both players are connected. The game can begin\n  obj.state.socket.on('init', message => {\n\n    //Check if the game is new or it is continued from server fault.\n    if (obj.state.type === null){\n      obj.setState({\n        connectionStatus: 2,\n        myTurn: message['turn'],\n        roundID: message['roundID']\n      })\n    }else{\n      obj.setState({\n        connectionStatus: 2,\n        roundID: message['roundID']   //get the new round ID\n      })\n    }\n  });\n\n  //Both players are connected. The game can begin\n  obj.state.socket.on('viewer', board => {\n    console.log('VIWER')\n    var classes = stringsToClasses(board);\n    \n    obj.setState({\n      connectionStatus: 5,\n      squares: classes,\n      myTurn: false\n    })\n  });\n\n\n  //Receive the updated board\n  obj.state.socket.on('board', board => {\n    var classes = stringsToClasses(board[\"board\"]);\n    var whiteFallenSoldiers = stringsToClasses(board[\"whiteFallenSoldiers\"]);\n    var blackFallenSoldiers = stringsToClasses(board[\"blackFallenSoldiers\"]);\n    var turn, player;\n    if (!board['dontChange']){\n      turn = obj.state.turn === 'white'? 'black' : 'white';\n      player = obj.state.player === 1? 2: 1;\n    }else{\n      turn = obj.state.turn;\n      player = obj.state.player;\n    }\n\n      obj.setState({\n        // squares: classes,\n        turn: turn,\n        whiteFallenSoldiers: whiteFallenSoldiers,\n        blackFallenSoldiers: blackFallenSoldiers,\n        status: board['status'],\n        kingStatus: board['kingStatus'],\n        player: player,\n        myTurn: true,\n      })\n\n      //Set Game progress\n      if (board['progress']!==0) {\n        obj.setState({\n          connectionStatus: 3,\n        })\n      }\n  }); \n\n\n  //Handler for server disconnection\n  obj.state.socket.on('disconnect', board => {\n\n      //if you never connected or the game is completed, return\n      if (obj.state.connectionStatus < 0 || obj.state.connectionStatus > 2) {\n        return;\n      }\n\n    obj.state.socket.disconnect()\n\n    obj.setState({\n      connectionStatus: 4,\n    })\n    \n    //Create a request to GameMaster\n    var xhr = new XMLHttpRequest()\n\n    xhr.onload = function (e) {\n\n      if (xhr.readyState === 4) {\n\n        //Check if the GameMaster accepted the request\n        if (xhr.connectionStatus === 200) {  \n          let respone = JSON.parse(xhr.responseText);\n          obj.reconnect(respone['playmaster']);\n        }else if(xhr.connectionStatus === 403){\n          obj.setState({\n            connectionStatus: -3,\n          })\n        }\n      }\n    }\n\n    let game = 'chess';\n    let master = obj.state.host + ':' + obj.state.gamemaster\n    let url = 'http://'+master+'?'+'token='+obj.state.token+'&game='+game;\n\n    xhr.open('GET', url);\n    xhr.send();\n  }); \n\n  //The game is over from the server's side\n  obj.state.socket.on('endgame', message => {\n      obj.setState({\n        connectionStatus: 4,\n      })\n      obj.state.socket.disconnect();\n  }); \n\n}\n\n//Establish a new connections\nexport function reconnect(obj, port){\n  console.log('reconnecting...')\n  let playmaster = this.state.host + ':' + port;\n  let token = this.state.token;\n  var data = connect(playmaster,token)\n\n  obj.setState({\n    socket: data['socket'],\n    connectionStatus: data['connectionStatus'],\n  });\n\n  console.log(data['socket']);\n  obj.setListeners();\n}\n\n"]},"metadata":{},"sourceType":"module"}