{"ast":null,"code":"var _jsxFileName = \"/home/panagiotis/Desktop/ds_project/containers/Website/public_html/games/chess/src/components/game.js\";\nimport React from 'react';\nimport '../index.css';\nimport Board from './board.js';\nimport FallenSoldierBlock from './fallen-soldier-block.js';\nimport initialiseChessBoard from '../helpers/board-initialiser.js';\nimport Bishop from '../pieces/bishop.js';\nimport King from '../pieces/king.js';\nimport Knight from '../pieces/knight.js';\nimport Queen from '../pieces/queen.js';\nimport Pawn from '../pieces/pawn.js';\nimport Rook from '../pieces/rook.js';\nimport * as conn from './multiplayer.js';\nexport default class Game extends React.Component {\n  constructor(props) {\n    super(props);\n    let args = conn.getArgumenets();\n    let data = conn.connect(args['host'] + ':' + args['playmanster'], args['token']);\n    this.state = {\n      squares: initialiseChessBoard(),\n      whiteFallenSoldiers: [],\n      blackFallenSoldiers: [],\n      player: 1,\n      sourceSelection: -1,\n      kingStatus: '',\n      turn: 'white',\n      type: null,\n      myTurn: false,\n      changePawn: -1,\n      host: args['host'],\n      gamemaster: args['gamemaster'],\n      token: args['token'],\n      socket: data['socket'],\n      status: '',\n      connectionStatus: data['connectionStatus'],\n      progress: 0,\n      roundID: null\n    };\n    this.setBishop = this.setBishop.bind(this);\n    this.setQueen = this.setQueen.bind(this);\n    this.setKnight = this.setKnight.bind(this);\n    this.setRook = this.setRook.bind(this);\n    conn.setListeners(this);\n  }\n\n  handleClick(i) {\n    if (this.state.myTurn) {\n      const squares = this.state.squares.slice();\n\n      if (this.state.sourceSelection === -1) {\n        if (!squares[i] || squares[i].player !== this.state.player) {\n          this.setState({\n            status: \"Wrong selection. Choose player \" + this.state.player + \" pieces.\"\n          });\n\n          if (squares[i]) {\n            squares[i].style = { ...squares[i].style,\n              backgroundColor: \"\"\n            };\n          }\n        } else {\n          squares[i].style = { ...squares[i].style,\n            backgroundColor: \"RGB(111,143,114)\"\n          }; // Emerald from http://omgchess.blogspot.com/2015/09/chess-board-color-schemes.html\n\n          this.setState({\n            status: \"Choose destination for the selected piece\",\n            sourceSelection: i\n          });\n        }\n      } else if (this.state.sourceSelection > -1) {\n        squares[this.state.sourceSelection].style = { ...squares[this.state.sourceSelection].style,\n          backgroundColor: \"\"\n        };\n\n        if (squares[i] && squares[i].player === this.state.player && (squares[this.state.sourceSelection].constructor.name === \"King\" || squares[this.state.sourceSelection].constructor.name === \"Rook\") && (squares[i].constructor.name === \"King\" || squares[i].constructor.name === \"Rook\")) {\n          /////////////////castling case\n          let isPossible = true;\n\n          if (squares[i].player === 1) {\n            //check correct position of pieces\n            if (this.state.sourceSelection === 60 && squares[this.state.sourceSelection].constructor.name === \"King\") {\n              if (i !== 63 && i !== 56) isPossible = false;\n            } else if (i === 60 && squares[i].constructor.name === \"King\") {\n              if (this.state.sourceSelection !== 63 && this.state.sourceSelection !== 56) isPossible = false;\n            } else isPossible = false;\n          } else {\n            if (this.state.sourceSelection === 4 && squares[this.state.sourceSelection].constructor.name === \"King\") {\n              if (i !== 0 && i !== 7) isPossible = false;\n            } else if (i === 4 && squares[i].constructor.name === \"King\") {\n              if (this.state.sourceSelection !== 0 && this.state.sourceSelection !== 7) isPossible = false;\n            } else isPossible = false;\n          }\n\n          if (isPossible) {\n            //check that there are no pieces between them\n            if (squares[i].player === 1) {\n              if (i === 63 || this.state.sourceSelection === 63) {\n                if (squares[61] || squares[62]) isPossible = false;\n              } else {\n                if (squares[57] || squares[58] || squares[59]) isPossible = false;\n              }\n            } else {\n              if (i === 7 || this.state.sourceSelection === 7) {\n                if (squares[5] || squares[6]) isPossible = false;\n              } else {\n                if (squares[1] || squares[2] || squares[3]) isPossible = false;\n              }\n            }\n\n            if (isPossible) {\n              //check if king is or passes from check\n              if (squares[i].player === 1) {\n                if (i === 63 || this.state.sourceSelection === 63) {\n                  for (let j = 0; j < squares.length; j++) {\n                    if (squares[j] && squares[j].player !== this.state.player) {\n                      const srcToDestPath1 = squares[j].getSrcToDestPath(j, 60);\n                      const srcToDestPath2 = squares[j].getSrcToDestPath(j, 61);\n                      const srcToDestPath3 = squares[j].getSrcToDestPath(j, 62);\n\n                      if (squares[j].isMovePossible(j, 60, false) && this.isMoveLegal(srcToDestPath1, squares) || squares[j].isMovePossible(j, 61, false) && this.isMoveLegal(srcToDestPath2, squares) || squares[j].isMovePossible(j, 62, false) && this.isMoveLegal(srcToDestPath3, squares)) {\n                        isPossible = false;\n                        break;\n                      }\n                    }\n                  }\n                } else {\n                  for (let j = 0; j < squares.length; j++) {\n                    if (squares[j] && squares[j].player !== this.state.player) {\n                      const srcToDestPath1 = squares[j].getSrcToDestPath(j, 60);\n                      const srcToDestPath2 = squares[j].getSrcToDestPath(j, 59);\n                      const srcToDestPath3 = squares[j].getSrcToDestPath(j, 58);\n\n                      if (squares[j].isMovePossible(j, 60, false) && this.isMoveLegal(srcToDestPath1, squares) || squares[j].isMovePossible(j, 59, false) && this.isMoveLegal(srcToDestPath2, squares) || squares[j].isMovePossible(j, 58, false) && this.isMoveLegal(srcToDestPath3, squares)) {\n                        isPossible = false;\n                        break;\n                      }\n                    }\n                  }\n                }\n              } else {\n                if (i === 7 || this.state.sourceSelection === 7) {\n                  for (let j = 0; j < squares.length; j++) {\n                    if (squares[j] && squares[j].player !== this.state.player) {\n                      const srcToDestPath1 = squares[j].getSrcToDestPath(j, 4);\n                      const srcToDestPath2 = squares[j].getSrcToDestPath(j, 5);\n                      const srcToDestPath3 = squares[j].getSrcToDestPath(j, 6);\n\n                      if (squares[j].isMovePossible(j, 4, false) && this.isMoveLegal(srcToDestPath1, squares) || squares[j].isMovePossible(j, 5, false) && this.isMoveLegal(srcToDestPath2, squares) || squares[j].isMovePossible(j, 6, false) && this.isMoveLegal(srcToDestPath3, squares)) {\n                        isPossible = false;\n                        break;\n                      }\n                    }\n                  }\n                } else {\n                  for (let j = 0; j < squares.length; j++) {\n                    if (squares[j] && squares[j].player !== this.state.player) {\n                      const srcToDestPath1 = squares[j].getSrcToDestPath(j, 4);\n                      const srcToDestPath2 = squares[j].getSrcToDestPath(j, 3);\n                      const srcToDestPath3 = squares[j].getSrcToDestPath(j, 2);\n\n                      if (squares[j].isMovePossible(j, 4, false) && this.isMoveLegal(srcToDestPath1, squares) || squares[j].isMovePossible(j, 3, false) && this.isMoveLegal(srcToDestPath2, squares) || squares[j].isMovePossible(j, 2, false) && this.isMoveLegal(srcToDestPath3, squares)) {\n                        isPossible = false;\n                        break;\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n\n          if (isPossible) {\n            if (squares[i].player === 1) {\n              if (i === 63 || this.state.sourceSelection === 63) {\n                squares[62] = squares[60];\n                squares[61] = squares[63];\n                squares[63] = null;\n              } else {\n                squares[58] = squares[60];\n                squares[59] = squares[56];\n                squares[56] = null;\n              }\n\n              squares[60] = null;\n            } else {\n              if (i === 7 || this.state.sourceSelection === 7) {\n                squares[6] = squares[4];\n                squares[5] = squares[7];\n                squares[7] = null;\n              } else {\n                squares[2] = squares[4];\n                squares[3] = squares[0];\n                squares[0] = null;\n              }\n\n              squares[4] = null;\n            }\n\n            let player = this.state.player === 1 ? 2 : 1;\n            let turn = this.state.turn === 'white' ? 'black' : 'white';\n            this.setState({\n              squares: squares,\n              player: player,\n              turn: turn,\n              type: turn,\n              kingStatus: '',\n              myTurn: !this.state.myTurn,\n              changePawn: -1,\n              status: \"Castling occured.\",\n              sourceSelection: -1\n            });\n            var textSquares = this.classesToStrings(squares);\n            var textWhiteFallenSoldiers = this.classesToStrings(this.state.whiteFallenSoldiers);\n            var textBlackFallenSoldiers = this.classesToStrings(this.state.blackFallenSoldiers);\n            let message = {\n              roundID: this.state.roundID,\n              board: textSquares,\n              whiteFallenSoldiers: textWhiteFallenSoldiers,\n              blackFallenSoldiers: textBlackFallenSoldiers,\n              progress: 0\n            };\n            this.state.socket.emit('update', message);\n          } else {\n            this.setState({\n              status: \"Wrong selection. Castling not allowed.\",\n              sourceSelection: -1\n            });\n          }\n        } else if (squares[i] && squares[i].player === this.state.player) {\n          this.setState({\n            status: \"Wrong selection. Choose valid source and destination again.\",\n            sourceSelection: -1\n          });\n        } else {\n          const whiteFallenSoldiers = this.state.whiteFallenSoldiers.slice();\n          const blackFallenSoldiers = this.state.blackFallenSoldiers.slice();\n          const isDestEnemyOccupied = squares[i] ? true : false;\n          const isMovePossible = squares[this.state.sourceSelection].isMovePossible(this.state.sourceSelection, i, isDestEnemyOccupied);\n          const srcToDestPath = squares[this.state.sourceSelection].getSrcToDestPath(this.state.sourceSelection, i);\n          const isMoveLegal = this.isMoveLegal(srcToDestPath, squares);\n\n          if (isMovePossible && isMoveLegal) {\n            let whitePushed = false,\n                blackPushed = false;\n\n            if (squares[i] !== null) {\n              if (squares[i].player === 1) {\n                whiteFallenSoldiers.push(squares[i]);\n                whitePushed = true;\n              } else {\n                blackFallenSoldiers.push(squares[i]);\n                blackPushed = true;\n              }\n            }\n\n            let check = false;\n            if (this.state.kingStatus === \"Check.\") check = true;\n            var kingStatus = 0;\n            const saveSquare = squares[i];\n            squares[i] = squares[this.state.sourceSelection];\n            squares[this.state.sourceSelection] = null;\n            let player = this.state.player === 1 ? 2 : 1;\n            let turn = this.state.turn === 'white' ? 'black' : 'white';\n            this.setState({\n              sourceSelection: -1,\n              squares: squares,\n              whiteFallenSoldiers: whiteFallenSoldiers,\n              blackFallenSoldiers: blackFallenSoldiers,\n              myTurn: !this.state.myTurn,\n              player: player,\n              status: '',\n              kingStatus: '',\n              turn: turn,\n              type: turn,\n              changePawn: -1\n            });\n            let moveOn = true;\n\n            if (check) {\n              for (let j = 0; j < squares.length; j++) {\n                if (squares[j] && squares[j].constructor.name === \"King\" && squares[j].player === this.state.player) {\n                  //find the king\n                  for (let k = 0; k < squares.length; k++) {\n                    if (squares[k] && squares[k].player !== this.state.player) {\n                      const checkSrcToDestPath = squares[k].getSrcToDestPath(k, j);\n\n                      if (squares[k].isMovePossible(k, j, isDestEnemyOccupied) && this.isMoveLegal(checkSrcToDestPath, squares)) {\n                        //find if enemy threatens the king\n                        squares[this.state.sourceSelection] = squares[i];\n                        squares[i] = saveSquare;\n                        player = this.state.player === 1 ? 1 : 2;\n                        turn = this.state.turn === 'white' ? 'white' : 'black';\n                        if (whitePushed) whiteFallenSoldiers.pop();else if (blackPushed) blackFallenSoldiers.pop();\n                        this.setState({\n                          squares: squares,\n                          whiteFallenSoldiers: whiteFallenSoldiers,\n                          blackFallenSoldiers: blackFallenSoldiers,\n                          player: player,\n                          myTurn: this.state.myTurn,\n                          kingStatus: \"Check.\",\n                          status: 'Wrong selection. You need to avoid check.',\n                          turn: turn,\n                          type: turn\n                        });\n                        kingStatus = -1;\n                        moveOn = false;\n                        break;\n                      }\n                    }\n                  }\n\n                  break;\n                }\n              }\n            } else {\n              for (let j = 0; j < squares.length; j++) {\n                if (squares[j] && squares[j].constructor.name === \"King\" && squares[j].player === this.state.player) {\n                  //find the king\n                  for (let k = 0; k < squares.length; k++) {\n                    if (squares[k] && squares[k].player !== this.state.player) {\n                      const checkSrcToDestPath = squares[k].getSrcToDestPath(k, j);\n\n                      if (squares[k].isMovePossible(k, j, isDestEnemyOccupied) && this.isMoveLegal(checkSrcToDestPath, squares)) {\n                        //find if enemy threatens the king\n                        squares[this.state.sourceSelection] = squares[i];\n                        squares[i] = saveSquare;\n                        player = this.state.player === 1 ? 1 : 2;\n                        turn = this.state.turn === 'white' ? 'white' : 'black';\n                        if (whitePushed) whiteFallenSoldiers.pop();else if (blackPushed) blackFallenSoldiers.pop();\n                        this.setState({\n                          squares: squares,\n                          whiteFallenSoldiers: whiteFallenSoldiers,\n                          blackFallenSoldiers: blackFallenSoldiers,\n                          myTurn: this.state.myTurn,\n                          player: player,\n                          kingStatus: '',\n                          status: 'Wrong selection. You cannot go to check.',\n                          turn: turn,\n                          type: turn\n                        });\n                        kingStatus = -1;\n                        moveOn = false;\n                        break;\n                      }\n                    }\n                  }\n\n                  break;\n                }\n              }\n            }\n\n            if (moveOn) {\n              //code for check and checkmate\n              for (let j = 0; j < squares.length; j++) {\n                if (squares[j] && squares[j].constructor.name === \"King\" && squares[j].player !== this.state.player) {\n                  //find the king\n                  for (let k = 0; k < squares.length; k++) {\n                    if (squares[k] && squares[k].player === this.state.player) {\n                      const srcToDestPath = squares[k].getSrcToDestPath(k, j);\n\n                      if (squares[k].isMovePossible(k, j, isDestEnemyOccupied) && this.isMoveLegal(srcToDestPath, squares)) {\n                        //find if enemy threatens the king\n                        let itisCheck = false;\n                        srcToDestPath[srcToDestPath.length] = k;\n\n                        for (let l = 0; l < squares.length; l++) {\n                          if (squares[l] && squares[l].player !== this.state.player) {\n                            for (let m = 0; m < srcToDestPath.length; m++) {\n                              if (squares[l].isMovePossible(l, srcToDestPath[m], isDestEnemyOccupied) && this.isMoveLegal(squares[l].getSrcToDestPath(l, srcToDestPath[m]), squares) && squares[l].constructor.name !== \"King\") {\n                                itisCheck = true;\n                                break;\n                              }\n                            }\n                          }\n                        }\n\n                        if (itisCheck === true) {\n                          //find king's possible moves and check if they avoid checkmate\n                          let countMoves = 0;\n\n                          if ((!squares[j - 1] || j - 1 === k) && j - 1 >= 0) {\n                            for (let l = 0; l < squares.length; l++) {\n                              if (squares[l] && squares[l].player === this.state.player && l !== k) {\n                                const isDestEnemyOccupied = squares[l] ? true : false;\n\n                                if (squares[l].isMovePossible(l, j - 1, isDestEnemyOccupied) && this.isMoveLegal(squares[l].getSrcToDestPath(l, j - 1), squares)) {\n                                  countMoves++;\n                                  break;\n                                }\n                              }\n                            }\n                          } else countMoves++;\n\n                          if ((!squares[j + 1] || j + 1 === k) && j + 1 < 64) {\n                            for (let l = 0; l < squares.length; l++) {\n                              if (squares[l] && squares[l].player === this.state.player && l !== k) {\n                                const isDestEnemyOccupied = squares[l] ? true : false;\n\n                                if (squares[l].isMovePossible(l, j + 1, isDestEnemyOccupied) && this.isMoveLegal(squares[l].getSrcToDestPath(l, j + 1), squares)) {\n                                  countMoves++;\n                                  break;\n                                }\n                              }\n                            }\n                          } else countMoves++;\n\n                          if ((!squares[j - 7] || j - 7 === k) && j - 7 >= 0) {\n                            for (let l = 0; l < squares.length; l++) {\n                              if (squares[l] && squares[l].player === this.state.player && l !== k) {\n                                const isDestEnemyOccupied = squares[l] ? true : false;\n\n                                if (squares[l].isMovePossible(l, j - 7, isDestEnemyOccupied) && this.isMoveLegal(squares[l].getSrcToDestPath(l, j - 7), squares)) {\n                                  countMoves++;\n                                  break;\n                                }\n                              }\n                            }\n                          } else countMoves++;\n\n                          if ((!squares[j + 7] || j + 7 === k) && j + 7 < 64) {\n                            for (let l = 0; l < squares.length; l++) {\n                              if (squares[l] && squares[l].player === this.state.player && l !== k) {\n                                const isDestEnemyOccupied = squares[l] ? true : false;\n\n                                if (squares[l].isMovePossible(l, j + 7, isDestEnemyOccupied) && this.isMoveLegal(squares[l].getSrcToDestPath(l, j + 7), squares)) {\n                                  countMoves++;\n                                  break;\n                                }\n                              }\n                            }\n                          } else countMoves++;\n\n                          if ((!squares[j - 8] || j - 8 === k) && j - 8 >= 0) {\n                            for (let l = 0; l < squares.length; l++) {\n                              if (squares[l] && squares[l].player === this.state.player && l !== k) {\n                                const isDestEnemyOccupied = squares[l] ? true : false;\n\n                                if (squares[l].isMovePossible(l, j - 8, isDestEnemyOccupied) && this.isMoveLegal(squares[l].getSrcToDestPath(l, j - 8), squares)) {\n                                  countMoves++;\n                                  break;\n                                }\n                              }\n                            }\n                          } else countMoves++;\n\n                          if ((!squares[j + 8] || j + 8 === k) && j + 8 < 64) {\n                            for (let l = 0; l < squares.length; l++) {\n                              if (squares[l] && squares[l].player === this.state.player && l !== k) {\n                                const isDestEnemyOccupied = squares[l] ? true : false;\n\n                                if (squares[l].isMovePossible(l, j + 8, isDestEnemyOccupied) && this.isMoveLegal(squares[l].getSrcToDestPath(l, j + 8), squares)) {\n                                  countMoves++;\n                                  break;\n                                }\n                              }\n                            }\n                          } else countMoves++;\n\n                          if ((!squares[j - 9] || j - 9 === k) && j - 9 >= 0) {\n                            for (let l = 0; l < squares.length; l++) {\n                              if (squares[l] && squares[l].player === this.state.player && l !== k) {\n                                const isDestEnemyOccupied = squares[l] ? true : false;\n\n                                if (squares[l].isMovePossible(l, j - 9, isDestEnemyOccupied) && this.isMoveLegal(squares[l].getSrcToDestPath(l, j - 9), squares)) {\n                                  countMoves++;\n                                  break;\n                                }\n                              }\n                            }\n                          } else countMoves++;\n\n                          if ((!squares[j + 9] || j + 9 === k) && j + 9 < 64) {\n                            for (let l = 0; l < squares.length; l++) {\n                              if (squares[l] && squares[l].player === this.state.player && l !== k) {\n                                const isDestEnemyOccupied = squares[l] ? true : false;\n\n                                if (squares[l].isMovePossible(l, j + 9, isDestEnemyOccupied) && this.isMoveLegal(squares[l].getSrcToDestPath(l, j + 9), squares)) {\n                                  countMoves++;\n                                  break;\n                                }\n                              }\n                            }\n                          } else countMoves++;\n\n                          if (countMoves === 8) itisCheck = false;\n                        }\n\n                        if (itisCheck === true) {\n                          this.setState({\n                            kingStatus: \"Check.\"\n                          });\n                          kingStatus = 1;\n                        } else {\n                          this.setState({\n                            kingStatus: \"Checkmate.\"\n                          });\n                          kingStatus = 2;\n                        }\n\n                        break;\n                      }\n                    }\n                  }\n\n                  break;\n                }\n              } //code for stalemate\n\n\n              let blackPieces = 0,\n                  whitePieces = 0;\n\n              for (let j = 0; j < squares.length; j++) {\n                if (squares[j]) {\n                  if (squares[j].player === 1) whitePieces++;else blackPieces++;\n                }\n              }\n\n              if (blackPieces === 1 && whitePieces === 1) {\n                this.setState({\n                  kingStatus: \"Stalemate.\"\n                });\n                kingStatus = 3;\n              } else if (blackPieces === 1 && this.state.player === 1 || whitePieces === 1 && this.state.player === 2) {\n                for (let j = 0; j < squares.length; j++) {\n                  if (squares[j] && squares[j].constructor.name === \"King\" && squares[j].player !== this.state.player) {\n                    //find the king\n                    let countMoves = 0;\n\n                    if (!squares[j - 1] && j - 1 > 0) {\n                      for (let l = 0; l < squares.length; l++) {\n                        if (squares[l] && squares[l].player === this.state.player) {\n                          const isDestEnemyOccupied = squares[l] ? true : false;\n\n                          if (squares[l].isMovePossible(l, j - 1, isDestEnemyOccupied) && this.isMoveLegal(squares[l].getSrcToDestPath(l, j - 1), squares)) {\n                            countMoves++;\n                            break;\n                          }\n                        }\n                      }\n                    } else countMoves++;\n\n                    if (!squares[j + 1] && j + 1 < 64) {\n                      for (let l = 0; l < squares.length; l++) {\n                        if (squares[l] && squares[l].player === this.state.player) {\n                          const isDestEnemyOccupied = squares[l] ? true : false;\n\n                          if (squares[l].isMovePossible(l, j + 1, isDestEnemyOccupied) && this.isMoveLegal(squares[l].getSrcToDestPath(l, j + 1), squares)) {\n                            countMoves++;\n                            break;\n                          }\n                        }\n                      }\n                    } else countMoves++;\n\n                    if (!squares[j - 7] && j - 7 > 0) {\n                      for (let l = 0; l < squares.length; l++) {\n                        if (squares[l] && squares[l].player === this.state.player) {\n                          const isDestEnemyOccupied = squares[l] ? true : false;\n\n                          if (squares[l].isMovePossible(l, j - 7, isDestEnemyOccupied) && this.isMoveLegal(squares[l].getSrcToDestPath(l, j - 7), squares)) {\n                            countMoves++;\n                            break;\n                          }\n                        }\n                      }\n                    } else countMoves++;\n\n                    if (!squares[j + 7] && j + 7 < 64) {\n                      for (let l = 0; l < squares.length; l++) {\n                        if (squares[l] && squares[l].player === this.state.player) {\n                          const isDestEnemyOccupied = squares[l] ? true : false;\n\n                          if (squares[l].isMovePossible(l, j + 7, isDestEnemyOccupied) && this.isMoveLegal(squares[l].getSrcToDestPath(l, j + 7), squares)) {\n                            countMoves++;\n                            break;\n                          }\n                        }\n                      }\n                    } else countMoves++;\n\n                    if (!squares[j - 8] && j - 8 > 0) {\n                      for (let l = 0; l < squares.length; l++) {\n                        if (squares[l] && squares[l].player === this.state.player) {\n                          const isDestEnemyOccupied = squares[l] ? true : false;\n\n                          if (squares[l].isMovePossible(l, j - 8, isDestEnemyOccupied) && this.isMoveLegal(squares[l].getSrcToDestPath(l, j - 8), squares)) {\n                            countMoves++;\n                            break;\n                          }\n                        }\n                      }\n                    } else countMoves++;\n\n                    if (!squares[j + 8] && j + 8 < 64) {\n                      for (let l = 0; l < squares.length; l++) {\n                        if (squares[l] && squares[l].player === this.state.player) {\n                          const isDestEnemyOccupied = squares[l] ? true : false;\n\n                          if (squares[l].isMovePossible(l, j + 8, isDestEnemyOccupied) && this.isMoveLegal(squares[l].getSrcToDestPath(l, j + 8), squares)) {\n                            countMoves++;\n                            break;\n                          }\n                        }\n                      }\n                    } else countMoves++;\n\n                    if (!squares[j - 9] && j - 9 > 0) {\n                      for (let l = 0; l < squares.length; l++) {\n                        if (squares[l] && squares[l].player === this.state.player) {\n                          const isDestEnemyOccupied = squares[l] ? true : false;\n\n                          if (squares[l].isMovePossible(l, j - 9, isDestEnemyOccupied) && this.isMoveLegal(squares[l].getSrcToDestPath(l, j - 9), squares)) {\n                            countMoves++;\n                            break;\n                          }\n                        }\n                      }\n                    } else countMoves++;\n\n                    if (!squares[j + 9] && j + 9 < 64) {\n                      for (let l = 0; l < squares.length; l++) {\n                        if (squares[l] && squares[l].player === this.state.player) {\n                          const isDestEnemyOccupied = squares[l] ? true : false;\n\n                          if (squares[l].isMovePossible(l, j + 9, isDestEnemyOccupied) && this.isMoveLegal(squares[l].getSrcToDestPath(l, j + 9), squares)) {\n                            countMoves++;\n                            break;\n                          }\n                        }\n                      }\n                    } else countMoves++;\n\n                    if (countMoves === 8) {\n                      this.setState({\n                        kingStatus: \"Stalemate.\"\n                      });\n                      kingStatus = 3;\n                    }\n\n                    break;\n                  }\n                }\n              } //code for pawn change\n\n\n              if (this.state.player === 1) {\n                for (let j = 0; j < 8; j++) {\n                  if (squares[j] && squares[j].player === 1 && squares[j].constructor.name === \"Pawn\") {\n                    this.setState({\n                      changePawn: j\n                    });\n                    break;\n                  }\n                }\n              } else {\n                for (let j = 56; j < 64; j++) {\n                  if (squares[j] && squares[j].player === 2 && squares[j].constructor.name === \"Pawn\") {\n                    this.setState({\n                      changePawn: j\n                    });\n                    break;\n                  }\n                }\n              }\n            }\n\n            if (kingStatus !== -1) {\n              textSquares = this.classesToStrings(squares);\n              textWhiteFallenSoldiers = this.classesToStrings(whiteFallenSoldiers);\n              textBlackFallenSoldiers = this.classesToStrings(blackFallenSoldiers);\n              var message = {\n                roundID: this.state.roundID,\n                board: textSquares,\n                whiteFallenSoldiers: textWhiteFallenSoldiers,\n                blackFallenSoldiers: textBlackFallenSoldiers,\n                kingStatus: '',\n                progress: 0\n              };\n\n              if (kingStatus === 2) {\n                message = {\n                  roundID: this.state.roundID,\n                  board: textSquares,\n                  kingStatus: 'Checkmate.',\n                  whiteFallenSoldiers: textWhiteFallenSoldiers,\n                  blackFallenSoldiers: textBlackFallenSoldiers,\n                  progress: 1\n                };\n              } else if (kingStatus === 3) {\n                message = {\n                  roundID: this.state.roundID,\n                  board: textSquares,\n                  kingStatus: 'Stalemate.',\n                  whiteFallenSoldiers: textWhiteFallenSoldiers,\n                  blackFallenSoldiers: textBlackFallenSoldiers,\n                  progress: 2\n                };\n              } else if (kingStatus === 1) {\n                message = {\n                  roundID: this.state.roundID,\n                  board: textSquares,\n                  whiteFallenSoldiers: textWhiteFallenSoldiers,\n                  blackFallenSoldiers: textBlackFallenSoldiers,\n                  kingStatus: 'Check.',\n                  progress: 0\n                };\n              }\n\n              this.state.socket.emit('update', message);\n            }\n          } else {\n            this.setState({\n              status: \"Wrong selection. Choose valid source and destination again.\",\n              sourceSelection: -1\n            });\n          }\n        }\n      }\n    }\n  }\n  /**\n   * Check all path indices are null. For one steps move of pawn/others or jumping moves of knight array is empty, so  move is legal.\n   * @param  {[type]}  srcToDestPath [array of board indices comprising path between src and dest ]\n   * @return {Boolean}               \n   */\n\n\n  isMoveLegal(srcToDestPath, squares) {\n    let isLegal = true;\n\n    for (let i = 0; i < srcToDestPath.length; i++) {\n      if (squares[srcToDestPath[i]] !== null) {\n        isLegal = false;\n      }\n    }\n\n    return isLegal;\n  }\n\n  classesToStrings(squares) {\n    console.log(\"squares\");\n    console.log(squares);\n    var textSquares = [];\n\n    for (let i = 0; i < squares.length; i++) {\n      if (squares[i]) {\n        if (squares[i] instanceof King) {\n          if (squares[i].player === 1) textSquares.push(\"King 1\");else textSquares.push(\"King 2\");\n        } else if (squares[i] instanceof Pawn) {\n          if (squares[i].player === 1) textSquares.push(\"Pawn 1\");else textSquares.push(\"Pawn 2\");\n        } else if (squares[i] instanceof Queen) {\n          if (squares[i].player === 1) textSquares.push(\"Queen 1\");else textSquares.push(\"Queen 2\");\n        } else if (squares[i] instanceof Bishop) {\n          if (squares[i].player === 1) textSquares.push(\"Bishop 1\");else textSquares.push(\"Bishop 2\");\n        } else if (squares[i] instanceof Knight) {\n          if (squares[i].player === 1) textSquares.push(\"Knight 1\");else textSquares.push(\"Knight 2\");\n        } else if (squares[i] instanceof Rook) {\n          if (squares[i].player === 1) textSquares.push(\"Rook 1\");else textSquares.push(\"Rook 2\");\n        }\n      } else {\n        textSquares.push(0);\n      }\n    }\n\n    console.log(\"textSquares\");\n    console.log(textSquares);\n    return textSquares;\n  } // classesToStrings(squares){\n  //   console.log(\"squares\")\n  //   console.log(squares)\n  //  var textSquares = [];\n  //   for (let i=0; i<squares.length; i++){\n  //     if (squares[i]){\n  //       console.log(squares[i] instanceof Bishop)\n  //       console.log(i)\n  //       switch(squares[i].constructor.name){\n  //         case \"King\":\n  //           if (squares[i].player===1)\n  //             textSquares.push(\"King 1\");\n  //           else\n  //             textSquares.push(\"King 2\");\n  //           break;\n  //         case \"Pawn\":\n  //           if (squares[i].player===1)\n  //             textSquares.push(\"Pawn 1\");\n  //           else\n  //             textSquares.push(\"Pawn 2\");\n  //           break;\n  //         case \"Queen\":\n  //           if (squares[i].player===1)\n  //             textSquares.push(\"Queen 1\");\n  //           else\n  //             textSquares.push(\"Queen 2\");\n  //           break;\n  //         case \"Bishop\":\n  //           if (squares[i].player===1)\n  //             textSquares.push(\"Bishop 1\");\n  //           else\n  //             textSquares.push(\"Bishop 2\");\n  //           break;\n  //         case \"Knight\":\n  //           if (squares[i].player===1)\n  //             textSquares.push(\"Knight 1\");\n  //           else\n  //             textSquares.push(\"Knight 2\");\n  //           break;\n  //         case \"Rook\":\n  //           if (squares[i].player===1)\n  //             textSquares.push(\"Rook 1\");\n  //           else\n  //             textSquares.push(\"Rook 2\");\n  //           break;\n  //         default:\n  //           break;\n  //       }\n  //     }else{\n  //       textSquares.push(0);\n  //     }\n  //   }\n  //   console.log(\"textSquares\");\n  //   console.log(textSquares);\n  //   return textSquares;\n  // }\n\n\n  setBishop() {\n    let newSquares = this.state.squares;\n\n    if (this.state.player === 1) {\n      newSquares[this.state.changePawn] = new Bishop(2);\n      this.setState({\n        squares: newSquares,\n        changePawn: -1\n      });\n    } else {\n      newSquares[this.state.changePawn] = new Bishop(1);\n      this.setState({\n        squares: newSquares,\n        changePawn: -1\n      });\n    }\n\n    var textSquares = this.classesToStrings(this.state.squares);\n    var message = {\n      roundID: this.state.roundID,\n      board: textSquares,\n      dontChange: true\n    };\n    this.state.socket.emit('update', message);\n  }\n\n  setQueen() {\n    let newSquares = this.state.squares;\n\n    if (this.state.player === 1) {\n      newSquares[this.state.changePawn] = new Queen(2);\n      this.setState({\n        squares: newSquares,\n        changePawn: -1\n      });\n    } else {\n      newSquares[this.state.changePawn] = new Queen(1);\n      this.setState({\n        squares: newSquares,\n        changePawn: -1\n      });\n    }\n\n    var textSquares = this.classesToStrings(this.state.squares);\n    var message = {\n      roundID: this.state.roundID,\n      board: textSquares,\n      dontChange: true\n    };\n    this.state.socket.emit('update', message);\n  }\n\n  setKnight() {\n    let newSquares = this.state.squares;\n\n    if (this.state.player === 1) {\n      newSquares[this.state.changePawn] = new Knight(2);\n      this.setState({\n        squares: newSquares,\n        changePawn: -1\n      });\n    } else {\n      newSquares[this.state.changePawn] = new Knight(1);\n      this.setState({\n        squares: newSquares,\n        changePawn: -1\n      });\n    }\n\n    var textSquares = this.classesToStrings(this.state.squares);\n    var message = {\n      roundID: this.state.roundID,\n      board: textSquares,\n      dontChange: true\n    };\n    this.state.socket.emit('update', message);\n  }\n\n  setRook() {\n    let newSquares = this.state.squares;\n\n    if (this.state.player === 1) {\n      newSquares[this.state.changePawn] = new Rook(2);\n      this.setState({\n        squares: newSquares,\n        changePawn: -1\n      });\n    } else {\n      newSquares[this.state.changePawn] = new Rook(1);\n      this.setState({\n        squares: newSquares,\n        changePawn: -1\n      });\n    }\n\n    var textSquares = this.classesToStrings(this.state.squares);\n    var message = {\n      roundID: this.state.roundID,\n      board: textSquares,\n      dontChange: true\n    };\n    this.state.socket.emit('update', message);\n  }\n\n  render() {\n    let showButtons = false;\n    if (this.state.changePawn !== -1) showButtons = true;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 932,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"game\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 933,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"game-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 934,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 935,\n        columnNumber: 13\n      }\n    }, \"Chess\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"game-board\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 938,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Board, {\n      squares: this.state.squares,\n      onClick: i => this.handleClick(i),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 939,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"game-info row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 945,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 946,\n        columnNumber: 13\n      }\n    }, \"Turn\"), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"player-turn-box\",\n      style: {\n        backgroundColor: this.state.turn\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 947,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"game-status\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 950,\n        columnNumber: 13\n      }\n    }, this.state.kingStatus), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"game-status\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 951,\n        columnNumber: 13\n      }\n    }, this.state.status), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"fallen-soldier-block\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 953,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(FallenSoldierBlock, {\n      whiteFallenSoldiers: this.state.whiteFallenSoldiers,\n      blackFallenSoldiers: this.state.blackFallenSoldiers,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 955,\n        columnNumber: 16\n      }\n    })), showButtons ? /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 962,\n        columnNumber: 17\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.setBishop,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 962,\n        columnNumber: 23\n      }\n    }, \" Bishop \"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.setQueen,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 963,\n        columnNumber: 23\n      }\n    }, \" Queen \"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.setKnight,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 964,\n        columnNumber: 23\n      }\n    }, \" Knight \"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.setRook,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 965,\n        columnNumber: 23\n      }\n    }, \" Rook \")) : /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 967,\n        columnNumber: 17\n      }\n    }, \" \")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"conn-info row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 971,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"status column left\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 972,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 973,\n        columnNumber: 13\n      }\n    }, symbol), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 974,\n        columnNumber: 13\n      }\n    }, status), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 975,\n        columnNumber: 13\n      }\n    }, turn)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"column right\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 977,\n        columnNumber: 12\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"endstate\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 978,\n        columnNumber: 13\n      }\n    }, endState)))));\n  }\n\n}","map":{"version":3,"sources":["/home/panagiotis/Desktop/ds_project/containers/Website/public_html/games/chess/src/components/game.js"],"names":["React","Board","FallenSoldierBlock","initialiseChessBoard","Bishop","King","Knight","Queen","Pawn","Rook","conn","Game","Component","constructor","props","args","getArgumenets","data","connect","state","squares","whiteFallenSoldiers","blackFallenSoldiers","player","sourceSelection","kingStatus","turn","type","myTurn","changePawn","host","gamemaster","token","socket","status","connectionStatus","progress","roundID","setBishop","bind","setQueen","setKnight","setRook","setListeners","handleClick","i","slice","setState","style","backgroundColor","name","isPossible","j","length","srcToDestPath1","getSrcToDestPath","srcToDestPath2","srcToDestPath3","isMovePossible","isMoveLegal","textSquares","classesToStrings","textWhiteFallenSoldiers","textBlackFallenSoldiers","message","board","emit","isDestEnemyOccupied","srcToDestPath","whitePushed","blackPushed","push","check","saveSquare","moveOn","k","checkSrcToDestPath","pop","itisCheck","l","m","countMoves","blackPieces","whitePieces","isLegal","console","log","newSquares","dontChange","render","showButtons","symbol","endState"],"mappings":"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","sourcesContent":["import React from 'react';\n\nimport '../index.css';\nimport Board from './board.js';\nimport FallenSoldierBlock from './fallen-soldier-block.js';\nimport initialiseChessBoard from '../helpers/board-initialiser.js';\nimport Bishop from '../pieces/bishop.js';\nimport King from '../pieces/king.js';\nimport Knight from '../pieces/knight.js';\nimport Queen from '../pieces/queen.js';\nimport Pawn from '../pieces/pawn.js';\nimport Rook from '../pieces/rook.js';\nimport * as conn from './multiplayer.js'; \n\nexport default class Game extends React.Component {\n  constructor(props){\n    super(props);\n    let args = conn.getArgumenets();\n    let data = conn.connect(args['host']+':'+args['playmanster'],args['token']);\n    this.state = {\n      squares: initialiseChessBoard(),\n      whiteFallenSoldiers: [],\n      blackFallenSoldiers: [],\n      player: 1,\n      sourceSelection: -1,\n      kingStatus: '',\n      turn: 'white',\n      type: null,\n      myTurn: false,\n      changePawn: -1,\n      host: args['host'],\n      gamemaster: args['gamemaster'],\n      token: args['token'],\n      socket: data['socket'],\n      status: '',\n      connectionStatus: data['connectionStatus'],\n      progress: 0,\n      roundID: null\n    }\n    this.setBishop = this.setBishop.bind(this);\n    this.setQueen = this.setQueen.bind(this);\n    this.setKnight = this.setKnight.bind(this);\n    this.setRook = this.setRook.bind(this);\n    conn.setListeners(this);\n  }\n \n  handleClick(i){\n    if (this.state.myTurn){\n      const squares = this.state.squares.slice();\n      \n      if(this.state.sourceSelection === -1){\n        if(!squares[i] || squares[i].player !== this.state.player){\n          this.setState({status: \"Wrong selection. Choose player \" + this.state.player + \" pieces.\"});\n          if (squares[i]) {\n            squares[i].style = {...squares[i].style, backgroundColor: \"\"};\n          }\n        }\n        else{\n          squares[i].style = {...squares[i].style, backgroundColor: \"RGB(111,143,114)\"}; // Emerald from http://omgchess.blogspot.com/2015/09/chess-board-color-schemes.html\n          this.setState({\n            status: \"Choose destination for the selected piece\",\n            sourceSelection: i\n          });\n        }\n      }else if(this.state.sourceSelection > -1){\n        squares[this.state.sourceSelection].style = {...squares[this.state.sourceSelection].style, backgroundColor: \"\"};\n\n        if(squares[i] && squares[i].player === this.state.player && \n          (squares[this.state.sourceSelection].constructor.name===\"King\" || squares[this.state.sourceSelection].constructor.name===\"Rook\") &&\n          (squares[i].constructor.name===\"King\" || squares[i].constructor.name===\"Rook\")){/////////////////castling case\n          \n          let isPossible = true;\n\n          if (squares[i].player === 1){//check correct position of pieces\n            if (this.state.sourceSelection===60 && squares[this.state.sourceSelection].constructor.name===\"King\"){\n              if (i!==63 && i!==56)\n                isPossible=false;\n            }else if (i===60 && squares[i].constructor.name===\"King\"){\n              if (this.state.sourceSelection!==63 && this.state.sourceSelection!==56)\n                isPossible=false;\n            }else\n              isPossible=false;\n          }else{\n            if (this.state.sourceSelection===4 && squares[this.state.sourceSelection].constructor.name===\"King\"){\n              if (i!==0 && i!==7)\n                isPossible=false;\n            }else if (i===4 && squares[i].constructor.name===\"King\"){\n              if (this.state.sourceSelection!==0 && this.state.sourceSelection!==7)\n                isPossible=false;\n            }else\n              isPossible=false;\n          }\n\n          if (isPossible){//check that there are no pieces between them\n            if (squares[i].player === 1){\n              if (i===63 || this.state.sourceSelection===63){\n                if (squares[61] || squares[62])\n                  isPossible=false;\n              }else{\n                if (squares[57] || squares[58] || squares[59])\n                  isPossible=false;\n              }\n            }else{\n              if (i===7 || this.state.sourceSelection===7){\n                if (squares[5] || squares[6])\n                  isPossible=false;\n              }else{\n                if (squares[1] || squares[2] || squares[3])\n                  isPossible=false;\n              }\n            }\n\n            if (isPossible){//check if king is or passes from check\n              if (squares[i].player === 1){\n                if (i===63 || this.state.sourceSelection===63){\n                  for (let j=0; j<squares.length; j++){\n                    if (squares[j] && squares[j].player!==this.state.player){\n                      const srcToDestPath1 = squares[j].getSrcToDestPath(j, 60);\n                      const srcToDestPath2 = squares[j].getSrcToDestPath(j, 61);\n                      const srcToDestPath3 = squares[j].getSrcToDestPath(j, 62);\n                      if ((squares[j].isMovePossible(j, 60, false) && this.isMoveLegal(srcToDestPath1, squares)) ||\n                          (squares[j].isMovePossible(j, 61, false) && this.isMoveLegal(srcToDestPath2, squares)) ||\n                          (squares[j].isMovePossible(j, 62, false) && this.isMoveLegal(srcToDestPath3, squares))){\n                        isPossible=false;\n                        break;\n                      }\n                    }\n                  }\n                }else{\n                  for (let j=0; j<squares.length; j++){\n                    if (squares[j] && squares[j].player!==this.state.player){\n                      const srcToDestPath1 = squares[j].getSrcToDestPath(j, 60);\n                      const srcToDestPath2 = squares[j].getSrcToDestPath(j, 59);\n                      const srcToDestPath3 = squares[j].getSrcToDestPath(j, 58);\n                      if ((squares[j].isMovePossible(j, 60, false) && this.isMoveLegal(srcToDestPath1, squares)) ||\n                          (squares[j].isMovePossible(j, 59, false) && this.isMoveLegal(srcToDestPath2, squares)) ||\n                          (squares[j].isMovePossible(j, 58, false) && this.isMoveLegal(srcToDestPath3, squares))){\n                        isPossible=false;\n                        break;\n                      }\n                    }\n                  }\n                }\n              }else{\n                if (i===7 || this.state.sourceSelection===7){\n                  for (let j=0; j<squares.length; j++){\n                    if (squares[j] && squares[j].player!==this.state.player){\n                      const srcToDestPath1 = squares[j].getSrcToDestPath(j, 4);\n                      const srcToDestPath2 = squares[j].getSrcToDestPath(j, 5);\n                      const srcToDestPath3 = squares[j].getSrcToDestPath(j, 6);\n                      if ((squares[j].isMovePossible(j, 4, false) && this.isMoveLegal(srcToDestPath1, squares)) ||\n                          (squares[j].isMovePossible(j, 5, false) && this.isMoveLegal(srcToDestPath2, squares)) ||\n                          (squares[j].isMovePossible(j, 6, false) && this.isMoveLegal(srcToDestPath3, squares))){\n                        isPossible=false;\n                        break;\n                      }\n                    }\n                  }\n                }else{\n                  for (let j=0; j<squares.length; j++){\n                    if (squares[j] && squares[j].player!==this.state.player){\n                      const srcToDestPath1 = squares[j].getSrcToDestPath(j, 4);\n                      const srcToDestPath2 = squares[j].getSrcToDestPath(j, 3);\n                      const srcToDestPath3 = squares[j].getSrcToDestPath(j, 2);\n                      if ((squares[j].isMovePossible(j, 4, false) && this.isMoveLegal(srcToDestPath1, squares)) ||\n                          (squares[j].isMovePossible(j, 3, false) && this.isMoveLegal(srcToDestPath2, squares)) ||\n                          (squares[j].isMovePossible(j, 2, false) && this.isMoveLegal(srcToDestPath3, squares))){\n                        isPossible=false;\n                        break;\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n\n          if (isPossible){\n            if (squares[i].player === 1){\n              if (i===63 || this.state.sourceSelection===63){\n                squares[62]=squares[60];\n                squares[61]=squares[63];\n                squares[63]=null;\n              }else{\n                squares[58]=squares[60];\n                squares[59]=squares[56];\n                squares[56]=null;\n              }\n              squares[60]=null;\n            }else{\n              if (i===7 || this.state.sourceSelection===7){\n                squares[6]=squares[4];\n                squares[5]=squares[7];\n                squares[7]=null;\n              }else{\n                squares[2]=squares[4];\n                squares[3]=squares[0];\n                squares[0]=null;\n              }\n              squares[4]=null;\n            }\n\n            let player = this.state.player === 1? 2: 1;\n            let turn = this.state.turn === 'white'? 'black' : 'white';\n            this.setState({\n              squares: squares,\n              player: player,\n              turn: turn,\n              type: turn,\n              kingStatus: '',\n              myTurn: !this.state.myTurn,\n              changePawn: -1,\n              status: \"Castling occured.\",\n              sourceSelection: -1,\n            });\n            var textSquares = this.classesToStrings(squares);\n            var textWhiteFallenSoldiers = this.classesToStrings(this.state.whiteFallenSoldiers);\n            var textBlackFallenSoldiers = this.classesToStrings(this.state.blackFallenSoldiers);\n            let message = {\n              roundID : this.state.roundID,\n              board : textSquares,\n              whiteFallenSoldiers: textWhiteFallenSoldiers,\n              blackFallenSoldiers: textBlackFallenSoldiers,\n              progress : 0\n            }\n            this.state.socket.emit('update', message);\n          }else{\n            this.setState({\n              status: \"Wrong selection. Castling not allowed.\",\n              sourceSelection: -1,\n            });\n          }\n\n        }else if(squares[i] && squares[i].player === this.state.player){\n          this.setState({\n            status: \"Wrong selection. Choose valid source and destination again.\",\n            sourceSelection: -1,\n          });\n        }else{\n          const whiteFallenSoldiers = this.state.whiteFallenSoldiers.slice();\n          const blackFallenSoldiers = this.state.blackFallenSoldiers.slice();\n          const isDestEnemyOccupied = squares[i]? true : false; \n          const isMovePossible = squares[this.state.sourceSelection].isMovePossible(this.state.sourceSelection, i, isDestEnemyOccupied);\n          const srcToDestPath = squares[this.state.sourceSelection].getSrcToDestPath(this.state.sourceSelection, i);\n          const isMoveLegal = this.isMoveLegal(srcToDestPath, squares);\n\n          if(isMovePossible && isMoveLegal){\n            let whitePushed=false, blackPushed=false;\n            if(squares[i] !== null){\n              if(squares[i].player === 1){\n                whiteFallenSoldiers.push(squares[i]);     \n                whitePushed=true;         \n              }else{\n                blackFallenSoldiers.push(squares[i]);\n                blackPushed=true;\n              }\n            }\n\n            let check=false;\n            if (this.state.kingStatus===\"Check.\")\n              check=true;\n\n            var kingStatus = 0;\n            const saveSquare = squares[i];\n            squares[i] = squares[this.state.sourceSelection];\n            squares[this.state.sourceSelection] = null;\n            let player = this.state.player === 1? 2: 1;\n            let turn = this.state.turn === 'white'? 'black' : 'white';\n            this.setState({\n              sourceSelection: -1,\n              squares: squares,\n              whiteFallenSoldiers: whiteFallenSoldiers,\n              blackFallenSoldiers: blackFallenSoldiers,\n              myTurn: !this.state.myTurn,\n              player: player,\n              status: '',\n              kingStatus: '',\n              turn: turn,\n              type: turn,\n              changePawn: -1\n            });\n\n            let moveOn=true;\n            if (check){\n              for (let j=0; j<squares.length; j++){\n                if (squares[j] && squares[j].constructor.name===\"King\" && squares[j].player===this.state.player){//find the king\n                  for (let k=0; k<squares.length; k++){\n                    if (squares[k] && squares[k].player!==this.state.player){\n                      const checkSrcToDestPath = squares[k].getSrcToDestPath(k, j);\n                      if (squares[k].isMovePossible(k, j, isDestEnemyOccupied) && this.isMoveLegal(checkSrcToDestPath, squares)){//find if enemy threatens the king\n                        squares[this.state.sourceSelection] = squares[i];\n                        squares[i]=saveSquare;\n                        player = this.state.player === 1? 1: 2;\n                        turn = this.state.turn === 'white'? 'white' : 'black';\n                        if (whitePushed)\n                          whiteFallenSoldiers.pop();\n                        else if(blackPushed)\n                          blackFallenSoldiers.pop();\n                        this.setState({\n                          squares: squares,\n                          whiteFallenSoldiers: whiteFallenSoldiers,\n                          blackFallenSoldiers: blackFallenSoldiers,\n                          player: player,\n                          myTurn: this.state.myTurn,\n                          kingStatus: \"Check.\",\n                          status: 'Wrong selection. You need to avoid check.',\n                          turn: turn,\n                          type: turn\n                        });\n                        kingStatus=-1;\n                        moveOn=false;\n                        break;\n                      }\n                    }\n                  }\n                  break;\n                }\n              }\n            }else{\n              for (let j=0; j<squares.length; j++){\n                if (squares[j] && squares[j].constructor.name===\"King\" && squares[j].player===this.state.player){//find the king\n                  for (let k=0; k<squares.length; k++){\n                    if (squares[k] && squares[k].player!==this.state.player){\n                      const checkSrcToDestPath = squares[k].getSrcToDestPath(k, j);\n                      if (squares[k].isMovePossible(k, j, isDestEnemyOccupied) && this.isMoveLegal(checkSrcToDestPath, squares)){//find if enemy threatens the king\n                        squares[this.state.sourceSelection] = squares[i];\n                        squares[i]=saveSquare;\n                        player = this.state.player === 1? 1: 2;\n                        turn = this.state.turn === 'white'? 'white' : 'black';\n                        if (whitePushed)\n                          whiteFallenSoldiers.pop();\n                        else if(blackPushed)\n                          blackFallenSoldiers.pop();\n                        this.setState({\n                          squares: squares,\n                          whiteFallenSoldiers: whiteFallenSoldiers,\n                          blackFallenSoldiers: blackFallenSoldiers,\n                          myTurn: this.state.myTurn,\n                          player: player,\n                          kingStatus: '',\n                          status: 'Wrong selection. You cannot go to check.',\n                          turn: turn,\n                          type: turn\n                        });\n                        kingStatus=-1;\n                        moveOn=false;\n                        break;\n                      }\n                    }\n                  }\n                  break;\n                }\n              }\n            }\n\n            if (moveOn){\n              //code for check and checkmate\n              for (let j=0; j<squares.length; j++){\n                if (squares[j] && squares[j].constructor.name===\"King\" && squares[j].player!==this.state.player){//find the king\n                  for (let k=0; k<squares.length; k++){\n                    if (squares[k] && squares[k].player===this.state.player){\n                      const srcToDestPath = squares[k].getSrcToDestPath(k, j);\n                      if (squares[k].isMovePossible(k, j, isDestEnemyOccupied) && this.isMoveLegal(srcToDestPath, squares)){//find if enemy threatens the king\n                        let itisCheck=false;\n                        srcToDestPath[srcToDestPath.length]=k;\n\n                        for (let l=0; l<squares.length; l++){\n                          if (squares[l] && squares[l].player!==this.state.player){\n                            for (let m=0; m<srcToDestPath.length; m++){\n                              if (squares[l].isMovePossible(l, srcToDestPath[m], isDestEnemyOccupied) && this.isMoveLegal(squares[l].getSrcToDestPath(l, srcToDestPath[m]), squares) \n                                && squares[l].constructor.name!==\"King\"){\n                                itisCheck=true;\n                                break;\n                              }\n                            }\n                          }\n                        }\n\n                        if (itisCheck===true){//find king's possible moves and check if they avoid checkmate\n                          let countMoves = 0;\n\n                          if ((!squares[j-1] || j-1===k) && j-1>=0){\n                            for (let l=0; l<squares.length; l++){\n                              if (squares[l] && squares[l].player===this.state.player && l!==k){\n                                const isDestEnemyOccupied = squares[l]? true : false; \n                                if (squares[l].isMovePossible(l, j-1, isDestEnemyOccupied) && this.isMoveLegal(squares[l].getSrcToDestPath(l, j-1), squares)){\n                                  countMoves++;\n                                  break;\n                                }\n                              }\n                            }\n                          }else\n                            countMoves++;\n            \n                          if ((!squares[j+1] || (j+1)===k) && j+1<64){\n                            for (let l=0; l<squares.length; l++){\n                              if (squares[l] && squares[l].player===this.state.player && l!==k){\n                                const isDestEnemyOccupied = squares[l]? true : false;\n                                  if (squares[l].isMovePossible(l, j+1, isDestEnemyOccupied) && this.isMoveLegal(squares[l].getSrcToDestPath(l, j+1), squares)){\n                                    countMoves++;\n                                    break;\n                                  }\n                                }\n                              }\n                            }else\n                              countMoves++;\n\n                          if ((!squares[j-7] || (j-7)===k) && j-7>=0){\n                            for (let l=0; l<squares.length; l++){\n                              if (squares[l] && squares[l].player===this.state.player && l!==k){\n                                const isDestEnemyOccupied = squares[l]? true : false;\n                                if (squares[l].isMovePossible(l, j-7, isDestEnemyOccupied) && this.isMoveLegal(squares[l].getSrcToDestPath(l, j-7), squares)){\n                                  countMoves++;\n                                  break;\n                                }\n                              }\n                            }\n                          }else\n                            countMoves++;\n\n                          if ((!squares[j+7] || (j+7)===k) && j+7<64){\n                            for (let l=0; l<squares.length; l++){\n                              if (squares[l] && squares[l].player===this.state.player && l!==k){\n                                const isDestEnemyOccupied = squares[l]? true : false;\n                                if (squares[l].isMovePossible(l, j+7, isDestEnemyOccupied) && this.isMoveLegal(squares[l].getSrcToDestPath(l, j+7), squares)){\n                                  countMoves++;\n                                  break;\n                                }\n                              }\n                            }\n                          }else\n                            countMoves++;\n\n                          if ((!squares[j-8] || (j-8)===k) && j-8>=0){\n                            for (let l=0; l<squares.length; l++){\n                              if (squares[l] && squares[l].player===this.state.player && l!==k){\n                                const isDestEnemyOccupied = squares[l]? true : false;\n                                if (squares[l].isMovePossible(l, j-8, isDestEnemyOccupied) && this.isMoveLegal(squares[l].getSrcToDestPath(l, j-8), squares)){\n                                  countMoves++;\n                                  break;\n                                }\n                              }\n                            }\n                          }else\n                            countMoves++;\n\n                          if ((!squares[j+8] || (j+8)===k) && j+8<64){\n                            for (let l=0; l<squares.length; l++){\n                              if (squares[l] && squares[l].player===this.state.player && l!==k){\n                                const isDestEnemyOccupied = squares[l]? true : false;\n                                if (squares[l].isMovePossible(l, j+8, isDestEnemyOccupied) && this.isMoveLegal(squares[l].getSrcToDestPath(l, j+8), squares)){\n                                  countMoves++;\n                                  break;\n                                }\n                              }\n                            }\n                          }else\n                            countMoves++;\n\n                          if ((!squares[j-9] || (j-9)===k) && j-9>=0){\n                            for (let l=0; l<squares.length; l++){\n                              if (squares[l] && squares[l].player===this.state.player && l!==k){\n                                const isDestEnemyOccupied = squares[l]? true : false;\n                                if (squares[l].isMovePossible(l, j-9, isDestEnemyOccupied) && this.isMoveLegal(squares[l].getSrcToDestPath(l, j-9), squares)){\n                                  countMoves++;\n                                  break;\n                                }\n                              }\n                            }\n                          }else\n                            countMoves++;\n\n                          if ((!squares[j+9] || (j+9)===k) && j+9<64){\n                            for (let l=0; l<squares.length; l++){\n                              if (squares[l] && squares[l].player===this.state.player && l!==k){\n                                const isDestEnemyOccupied = squares[l]? true : false;\n                                if (squares[l].isMovePossible(l, j+9, isDestEnemyOccupied) && this.isMoveLegal(squares[l].getSrcToDestPath(l, j+9), squares)){\n                                  countMoves++;\n                                  break;\n                                }\n                              }\n                            }\n                          }else\n                            countMoves++;\n\n                          if (countMoves===8)\n                            itisCheck=false;\n                        }\n                                              \n                        if (itisCheck===true){\n                          this.setState({kingStatus: \"Check.\"});\n                          kingStatus=1;\n                        }else{\n                          this.setState({kingStatus: \"Checkmate.\"});\n                          kingStatus=2;\n                        }\n\n                        break;\n                      }\n                    }\n                  }\n                  break;\n                }\n              } \n\n              //code for stalemate\n              let blackPieces=0, whitePieces=0; \n              for (let j=0; j<squares.length; j++){\n                if (squares[j]){\n                  if (squares[j].player===1)\n                    whitePieces++;\n                  else\n                    blackPieces++;\n                }\n              }\n\n              if (blackPieces===1 && whitePieces===1){\n                this.setState({kingStatus: \"Stalemate.\"});\n                kingStatus=3;\n              }else if ((blackPieces===1 && this.state.player===1) || (whitePieces===1 && this.state.player===2)){\n                for (let j=0; j<squares.length; j++){\n                  if (squares[j] && squares[j].constructor.name===\"King\" && squares[j].player!==this.state.player){//find the king\n                    let countMoves = 0;\n\n                    if (!squares[j-1] && j-1>0){\n                      for (let l=0; l<squares.length; l++){\n                        if (squares[l] && squares[l].player===this.state.player){\n                          const isDestEnemyOccupied = squares[l]? true : false;\n                          if (squares[l].isMovePossible(l, j-1, isDestEnemyOccupied) && this.isMoveLegal(squares[l].getSrcToDestPath(l, j-1), squares)){\n                            countMoves++;\n                            break;\n                          }\n                        }\n                      }\n                    }else\n                      countMoves++;\n\n                    if (!squares[j+1] && j+1<64){\n                      for (let l=0; l<squares.length; l++){\n                        if (squares[l] && squares[l].player===this.state.player){\n                          const isDestEnemyOccupied = squares[l]? true : false;\n                          if (squares[l].isMovePossible(l, j+1, isDestEnemyOccupied) && this.isMoveLegal(squares[l].getSrcToDestPath(l, j+1), squares)){\n                            countMoves++;\n                            break;\n                          }\n                        }\n                      }\n                    }else\n                      countMoves++;\n\n                    if (!squares[j-7] && j-7>0){\n                      for (let l=0; l<squares.length; l++){\n                        if (squares[l] && squares[l].player===this.state.player){\n                          const isDestEnemyOccupied = squares[l]? true : false;\n                          if (squares[l].isMovePossible(l, j-7, isDestEnemyOccupied) && this.isMoveLegal(squares[l].getSrcToDestPath(l, j-7), squares)){\n                            countMoves++;\n                             break;\n                          }\n                        }\n                      }\n                    }else\n                      countMoves++;\n\n                    if (!squares[j+7] && j+7<64){\n                      for (let l=0; l<squares.length; l++){\n                        if (squares[l] && squares[l].player===this.state.player){\n                          const isDestEnemyOccupied = squares[l]? true : false;\n                          if (squares[l].isMovePossible(l, j+7, isDestEnemyOccupied) && this.isMoveLegal(squares[l].getSrcToDestPath(l, j+7), squares)){\n                            countMoves++;\n                            break;\n                          }\n                        }\n                      }\n                    }else\n                      countMoves++;\n\n                   if (!squares[j-8] && j-8>0){\n                      for (let l=0; l<squares.length; l++){\n                        if (squares[l] && squares[l].player===this.state.player){\n                          const isDestEnemyOccupied = squares[l]? true : false;\n                          if (squares[l].isMovePossible(l, j-8, isDestEnemyOccupied) && this.isMoveLegal(squares[l].getSrcToDestPath(l, j-8), squares)){\n                            countMoves++;\n                            break;\n                          }\n                        }\n                      }\n                    }else\n                      countMoves++;\n                    \n                    if (!squares[j+8] && j+8<64){\n                      for (let l=0; l<squares.length; l++){\n                        if (squares[l] && squares[l].player===this.state.player){\n                          const isDestEnemyOccupied = squares[l]? true : false;\n                          if (squares[l].isMovePossible(l, j+8, isDestEnemyOccupied) && this.isMoveLegal(squares[l].getSrcToDestPath(l, j+8), squares)){\n                            countMoves++;\n                            break;\n                          }\n                        }\n                      }\n                    }else\n                      countMoves++;\n\n                    if (!squares[j-9] && j-9>0){\n                      for (let l=0; l<squares.length; l++){\n                        if (squares[l] && squares[l].player===this.state.player){\n                          const isDestEnemyOccupied = squares[l]? true : false;\n                          if (squares[l].isMovePossible(l, j-9, isDestEnemyOccupied) && this.isMoveLegal(squares[l].getSrcToDestPath(l, j-9), squares)){\n                            countMoves++;\n                            break;\n                          }\n                        }\n                      }\n                    }else\n                      countMoves++;\n\n                    if (!squares[j+9] && j+9<64){\n                      for (let l=0; l<squares.length; l++){\n                        if (squares[l] && squares[l].player===this.state.player){\n                          const isDestEnemyOccupied = squares[l]? true : false;\n                          if (squares[l].isMovePossible(l, j+9, isDestEnemyOccupied) && this.isMoveLegal(squares[l].getSrcToDestPath(l, j+9), squares)){\n                            countMoves++;\n                            break;\n                          }\n                        }\n                      }\n                    }else\n                      countMoves++;\n                    \n                   if (countMoves===8){\n                      this.setState({kingStatus: \"Stalemate.\"});\n                      kingStatus=3;\n                   }\n\n                    break;\n                  }\n                }\n              }\n\n              //code for pawn change\n              if (this.state.player===1){\n                for (let j=0; j<8; j++){\n                  if (squares[j] && squares[j].player===1 && squares[j].constructor.name===\"Pawn\"){\n                    this.setState({changePawn: j});\n                    break;\n                  }\n                }\n              }else{\n                for (let j=56; j<64; j++){\n                  if (squares[j] && squares[j].player===2 && squares[j].constructor.name===\"Pawn\"){\n                    this.setState({changePawn: j});\n                    break;\n                  }\n                }\n              }\n            }\n            if (kingStatus!==-1){\n\n\n              textSquares = this.classesToStrings(squares);\n              textWhiteFallenSoldiers = this.classesToStrings(whiteFallenSoldiers);\n              textBlackFallenSoldiers = this.classesToStrings(blackFallenSoldiers);\n              var message = {\n                roundID : this.state.roundID,\n                board : textSquares,\n                whiteFallenSoldiers: textWhiteFallenSoldiers,\n                blackFallenSoldiers: textBlackFallenSoldiers,\n                kingStatus: '',\n                progress : 0\n              }\n\n              if (kingStatus===2){\n                message = {\n                  roundID : this.state.roundID,\n                  board : textSquares,\n                  kingStatus: 'Checkmate.',\n                  whiteFallenSoldiers: textWhiteFallenSoldiers,\n                  blackFallenSoldiers: textBlackFallenSoldiers,\n                  progress : 1\n                }\n              }else if(kingStatus===3){\n                message = {\n                  roundID : this.state.roundID,\n                  board : textSquares,\n                  kingStatus: 'Stalemate.',\n                  whiteFallenSoldiers: textWhiteFallenSoldiers,\n                  blackFallenSoldiers: textBlackFallenSoldiers,\n                  progress : 2\n                }\n              }else if(kingStatus===1){\n                message = {\n                  roundID : this.state.roundID,\n                  board : textSquares,\n                  whiteFallenSoldiers: textWhiteFallenSoldiers,\n                  blackFallenSoldiers: textBlackFallenSoldiers,\n                  kingStatus: 'Check.',\n                  progress : 0\n                }\n              }\n                        \n              this.state.socket.emit('update', message);\n            }\n          }else{\n            this.setState({\n              status: \"Wrong selection. Choose valid source and destination again.\",\n              sourceSelection: -1,\n            });\n          }\n        }\n      }\n    }\n  }\n  /**\n   * Check all path indices are null. For one steps move of pawn/others or jumping moves of knight array is empty, so  move is legal.\n   * @param  {[type]}  srcToDestPath [array of board indices comprising path between src and dest ]\n   * @return {Boolean}               \n   */ \n  isMoveLegal(srcToDestPath, squares){\n    let isLegal = true;\n    for(let i = 0; i < srcToDestPath.length; i++){\n      if(squares[srcToDestPath[i]] !== null){\n        isLegal = false;\n      }\n    }\n    return isLegal;\n  }\n\n  classesToStrings(squares){\n    console.log(\"squares\")\n    console.log(squares)\n   var textSquares = [];\n    for (let i=0; i<squares.length; i++){\n      if (squares[i]){\n          if (squares[i] instanceof King){\n            if (squares[i].player===1)\n              textSquares.push(\"King 1\");\n            else\n              textSquares.push(\"King 2\");\n          }else if (squares[i] instanceof Pawn){\n            if (squares[i].player===1)\n              textSquares.push(\"Pawn 1\");\n            else\n              textSquares.push(\"Pawn 2\");\n          }else if (squares[i] instanceof Queen){\n            if (squares[i].player===1)\n              textSquares.push(\"Queen 1\");\n            else\n              textSquares.push(\"Queen 2\");\n          }else if (squares[i] instanceof Bishop){\n            if (squares[i].player===1)\n              textSquares.push(\"Bishop 1\");\n            else\n              textSquares.push(\"Bishop 2\");\n          }else if (squares[i] instanceof Knight){\n            if (squares[i].player===1)\n              textSquares.push(\"Knight 1\");\n            else\n              textSquares.push(\"Knight 2\");\n          }else if (squares[i] instanceof Rook){\n            if (squares[i].player===1)\n              textSquares.push(\"Rook 1\");\n            else\n              textSquares.push(\"Rook 2\");\n          }\n      }else{\n        textSquares.push(0);\n      }\n    }\n    console.log(\"textSquares\");\n    console.log(textSquares);\n    return textSquares;\n  }\n\n  // classesToStrings(squares){\n  //   console.log(\"squares\")\n  //   console.log(squares)\n  //  var textSquares = [];\n  //   for (let i=0; i<squares.length; i++){\n  //     if (squares[i]){\n  //       console.log(squares[i] instanceof Bishop)\n  //       console.log(i)\n  //       switch(squares[i].constructor.name){\n  //         case \"King\":\n  //           if (squares[i].player===1)\n  //             textSquares.push(\"King 1\");\n  //           else\n  //             textSquares.push(\"King 2\");\n  //           break;\n  //         case \"Pawn\":\n  //           if (squares[i].player===1)\n  //             textSquares.push(\"Pawn 1\");\n  //           else\n  //             textSquares.push(\"Pawn 2\");\n  //           break;\n  //         case \"Queen\":\n  //           if (squares[i].player===1)\n  //             textSquares.push(\"Queen 1\");\n  //           else\n  //             textSquares.push(\"Queen 2\");\n  //           break;\n  //         case \"Bishop\":\n  //           if (squares[i].player===1)\n  //             textSquares.push(\"Bishop 1\");\n  //           else\n  //             textSquares.push(\"Bishop 2\");\n  //           break;\n  //         case \"Knight\":\n  //           if (squares[i].player===1)\n  //             textSquares.push(\"Knight 1\");\n  //           else\n  //             textSquares.push(\"Knight 2\");\n  //           break;\n  //         case \"Rook\":\n  //           if (squares[i].player===1)\n  //             textSquares.push(\"Rook 1\");\n  //           else\n  //             textSquares.push(\"Rook 2\");\n  //           break;\n  //         default:\n  //           break;\n  //       }\n  //     }else{\n  //       textSquares.push(0);\n  //     }\n  //   }\n  //   console.log(\"textSquares\");\n  //   console.log(textSquares);\n  //   return textSquares;\n  // }\n\n  setBishop(){\n    let newSquares = this.state.squares;\n    if (this.state.player===1){\n      newSquares[this.state.changePawn] = new Bishop(2);\n      this.setState({\n        squares: newSquares,\n        changePawn: -1\n      });\n    }else{\n      newSquares[this.state.changePawn] = new Bishop(1);\n      this.setState({\n        squares: newSquares,\n        changePawn: -1\n      });\n    }\n    var textSquares = this.classesToStrings(this.state.squares);\n    var message = {\n      roundID : this.state.roundID,\n      board: textSquares,\n      dontChange: true\n    }\n    this.state.socket.emit('update', message);\n  }\n\n  setQueen(){\n    let newSquares = this.state.squares;\n    if (this.state.player===1){\n      newSquares[this.state.changePawn] = new Queen(2);\n      this.setState({\n        squares: newSquares,\n        changePawn: -1\n      });\n    }else{\n      newSquares[this.state.changePawn] = new Queen(1);\n      this.setState({\n        squares: newSquares,\n        changePawn: -1\n      });\n    }\n    var textSquares = this.classesToStrings(this.state.squares);\n    var message = {\n      roundID : this.state.roundID,\n      board: textSquares,\n      dontChange: true\n    }\n    this.state.socket.emit('update', message);\n  }\n\n  setKnight(){\n    let newSquares = this.state.squares;\n    if (this.state.player===1){\n      newSquares[this.state.changePawn] = new Knight(2);\n      this.setState({\n        squares: newSquares,\n        changePawn: -1\n      });\n    }else{\n      newSquares[this.state.changePawn] = new Knight(1);\n      this.setState({\n        squares: newSquares,\n        changePawn: -1\n      });\n    }\n    var textSquares = this.classesToStrings(this.state.squares);\n    var message = {\n      roundID : this.state.roundID,\n      board: textSquares,\n      dontChange: true\n    }\n    this.state.socket.emit('update', message);\n  }\n\n  setRook(){\n    let newSquares = this.state.squares;\n    if (this.state.player===1){\n      newSquares[this.state.changePawn] = new Rook(2);\n      this.setState({\n        squares: newSquares,\n        changePawn: -1\n      });\n    }else{\n      newSquares[this.state.changePawn] = new Rook(1);\n      this.setState({\n        squares: newSquares,\n        changePawn: -1\n      });\n    }\n    var textSquares = this.classesToStrings(this.state.squares);\n    var message = {\n      roundID : this.state.roundID,\n      board: textSquares,\n      dontChange: true\n    }\n    this.state.socket.emit('update', message);\n  }\n\n  render() {\n    let showButtons=false;\n    if (this.state.changePawn!==-1)\n      showButtons=true;\n        \n    return (\n      <div>\n        <div className=\"game\">\n          <div className=\"game-title\">\n            <div>Chess</div>\n          </div>\n\n          <div className=\"game-board\">\n            <Board \n              squares = {this.state.squares}\n              onClick = {(i) => this.handleClick(i)}\n            />\n          </div>\n\n          <div className=\"game-info row\">\n            <h3>Turn</h3>\n            <div id=\"player-turn-box\" style={{backgroundColor: this.state.turn}}>\n  \n            </div>\n            <div className=\"game-status\">{this.state.kingStatus}</div>\n            <div className=\"game-status\">{this.state.status}</div>\n\n            <div className=\"fallen-soldier-block\">\n              \n              {<FallenSoldierBlock\n              whiteFallenSoldiers = {this.state.whiteFallenSoldiers}\n              blackFallenSoldiers = {this.state.blackFallenSoldiers}\n              />\n            }\n            </div>\n            {showButtons\n              ? <div> <button onClick = {this.setBishop}> Bishop </button> \n                      <button onClick = {this.setQueen}> Queen </button> \n                      <button onClick = {this.setKnight}> Knight </button> \n                      <button onClick = {this.setRook}> Rook </button> \n                </div>\n              : <div> </div>\n            }\n          </div>\n\n          <div className=\"conn-info row\">\n          <div className=\"status column left\">\n            <div>{symbol}</div>\n            <div>{status}</div>\n            <div>{turn}</div>\n           </div>\n           <div className=\"column right\">\n            <div id=\"endstate\">{endState}</div>\n           </div>\n        </div>\n        </div>\n      </div>\n    );\n  }\n}"]},"metadata":{},"sourceType":"module"}