{"ast":null,"code":"var _jsxFileName = \"/home/panagiotis/Desktop/ds_project/games/tic-tac-toe/src/Game.js\";\nimport React from 'react';\nimport './index.css';\nimport openSocket from 'socket.io-client'; // npm i socket.io-client\n\nfunction Square(props) {\n  return /*#__PURE__*/React.createElement(\"button\", {\n    className: \"square\",\n    onClick: props.onClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 9\n    }\n  }, props.value);\n}\n\nclass Board extends React.Component {\n  renderSquare(i) {\n    return /*#__PURE__*/React.createElement(Square, {\n      value: this.props.squares[i],\n      onClick: () => this.props.onClick(i),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 7\n      }\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"board-row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 5\n      }\n    }, this.renderSquare(0), this.renderSquare(1), this.renderSquare(2)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"board-row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 5\n      }\n    }, this.renderSquare(3), this.renderSquare(4), this.renderSquare(5)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"board-row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 5\n      }\n    }, this.renderSquare(6), this.renderSquare(7), this.renderSquare(8)));\n  }\n\n}\n\nlet getParamValue = function (paramName) {\n  var url = window.location.search.substring(1); //get rid of \"?\" in querystring\n\n  var qArray = url.split('&'); //get key-value pairs\n\n  for (var i = 0; i < qArray.length; i++) {\n    var pArr = qArray[i].split('='); //split key and value\n\n    if (pArr[0] === paramName) console.log(pArr[1]);\n    return pArr[1]; //return value\n  }\n};\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    var url = window.location.search.substring(1);\n    var qArray = url.split('&');\n    let host = qArray[1].split('=');\n    this.state = {\n      squares: Array(9).fill(null),\n      xIsNext: true,\n      token: qArray[0].split('='),\n      ws: new WebSocket('ws://localhost:2000'),\n      playmaster: qArray[1].split('='),\n      message: 'Waiting for another player...',\n      type: '-'\n    }; // let self = this;\n    // this.state.socket.on('type', type => {\n    //  \t\tthis.setState({type: type})\n    // });\n    //  \tthis.state.socket.on('color', color => {\n    //    \t\tthis.setState(...self.state, {color: color})\n    // \t\t});\n    //  \tthis.state.socket.on('turn', player => {\n    //    \t\tif (player === this.state.color) {\n    //       \tthis.setState(...self.state, {message: \"You're up. What's your move?\", yourTurn: true})\n    //     \t} else {\n    //     \t\tthis.setState(...self.state, {message: player + ' is thinking...', yourTurn: false})\n    //   \t}\n    // }\n  }\n\n  handleClick(i) {\n    const squares = this.state.squares.slice(); //create a copy of the array\n    //if the game is over or the sqare is already filled, return\n\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\n    this.setState({\n      squares: squares,\n      xIsNext: !this.state.xIsNext\n    });\n  }\n\n  componentDidMount() {\n    this.state.ws.onopen = () => {\n      // on connecting, do nothing but log it to the console\n      console.log('connected');\n    };\n\n    this.state.ws.onmessage = evt => {\n      // listen to data sent from the websocket server\n      const message = JSON.parse(evt.data);\n      this.setState({\n        dataFromServer: message\n      });\n      console.log(message);\n    };\n\n    this.state.ws.onclose = () => {\n      console.log('disconnected'); // automatically try to reconnect on connection loss\n    };\n  }\n\n  render() {\n    const winner = calculateWinner(this.state.squares);\n    let status;\n\n    if (winner) {\n      status = 'Winner:' + winner;\n    } else {\n      status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n    }\n\n    let test1 = this.state.token;\n    this.state.ws.send('data');\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"game\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"game-board\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(Board, {\n      squares: this.state.squares,\n      onClick: i => this.handleClick(i),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 5\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"game-info\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 6\n      }\n    }, status), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 6\n      }\n    }, this.state.type), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 6\n      }\n    }, this.state.playmaster)));\n  }\n\n}\n\nfunction calculateWinner(squares) {\n  const lines = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n\n  return null;\n}\n\nexport default Game;","map":{"version":3,"sources":["/home/panagiotis/Desktop/ds_project/games/tic-tac-toe/src/Game.js"],"names":["React","openSocket","Square","props","onClick","value","Board","Component","renderSquare","i","squares","render","getParamValue","paramName","url","window","location","search","substring","qArray","split","length","pArr","console","log","Game","constructor","host","state","Array","fill","xIsNext","token","ws","WebSocket","playmaster","message","type","handleClick","slice","calculateWinner","setState","componentDidMount","onopen","onmessage","evt","JSON","parse","data","dataFromServer","onclose","winner","status","test1","send","lines","a","b","c"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './index.css';\nimport openSocket from 'socket.io-client';\n\n// npm i socket.io-client\n\nfunction Square(props) {\n\n    return (\n        <button \n          className=\"square\" \n          onClick={props.onClick}\n        >\n            {props.value}\n        </button>\n    );\n}\n\nclass Board extends React.Component {\n\t\n\trenderSquare(i) {\n    \treturn (\n    \t\t<Square \n    \t\t\tvalue={this.props.squares[i]}\n    \t\t\tonClick={() => this.props.onClick(i)}\n    \t\t/>);\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<div className=\"board-row\">\n\t\t\t\t\t{this.renderSquare(0)}\n\t\t\t\t\t{this.renderSquare(1)}\n\t\t\t\t\t{this.renderSquare(2)}\n\t\t\t\t</div>\n\t\t\t\t<div className=\"board-row\">\n\t\t\t\t\t{this.renderSquare(3)}\n\t\t\t\t\t{this.renderSquare(4)}\n\t\t\t\t\t{this.renderSquare(5)}\n\t\t\t\t</div>\n\t\t\t\t<div className=\"board-row\">\n\t\t\t\t\t{this.renderSquare(6)}\n\t\t\t\t\t{this.renderSquare(7)}\n\t\t\t\t\t{this.renderSquare(8)}\n\t\t\t\t</div>\n\t\t\t</div>\n    \t);\n    }\n}\n\nlet getParamValue = function(paramName)\n{\n    var url = window.location.search.substring(1); //get rid of \"?\" in querystring\n    var qArray = url.split('&'); //get key-value pairs\n    for (var i = 0; i < qArray.length; i++) \n    {\n        var pArr = qArray[i].split('='); //split key and value\n        if (pArr[0] === paramName) \n           console.log(pArr[1]);\n            return pArr[1]; //return value\n    }\n}\n\nclass Game extends React.Component {\n\tconstructor(props) {\n    \tsuper(props);\n    \tvar url = window.location.search.substring(1);\n    \tvar qArray = url.split('&');\n\n    \tlet host = qArray[1].split('=');\n\n\n    \tthis.state = {\n      \t\tsquares: Array(9).fill(null),\n    \t\txIsNext: true,\n    \t\ttoken: qArray[0].split('='),\n    \t\tws: new WebSocket('ws://localhost:2000'),\n    \t\tplaymaster: qArray[1].split('='),\n    \t\tmessage: 'Waiting for another player...',\n    \t\ttype: '-',\n \n    \t};\n\n    \t// let self = this;\n    \t// this.state.socket.on('type', type => {\n     //  \t\tthis.setState({type: type})\n    \t// });\n\n   //  \tthis.state.socket.on('color', color => {\n   //    \t\tthis.setState(...self.state, {color: color})\n   // \t\t});\n\n   //  \tthis.state.socket.on('turn', player => {\n   //    \t\tif (player === this.state.color) {\n\t  //       \tthis.setState(...self.state, {message: \"You're up. What's your move?\", yourTurn: true})\n\t  //     \t} else {\n\t  //     \t\tthis.setState(...self.state, {message: player + ' is thinking...', yourTurn: false})\n\t  //   \t}\n\t \t// }\n    \n\n\n  }\n\n  handleClick(i){\n\t\tconst squares = this.state.squares.slice();   //create a copy of the array\n\n\t\t//if the game is over or the sqare is already filled, return\n\t\tif (calculateWinner(squares) || squares[i]){\n\t\t\treturn;\n\t\t}\n\n\t\tsquares[i] = this.state.xIsNext ? 'X' : 'O';\n\t\tthis.setState({\n\t\t\tsquares: squares,\n\t\t\txIsNext: !this.state.xIsNext,\n\t\t});\n\t}\n\tcomponentDidMount() {\n        this.state.ws.onopen = () => {\n        // on connecting, do nothing but log it to the console\n        console.log('connected')\n        }\n\n        this.state.ws.onmessage = evt => {\n        // listen to data sent from the websocket server\n        const message = JSON.parse(evt.data)\n        this.setState({dataFromServer: message})\n        console.log(message)\n        }\n\n        this.state.ws.onclose = () => {\n        console.log('disconnected')\n        // automatically try to reconnect on connection loss\n\n        }\n    }\n\n\trender() {\n\t\tconst winner = calculateWinner(this.state.squares);\n  \t\tlet status;\n\n\t  \tif (winner) {\n\t  \t\tstatus = 'Winner:' + winner;\n\t  \t}else{\n\t  \t\tstatus = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n\t  \t}\n\n\t  \tlet test1 = this.state.token;\n\n\t  \tthis.state.ws.send('data');\n    \treturn (\n\t\t\t<div className=\"game\">\n\t\t\t<div className=\"game-board\">\n\t\t\t\t<Board \n\t\t\t\t\tsquares={this.state.squares}\n\t\t\t\t\tonClick={(i) => this.handleClick(i)}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t\t<div className=\"game-info\">\n\t\t\t  <div>{status}</div>\n\t\t\t  <div>{this.state.type}</div>\n\t\t\t  <div>{this.state.playmaster}</div>\n\t\t\t</div>\n\t\t\t</div>\n    );\n  }\n}\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}\n\nexport default Game;"]},"metadata":{},"sourceType":"module"}