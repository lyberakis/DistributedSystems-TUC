{"ast":null,"code":"var _jsxFileName = \"/home/panagiotis/Desktop/ds_project/games/tic-tac-toe/src/Game.js\";\nimport React from 'react';\nimport './index.css';\nimport openSocket from 'socket.io-client'; // npm i socket.io-client\n//SQUARE\n\nfunction Square(props) {\n  return /*#__PURE__*/React.createElement(\"button\", {\n    className: \"square\",\n    onClick: props.onClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 9\n    }\n  }, props.value);\n} //BOARD\n\n\nclass Board extends React.Component {\n  renderSquare(i) {\n    return /*#__PURE__*/React.createElement(Square, {\n      value: this.props.squares[i],\n      onClick: () => this.props.onClick(i),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 7\n      }\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"board-row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 5\n      }\n    }, this.renderSquare(0), this.renderSquare(1), this.renderSquare(2)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"board-row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 5\n      }\n    }, this.renderSquare(3), this.renderSquare(4), this.renderSquare(5)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"board-row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 5\n      }\n    }, this.renderSquare(6), this.renderSquare(7), this.renderSquare(8)));\n  }\n\n} //GAME\n\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    let data = connect();\n    this.state = {\n      squares: Array(9).fill(null),\n      myTurn: false,\n      token: data['token'],\n      socket: data['socket'],\n      status: data['connection'],\n      type: '-'\n    };\n    let self = this;\n    this.state.socket.on('wait', message => {\n      this.setState({\n        status: 1\n      });\n    });\n    this.state.socket.on('init', message => {\n      let turn = message['turn'];\n      let gtype = turn == 'first' ? 'X' : 'O';\n      this.setState({\n        id: turn,\n        status: 2,\n        type: gtype,\n        myTurn: gtype == 'X',\n        roundID: message['roundID']\n      });\n    }); //\n\n    this.state.socket.on('board', board => {\n      this.setState({\n        squares: board,\n        myTurn: true\n      });\n    });\n    this.state.socket.on('disconnect', board => {\n      console.log(\"disconnect\");\n      troubleshoot();\n\n      if (self.state.status > 0) {} // this.setState({\n      // \tsquares: board,\n      // \tmyTurn: true,\n      // })\n\n    });\n  }\n\n  handleClick(i) {\n    if (this.state.myTurn) {\n      const squares = this.state.squares.slice(); //create a copy of the array\n      //if the game is over or the sqare is already filled, return\n\n      if (calculateWinner(squares) || squares[i]) {\n        return;\n      }\n\n      squares[i] = this.state.type;\n      this.setState({\n        squares: squares,\n        myTurn: !this.state.myTurn\n      });\n      let message = {\n        roundID: this.state.roundID,\n        board: squares\n      };\n      this.state.socket.emit('update', message);\n      let endgame = isGameEnded(squares); //check if the game is ended\n\n      if (endgame || winner) {\n        let message = {\n          roundID: this.state.roundID,\n          winner: winner\n        };\n        this.state.socket.emit('endgame', message);\n      }\n    }\n  }\n\n  render() {\n    const winner = calculateWinner(this.state.squares);\n    const gameOver = isGameEnded(this.state.squares);\n    let status;\n    let conn_status;\n\n    if (this.state.status == 0) {\n      conn_status = 'Connection establised!';\n    } else if (this.state.status == 1) {\n      conn_status = 'Connected! Wait opponent to connect.';\n    } else if (this.state.status == 2) {\n      conn_status = 'Ready!';\n\n      if (winner) {\n        status = 'Winner:' + winner;\n      } else if (gameOver) {\n        status = 'Game ended without winner!';\n      } else {\n        if (this.state.myTurn) {\n          status = 'Your turn!';\n        } else {\n          status = 'opponent\\'s turn';\n        }\n      }\n    } else {\n      conn_status = 'Connection error!';\n    }\n\n    let test1 = this.state.token;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"game\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"game-board\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(Board, {\n      squares: this.state.squares,\n      onClick: i => this.handleClick(i),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 6\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"game-info\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 6\n      }\n    }, conn_status), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 7\n      }\n    }, status), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 7\n      }\n    }, \"Your symbol: \", this.state.type)));\n  }\n\n}\n\nfunction calculateWinner(squares) {\n  const lines = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n\n  return null;\n}\n\nfunction isGameEnded(squares) {\n  for (var i = 0; i < squares.length; i++) {\n    if (squares[i] == null) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction getArgumenets() {\n  let url_string = window.location['href'];\n  let url = new URL(url_string);\n  let playmanster = url.searchParams.get(\"host\");\n  let token = url.searchParams.get(\"token\");\n  let args = {\n    'token': token,\n    'playmanster': playmanster\n  };\n  return args;\n}\n\nfunction connect() {\n  let args = getArgumenets();\n  let token = args['token'];\n  let server = args['playmanster'];\n\n  if (token || server) {}\n\n  let handShake = {\n    query: 'token=' + args['token']\n  };\n  let socket = openSocket(args['playmanster'], handShake);\n  let respone = {\n    'token': args['token'],\n    'socket': socket,\n    'status': socket['connected'] ? 0 : -1\n  };\n  return respone;\n}\n\nfunction troubleshoot() {\n  var xhr = new XMLHttpRequest();\n  xhr.addEventListener('load', () => {\n    // update the state of the component with the result here\n    console.log(xhr.responseText);\n  });\n  let token = self.status.token;\n  let game = 'tic-tac-toe';\n  let gm = 'https://localhost:8080/clients?token=';\n  let url = gm + '?' + 'token=' + token + '&game=' + game;\n  xhr.open('GET', url);\n  let message = {\n    'token': self.status.token,\n    'game': 'tic-tac-toe'\n  };\n}\n\nexport default Game;","map":{"version":3,"sources":["/home/panagiotis/Desktop/ds_project/games/tic-tac-toe/src/Game.js"],"names":["React","openSocket","Square","props","onClick","value","Board","Component","renderSquare","i","squares","render","Game","constructor","data","connect","state","Array","fill","myTurn","token","socket","status","type","self","on","message","setState","turn","gtype","id","roundID","board","console","log","troubleshoot","handleClick","slice","calculateWinner","emit","endgame","isGameEnded","winner","gameOver","conn_status","test1","lines","length","a","b","c","getArgumenets","url_string","window","location","url","URL","playmanster","searchParams","get","args","server","handShake","query","respone","xhr","XMLHttpRequest","addEventListener","responseText","game","gm","open"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './index.css';\nimport openSocket from 'socket.io-client';\n\n// npm i socket.io-client\n\n//SQUARE\nfunction Square(props) {\n\n    return (\n        <button \n          className=\"square\" \n          onClick={props.onClick}\n        >\n            {props.value}\n        </button>\n    );\n}\n\n//BOARD\nclass Board extends React.Component {\n\t\n\trenderSquare(i) {\n    \treturn (\n    \t\t<Square \n    \t\t\tvalue={this.props.squares[i]}\n    \t\t\tonClick={() => this.props.onClick(i)}\n    \t\t/>);\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<div className=\"board-row\">\n\t\t\t\t\t{this.renderSquare(0)}\n\t\t\t\t\t{this.renderSquare(1)}\n\t\t\t\t\t{this.renderSquare(2)}\n\t\t\t\t</div>\n\t\t\t\t<div className=\"board-row\">\n\t\t\t\t\t{this.renderSquare(3)}\n\t\t\t\t\t{this.renderSquare(4)}\n\t\t\t\t\t{this.renderSquare(5)}\n\t\t\t\t</div>\n\t\t\t\t<div className=\"board-row\">\n\t\t\t\t\t{this.renderSquare(6)}\n\t\t\t\t\t{this.renderSquare(7)}\n\t\t\t\t\t{this.renderSquare(8)}\n\t\t\t\t</div>\n\t\t\t</div>\n    \t);\n    }\n}\n\n\n//GAME\nclass Game extends React.Component {\n\tconstructor(props) {\n    \tsuper(props);\n\n    \tlet data = connect()\n    \t\n    \tthis.state = {\n      \t\tsquares: Array(9).fill(null),\n    \t\tmyTurn: false,\n    \t\ttoken: data['token'],\n    \t\tsocket: data['socket'],\n    \t\tstatus: data['connection'],\n    \t\ttype: '-',\n \n    \t};\n\n    \t\n\n    \tlet self = this;\n    \tthis.state.socket.on('wait', message => {\n    \t\tthis.setState({\n      \t\t\tstatus: 1\n      \t\t})\n    \t});\n\n    \tthis.state.socket.on('init', message => {\n\n    \t\tlet turn = message['turn']\n    \t\tlet gtype = turn == 'first' ? 'X' : 'O' \n      \t\tthis.setState({\n      \t\t\tid: turn,\n      \t\t\tstatus: 2,\n      \t\t\ttype: gtype,\n      \t\t\tmyTurn: gtype == 'X',\n      \t\t\troundID: message['roundID']\n      \t\t})\n    \t});\n\n    \t//\n    \tthis.state.socket.on('board', board => {\n      \t\tthis.setState({\n      \t\t\tsquares: board,\n      \t\t\tmyTurn: true,\n      \t\t})\n    \t}); \n\n    \tthis.state.socket.on('disconnect', board => {\n    \t\tconsole.log(\"disconnect\");\n    \t\ttroubleshoot();\n    \t\tif (self.state.status >0) {}\n      \t\t// this.setState({\n      \t\t// \tsquares: board,\n      \t\t// \tmyTurn: true,\n      \t\t// })\n    \t});  \n  \t}\n\n\thandleClick(i){\n\t  \tif (this.state.myTurn) {\n\t\t\tconst squares = this.state.squares.slice();   //create a copy of the array\n\n\t\t\t//if the game is over or the sqare is already filled, return\n\t\t\tif (calculateWinner(squares) || squares[i]){\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tsquares[i] = this.state.type;\n\t\t\t\n\t\t\tthis.setState({\n\t\t\t\tsquares: squares,\n\t\t\t\tmyTurn: !this.state.myTurn,\n\t\t\t});\n\n\t\t\tlet message = {\n\t\t\t\troundID : this.state.roundID,\n\t\t\t\tboard : squares\n\t\t\t}\n\n\t\t\tthis.state.socket.emit('update', message)\n\n\t\t\t\n\t\t\tlet endgame = isGameEnded(squares);\n\n\t\t\t//check if the game is ended\n\t\t\tif(endgame || winner){\n\t\t\t\tlet message = {\n\t\t\t\t\troundID : this.state.roundID,\n\t\t\t\t\twinner: winner,\n\t\t\t\t}\n\t\t\t\tthis.state.socket.emit('endgame', message)\n\t\t\t}\n\t\t}\n\t}\n\n\trender() {\n\t\tconst winner = calculateWinner(this.state.squares);\n\t\tconst gameOver = isGameEnded(this.state.squares);\n\n  \t\tlet status;\n  \t\tlet conn_status;\n\n  \t\tif (this.state.status == 0) {\n\t  \t\tconn_status = 'Connection establised!';\n\t  \t}else if (this.state.status == 1) { \n\t  \t\tconn_status = 'Connected! Wait opponent to connect.';\n\t  \t}else if (this.state.status == 2) {\n\t  \t\tconn_status = 'Ready!';\n\t  \t\tif (winner) {\n\t\t  \t\tstatus = 'Winner:' + winner;\n\t\t  \t}else if (gameOver){\n\t\t  \t\tstatus = 'Game ended without winner!';\n\t\t  \t}else{\n\t\t  \t\tif (this.state.myTurn) {\n\t\t  \t\t\tstatus = 'Your turn!';\n\t\t  \t\t}else{\n\t\t  \t\t\tstatus = 'opponent\\'s turn';\n\t\t  \t\t}\n\t\t  \t}\n\t  \t}\n\t  \telse{\n\t  \t\tconn_status = 'Connection error!';\n\t  \t}\n\n\n\n\t  \tlet test1 = this.state.token;\n\n    \treturn (\n\t\t\t<div className=\"game\">\n\t\t\t\t<div className=\"game-board\">\n\t\t\t\t\t<Board \n\t\t\t\t\t\tsquares={this.state.squares}\n\t\t\t\t\t\tonClick={(i) => this.handleClick(i)}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"game-info\">\n\t\t\t\t\t<div>{conn_status}</div>\n\t\t\t\t \t<div>{status}</div>\n\t\t\t\t \t<div>Your symbol: {this.state.type}</div>\n\t\t\t\t</div>\n\t\t\t</div>\n    );\n  }\n}\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}\n\nfunction isGameEnded(squares){\n\tfor (var i = 0; i < squares.length; i++) {\n\t\tif (squares[i] == null) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nfunction getArgumenets() {\n\tlet url_string = window.location['href'];\n  \tlet url = new URL(url_string);\n\n\n  \tlet playmanster = url.searchParams.get(\"host\");\n  \tlet token = url.searchParams.get(\"token\");\n\n  \tlet args = {\n  \t\t'token': token,\n  \t\t'playmanster' : playmanster \n  \t};\n\n  \treturn args;\n}\n\nfunction connect(){\n\tlet args = getArgumenets();\n\n\tlet token = args['token'];\n\tlet server = args['playmanster'];\n\n\tif (token || server) {\n\n\t}\n\n    let handShake = {\n    \tquery:'token='+args['token']\n    }\n\n    let socket = openSocket(args['playmanster'], handShake)\n\n    let respone = {\n    \t'token': args['token'],\n    \t'socket': socket,\n    \t'status': socket['connected'] ? 0 : -1,\n    }\n\n    return respone;\n\n}\n\nfunction troubleshoot(){\n\tvar xhr = new XMLHttpRequest()\n\txhr.addEventListener('load', () => {\n      // update the state of the component with the result here\n      console.log(xhr.responseText)\n    })\n\n    let token = self.status.token;\n    let game = 'tic-tac-toe';\n    let gm = 'https://localhost:8080/clients?token='\n    let url = gm + '?' + 'token=' + token + '&game='+ game;\n\n\txhr.open('GET', url);\n\n\tlet message = {\n\t\t'token': self.status.token,\n\t\t'game':'tic-tac-toe' \n\t}\n}\n\nexport default Game;"]},"metadata":{},"sourceType":"module"}