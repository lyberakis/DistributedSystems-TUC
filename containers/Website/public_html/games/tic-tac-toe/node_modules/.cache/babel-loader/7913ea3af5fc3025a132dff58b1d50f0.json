{"ast":null,"code":"var _jsxFileName = \"/home/panagiotis/Desktop/ds_project/games/tic-tac-toe/src/Game.js\";\nimport React from 'react';\nimport './index.css';\nimport * as utils from './utils.js'; // npm i socket.io-client\n//SQUARE\n\nfunction Square(props) {\n  return /*#__PURE__*/React.createElement(\"button\", {\n    className: \"square\",\n    onClick: props.onClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 9\n    }\n  }, props.value);\n} //BOARD\n\n\nclass Board extends React.Component {\n  renderSquare(i) {\n    return /*#__PURE__*/React.createElement(Square, {\n      value: this.props.squares[i],\n      onClick: () => this.props.onClick(i),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 7\n      }\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"board-row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 5\n      }\n    }, this.renderSquare(0), this.renderSquare(1), this.renderSquare(2)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"board-row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 5\n      }\n    }, this.renderSquare(3), this.renderSquare(4), this.renderSquare(5)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"board-row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 5\n      }\n    }, this.renderSquare(6), this.renderSquare(7), this.renderSquare(8)));\n  }\n\n} //GAME\n\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props); //Establish Connection\n\n    let args = utils.getArgumenets();\n    let data = utils.connect(args['host'] + ':' + args['playmanster'], args['token']);\n    this.state = {\n      host: args['host'],\n      gamemaster: args['gamemaster'],\n      squares: Array(9).fill(null),\n      myTurn: false,\n      token: args['token'],\n      socket: data['socket'],\n      status: data['status'],\n      type: null\n    }; //set event handlers for server messages\n\n    this.setListeners();\n  }\n\n  setListeners() {\n    //You connected first, wait for the opponent to connect\n    this.state.socket.on('wait', message => {\n      this.setState({\n        status: 1\n      });\n    }); //Both players are connected. The game can begin\n\n    this.state.socket.on('init', message => {\n      //Check if the game is new or it is continued from server fault.\n      if (this.state.type == null) {\n        let turn = message['turn'];\n        let type = turn ? 'X' : 'O';\n        this.setState({\n          status: 2,\n          type: type,\n          myTurn: turn,\n          roundID: message['roundID']\n        });\n      } else {\n        // let type = this.state.id == 'first' ? 'X' : 'O' \n        this.setState({\n          status: 2,\n          roundID: message['roundID']\n        });\n      }\n    }); //Receive the updated board\n\n    this.state.socket.on('board', board => {\n      this.setState({\n        squares: board,\n        myTurn: true\n      });\n    }); //Handler for server disconnection\n\n    this.state.socket.on('disconnect', board => {\n      this.state.socket.disconnect();\n      this.setState({\n        status: 4\n      }); //Create a request to GameMaster\n\n      var xhr = new XMLHttpRequest();\n\n      xhr.onload = function (e) {\n        if (xhr.readyState == 4) {\n          if (xhr.status == 200) {\n            let respone = JSON.parse(xhr.responseText);\n            this.reconnect(respone['playmaster']);\n          }\n        }\n      }.bind(this);\n\n      let game = 'tic-tac-toe';\n      let master = this.state.host + ':' + this.state.gamemaster;\n      let url = 'http://' + master + '?' + 'token=' + this.state.token + '&game=' + game;\n      xhr.open('GET', url);\n      xhr.send();\n    });\n  } //Establish a new connections\n\n\n  reconnect(port) {\n    console.log('reconnecting...');\n    let playmaster = this.state.host + ':' + port;\n    let token = this.state.token;\n    var data = utils.connect(playmaster, token);\n    this.setState({\n      socket: data['socket'],\n      status: data['status']\n    });\n    console.log(data['socket']);\n    this.setListeners();\n  }\n\n  handleClick(i) {\n    if (this.state.myTurn) {\n      const squares = this.state.squares.slice(); //create a copy of the array\n      //if the game is over or the sqare is already filled, return\n\n      if (utils.calculateWinner(squares) || squares[i]) {\n        return;\n      }\n\n      squares[i] = this.state.type;\n      this.setState({\n        squares: squares,\n        myTurn: !this.state.myTurn\n      });\n      let message = {\n        roundID: this.state.roundID,\n        board: squares\n      };\n      this.state.socket.emit('update', message);\n      let winner = utils.calculateWinner(squares);\n      let endgame = utils.isGameEnded(squares);\n      let winnerInfo = null;\n\n      if (winner == null) {\n        winnerInfo = 0;\n      } else if (winner == this.state.type) {\n        winnerInfo = 1;\n      } else {\n        winnerInfo = -1;\n      } //check if the game is ended\n\n\n      if (endgame || winner) {\n        let message = {\n          roundID: this.state.roundID,\n          winner: winnerInfo\n        };\n        this.state.socket.emit('endgame', message);\n      }\n    }\n  }\n\n  render() {\n    const winner = utils.calculateWinner(this.state.squares);\n    const gameOver = utils.isGameEnded(this.state.squares);\n    let status;\n    let conn_status;\n\n    if (this.state.status == 0) {\n      conn_status = 'Connection establised!';\n    } else if (this.state.status == 1) {\n      conn_status = 'Connected! Wait opponent to connect.';\n    } else if (this.state.status == 2) {\n      conn_status = 'Ready!';\n\n      if (winner) {\n        status = 'Winner:' + winner;\n      } else if (gameOver) {\n        status = 'Game ended without winner!';\n      } else {\n        if (this.state.myTurn) {\n          status = 'Your turn!';\n        } else {\n          status = 'opponent\\'s turn';\n        }\n      }\n    } else if (this.state.status == 4) {\n      conn_status = 'Re-connecting!';\n    } else {\n      conn_status = 'Connection error!';\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"game\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"game-board\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(Board, {\n      squares: this.state.squares,\n      onClick: i => this.handleClick(i),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 6\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"game-info\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 6\n      }\n    }, conn_status), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 7\n      }\n    }, status), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 7\n      }\n    }, \"Your symbol: \", this.state.type)));\n  }\n\n}\n\nexport default Game;","map":{"version":3,"sources":["/home/panagiotis/Desktop/ds_project/games/tic-tac-toe/src/Game.js"],"names":["React","utils","Square","props","onClick","value","Board","Component","renderSquare","i","squares","render","Game","constructor","args","getArgumenets","data","connect","state","host","gamemaster","Array","fill","myTurn","token","socket","status","type","setListeners","on","message","setState","turn","roundID","board","disconnect","xhr","XMLHttpRequest","onload","e","readyState","respone","JSON","parse","responseText","reconnect","bind","game","master","url","open","send","port","console","log","playmaster","handleClick","slice","calculateWinner","emit","winner","endgame","isGameEnded","winnerInfo","gameOver","conn_status"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './index.css';\nimport * as utils from './utils.js'; \n\n// npm i socket.io-client\n\n//SQUARE\nfunction Square(props) {\n\n    return (\n        <button \n          className=\"square\" \n          onClick={props.onClick}\n        >\n            {props.value}\n        </button>\n    );\n}\n\n//BOARD\nclass Board extends React.Component {\n\t\n\trenderSquare(i) {\n    \treturn (\n    \t\t<Square \n    \t\t\tvalue={this.props.squares[i]}\n    \t\t\tonClick={() => this.props.onClick(i)}\n    \t\t/>);\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<div className=\"board-row\">\n\t\t\t\t\t{this.renderSquare(0)}\n\t\t\t\t\t{this.renderSquare(1)}\n\t\t\t\t\t{this.renderSquare(2)}\n\t\t\t\t</div>\n\t\t\t\t<div className=\"board-row\">\n\t\t\t\t\t{this.renderSquare(3)}\n\t\t\t\t\t{this.renderSquare(4)}\n\t\t\t\t\t{this.renderSquare(5)}\n\t\t\t\t</div>\n\t\t\t\t<div className=\"board-row\">\n\t\t\t\t\t{this.renderSquare(6)}\n\t\t\t\t\t{this.renderSquare(7)}\n\t\t\t\t\t{this.renderSquare(8)}\n\t\t\t\t</div>\n\t\t\t</div>\n    \t);\n    }\n}\n\n\n//GAME\nclass Game extends React.Component {\n\tconstructor(props) {\n    \tsuper(props);\n\n    \t//Establish Connection\n    \tlet args = utils.getArgumenets();\n    \tlet data = utils.connect(args['host']+':'+args['playmanster'],args['token'])\n    \t\n    \tthis.state = {\n    \t\thost: args['host'],\n    \t\tgamemaster: args['gamemaster'],\n      \t\tsquares: Array(9).fill(null),\n    \t\tmyTurn: false,\n    \t\ttoken: args['token'],\n    \t\tsocket: data['socket'],\n    \t\tstatus: data['status'],\n    \t\ttype: null,\n    \t};\n\n    \t//set event handlers for server messages\n    \tthis.setListeners(); \n  \t}\n\n  \tsetListeners(){\n  \t\t//You connected first, wait for the opponent to connect\n  \t\tthis.state.socket.on('wait', message => {\n    \t\tthis.setState({\n      \t\t\tstatus: 1\n      \t\t})\n    \t});\n\n  \t\t//Both players are connected. The game can begin\n    \tthis.state.socket.on('init', message => {\n\n\n    \t\t//Check if the game is new or it is continued from server fault.\n    \t\tif (this.state.type == null){\n    \t\t\tlet turn = message['turn'];\n\t    \t\tlet type = turn ? 'X' : 'O' \n \n\t      \t\tthis.setState({\n\t      \t\t\tstatus: 2,\n\t      \t\t\ttype: type,\n\t      \t\t\tmyTurn: turn,\n\t      \t\t\troundID: message['roundID']\n\t      \t\t})\n\t      \t}else{\n\t      \t\t// let type = this.state.id == 'first' ? 'X' : 'O' \n\t      \t\tthis.setState({\n\t      \t\t\tstatus: 2,\n\t      \t\t\troundID: message['roundID']\n\t      \t\t})\n\t      \t}\n    \t});\n\n    \t//Receive the updated board\n    \tthis.state.socket.on('board', board => {\n      \t\tthis.setState({\n      \t\t\tsquares: board,\n      \t\t\tmyTurn: true,\n      \t\t})\n    \t}); \n\n    \t//Handler for server disconnection\n    \tthis.state.socket.on('disconnect', board => {\n    \t\tthis.state.socket.disconnect()\n\n\n    \t\tthis.setState({\n\t\t\t\tstatus: 4,\n\t\t\t})\n    \t\t\n    \t\t//Create a request to GameMaster\n    \t\tvar xhr = new XMLHttpRequest()\n\n\t\t\txhr.onload = function (e) {\n\n\t\t\t\tif (xhr.readyState == 4) {\n        \t\t\tif (xhr.status == 200) {\n\t\t\t\t\t\tlet respone = JSON.parse(xhr.responseText);\n\t\t\t\t\t\tthis.reconnect(respone['playmaster']);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t    }.bind(this);\n\n\t\t    let game = 'tic-tac-toe';\n\t\t    let master = this.state.host + ':' + this.state.gamemaster\n\t\t    let url = 'http://'+master+'?'+'token='+this.state.token+'&game='+ game;\n\n\t\t\txhr.open('GET', url);\n\t\t\txhr.send();\n    \t}); \n\n  \t}\n\n  \t//Establish a new connections\n  \treconnect(port){\n  \t\tconsole.log('reconnecting...')\n  \t\tlet playmaster = this.state.host + ':' + port;\n\t\tlet token = this.state.token;\n\t\tvar data = utils.connect(playmaster,token)\n\n\t\tthis.setState({\n\t\t\tsocket: data['socket'],\n\t\t\tstatus: data['status'],\n\t\t});\n\n\t\tconsole.log(data['socket']);\n\t\tthis.setListeners();\n  \t}\n\n\thandleClick(i){\n\t  \tif (this.state.myTurn) {\n\t\t\tconst squares = this.state.squares.slice();   //create a copy of the array\n\n\t\t\t//if the game is over or the sqare is already filled, return\n\t\t\tif (utils.calculateWinner(squares) || squares[i]){\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tsquares[i] = this.state.type;\n\t\t\t\n\t\t\tthis.setState({\n\t\t\t\tsquares: squares,\n\t\t\t\tmyTurn: !this.state.myTurn,\n\t\t\t});\n\n\t\t\tlet message = {\n\t\t\t\troundID : this.state.roundID,\n\t\t\t\tboard : squares\n\t\t\t}\n\n\t\t\tthis.state.socket.emit('update', message)\n\n\t\t\tlet winner = utils.calculateWinner(squares);\n\t\t\tlet endgame = utils.isGameEnded(squares);\n\t\t\tlet winnerInfo = null;\n\n\t\t\tif (winner == null) {\n\t\t\t\twinnerInfo = 0;\n\t\t\t}else if (winner == this.state.type) {\n\t\t\t\twinnerInfo = 1;\n\t\t\t}else{\n\t\t\t\twinnerInfo = -1;\n\t\t\t}\n\n\t\t\t//check if the game is ended\n\t\t\tif(endgame || winner){\n\t\t\t\tlet message = {\n\t\t\t\t\troundID : this.state.roundID,\n\t\t\t\t\twinner: winnerInfo,\n\t\t\t\t}\n\t\t\t\tthis.state.socket.emit('endgame', message)\n\t\t\t}\n\t\t}\n\t}\n\n\trender() {\n\t\tconst winner = utils.calculateWinner(this.state.squares);\n\t\tconst gameOver = utils.isGameEnded(this.state.squares);\n\n  \t\tlet status;\n  \t\tlet conn_status;\n\n  \t\tif (this.state.status == 0) {\n\t  \t\tconn_status = 'Connection establised!';\n\t  \t}else if (this.state.status == 1) { \n\t  \t\tconn_status = 'Connected! Wait opponent to connect.';\n\t  \t}else if (this.state.status == 2) {\n\t  \t\tconn_status = 'Ready!';\n\t  \t\tif (winner) {\n\t\t  \t\tstatus = 'Winner:' + winner;\n\t\t  \t}else if (gameOver){\n\t\t  \t\tstatus = 'Game ended without winner!';\n\t\t  \t}else{\n\t\t  \t\tif (this.state.myTurn) {\n\t\t  \t\t\tstatus = 'Your turn!';\n\t\t  \t\t}else{\n\t\t  \t\t\tstatus = 'opponent\\'s turn';\n\t\t  \t\t}\n\t\t  \t}\n\t  \t}else if (this.state.status == 4){\n\t  \t\tconn_status = 'Re-connecting!';\n\t  \t}\n\t  \telse{\n\t  \t\tconn_status = 'Connection error!';\n\t  \t}\n\n\n    \treturn (\n\t\t\t<div className=\"game\">\n\t\t\t\t<div className=\"game-board\">\n\t\t\t\t\t<Board \n\t\t\t\t\t\tsquares={this.state.squares}\n\t\t\t\t\t\tonClick={(i) => this.handleClick(i)}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"game-info\">\n\t\t\t\t\t<div>{conn_status}</div>\n\t\t\t\t \t<div>{status}</div>\n\t\t\t\t \t<div>Your symbol: {this.state.type}</div>\n\t\t\t\t</div>\n\t\t\t</div>\n    );\n  }\n}\n\n\nexport default Game;"]},"metadata":{},"sourceType":"module"}