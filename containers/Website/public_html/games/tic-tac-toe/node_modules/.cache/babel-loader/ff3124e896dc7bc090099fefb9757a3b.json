{"ast":null,"code":"import openSocket from 'socket.io-client';\nexport function calculateWinner(squares) {\n  const lines = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n\n  return null;\n}\nexport function isGameEnded(squares) {\n  for (var i = 0; i < squares.length; i++) {\n    if (squares[i] == null) {\n      return false;\n    }\n  }\n\n  return true;\n} //Get argument from the URL\n\nexport function getArgumenets() {\n  let url_string = window.location['href'];\n  let url = new URL(url_string);\n  let host = url.hostname;\n  let playmanster = url.searchParams.get(\"pm\");\n  let gamemaster = url.searchParams.get(\"gm\");\n  let token = url.searchParams.get(\"token\");\n  let args = {\n    'host': host,\n    'token': token,\n    'playmanster': playmanster,\n    'gamemaster': gamemaster\n  };\n  return args;\n} //Connect to Playmaster\n\nexport function connect(server, token) {\n  let handShake = {\n    query: 'token=' + token\n  };\n  let socket = openSocket(server, handShake);\n  console.log(socket);\n  let response = {\n    'socket': socket,\n    'status': socket['connected'] ? 0 : -1\n  };\n  return response;\n}","map":{"version":3,"sources":["/home/panagiotis/Desktop/ds_project/games/tic-tac-toe/src/utils.js"],"names":["openSocket","calculateWinner","squares","lines","i","length","a","b","c","isGameEnded","getArgumenets","url_string","window","location","url","URL","host","hostname","playmanster","searchParams","get","gamemaster","token","args","connect","server","handShake","query","socket","console","log","response"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,kBAAvB;AAEA,OAAO,SAASC,eAAT,CAAyBC,OAAzB,EAAkC;AACvC,QAAMC,KAAK,GAAG,CACZ,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CADY,EAEZ,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAFY,EAGZ,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAHY,EAIZ,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAJY,EAKZ,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CALY,EAMZ,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CANY,EAOZ,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAPY,EAQZ,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CARY,CAAd;;AAUA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,KAAK,CAACE,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACrC,UAAM,CAACE,CAAD,EAAIC,CAAJ,EAAOC,CAAP,IAAYL,KAAK,CAACC,CAAD,CAAvB;;AACA,QAAIF,OAAO,CAACI,CAAD,CAAP,IAAcJ,OAAO,CAACI,CAAD,CAAP,KAAeJ,OAAO,CAACK,CAAD,CAApC,IAA2CL,OAAO,CAACI,CAAD,CAAP,KAAeJ,OAAO,CAACM,CAAD,CAArE,EAA0E;AACxE,aAAON,OAAO,CAACI,CAAD,CAAd;AACD;AACF;;AACD,SAAO,IAAP;AACD;AAGD,OAAO,SAASG,WAAT,CAAqBP,OAArB,EAA6B;AACnC,OAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,OAAO,CAACG,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;AACxC,QAAIF,OAAO,CAACE,CAAD,CAAP,IAAc,IAAlB,EAAwB;AACvB,aAAO,KAAP;AACA;AACD;;AACD,SAAO,IAAP;AACA,C,CAED;;AACA,OAAO,SAASM,aAAT,GAAyB;AAC/B,MAAIC,UAAU,GAAGC,MAAM,CAACC,QAAP,CAAgB,MAAhB,CAAjB;AACE,MAAIC,GAAG,GAAG,IAAIC,GAAJ,CAAQJ,UAAR,CAAV;AAEA,MAAIK,IAAI,GAAGF,GAAG,CAACG,QAAf;AACA,MAAIC,WAAW,GAAGJ,GAAG,CAACK,YAAJ,CAAiBC,GAAjB,CAAqB,IAArB,CAAlB;AACA,MAAIC,UAAU,GAAGP,GAAG,CAACK,YAAJ,CAAiBC,GAAjB,CAAqB,IAArB,CAAjB;AACA,MAAIE,KAAK,GAAGR,GAAG,CAACK,YAAJ,CAAiBC,GAAjB,CAAqB,OAArB,CAAZ;AAEA,MAAIG,IAAI,GAAG;AACV,YAAQP,IADE;AAEV,aAASM,KAFC;AAGV,mBAAgBJ,WAHN;AAIV,kBAAeG;AAJL,GAAX;AAOA,SAAOE,IAAP;AACF,C,CAGD;;AACA,OAAO,SAASC,OAAT,CAAiBC,MAAjB,EAAyBH,KAAzB,EAA+B;AAElC,MAAII,SAAS,GAAG;AACfC,IAAAA,KAAK,EAAC,WAASL;AADA,GAAhB;AAIA,MAAIM,MAAM,GAAG5B,UAAU,CAACyB,MAAD,EAASC,SAAT,CAAvB;AAEAG,EAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AAEA,MAAIG,QAAQ,GAAG;AACd,cAAUH,MADI;AAEd,cAAUA,MAAM,CAAC,WAAD,CAAN,GAAsB,CAAtB,GAA0B,CAAC;AAFvB,GAAf;AAKA,SAAOG,QAAP;AAEH","sourcesContent":["import openSocket from 'socket.io-client';\n\nexport function calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}\n\n\nexport function isGameEnded(squares){\n\tfor (var i = 0; i < squares.length; i++) {\n\t\tif (squares[i] == null) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\n//Get argument from the URL\nexport function getArgumenets() {\n\tlet url_string = window.location['href'];\n  \tlet url = new URL(url_string);\n\n  \tlet host = url.hostname;\n  \tlet playmanster = url.searchParams.get(\"pm\");\n  \tlet gamemaster = url.searchParams.get(\"gm\");\n  \tlet token = url.searchParams.get(\"token\");\n\n  \tlet args = {\n  \t\t'host': host,\n  \t\t'token': token,\n  \t\t'playmanster' : playmanster,\n  \t\t'gamemaster' : gamemaster \n  \t};\n\n  \treturn args;\n}\n\n\n//Connect to Playmaster\nexport function connect(server, token){\n\t\n    let handShake = {\n    \tquery:'token='+token\n    }\n\n    let socket = openSocket(server, handShake)\n\n    console.log(socket)\n\n    let response = {\n    \t'socket': socket,\n    \t'status': socket['connected'] ? 0 : -1,\n    }\n\n    return response;\n\n}"]},"metadata":{},"sourceType":"module"}