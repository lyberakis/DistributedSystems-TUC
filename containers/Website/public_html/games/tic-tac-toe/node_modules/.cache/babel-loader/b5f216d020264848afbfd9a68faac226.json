{"ast":null,"code":"var _jsxFileName = \"/home/panagiotis/Desktop/ds_project/games/tic-tac-toe/src/Game.js\";\nimport React from 'react';\nimport './index.css';\nimport openSocket from 'socket.io-client'; // npm i socket.io-client\n//SQUARE\n\nfunction Square(props) {\n  return /*#__PURE__*/React.createElement(\"button\", {\n    className: \"square\",\n    onClick: props.onClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 9\n    }\n  }, props.value);\n} //BOARD\n\n\nclass Board extends React.Component {\n  renderSquare(i) {\n    return /*#__PURE__*/React.createElement(Square, {\n      value: this.props.squares[i],\n      onClick: () => this.props.onClick(i),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 7\n      }\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"board-row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 5\n      }\n    }, this.renderSquare(0), this.renderSquare(1), this.renderSquare(2)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"board-row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 5\n      }\n    }, this.renderSquare(3), this.renderSquare(4), this.renderSquare(5)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"board-row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 5\n      }\n    }, this.renderSquare(6), this.renderSquare(7), this.renderSquare(8)));\n  }\n\n} //GAME\n\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    let args = getArgumenets();\n    let data = connect(args['host'] + ':' + args['playmanster'], args['token']);\n    this.state = {\n      host: args['host'],\n      gamemaster: args['gamemaster'],\n      squares: Array(9).fill(null),\n      myTurn: false,\n      token: args['token'],\n      socket: data['socket'],\n      status: data['connection'],\n      type: '-',\n      turn: null\n    };\n    let self = this;\n    this.state.socket.on('wait', message => {\n      this.setState({\n        status: 1\n      });\n    });\n    this.state.socket.on('init', message => {\n      let turn_old = self.state.turn;\n      let turn = turn_old ? turn_old : message['turn'];\n      let gtype = turn == 'first' ? 'X' : 'O';\n      this.setState({\n        id: turn,\n        status: 2,\n        type: gtype,\n        myTurn: gtype == 'X',\n        roundID: message['roundID']\n      });\n    }); //\n\n    this.state.socket.on('board', board => {\n      this.setState({\n        squares: board,\n        myTurn: true\n      });\n    });\n    this.state.socket.on('disconnect', board => {\n      console.log(\"disconnect\");\n\n      if (self.state.status > 0) {}\n\n      this.setState({\n        status: 4\n      });\n      var xhr = new XMLHttpRequest();\n\n      xhr.onload = function (e) {\n        // update the state of the component with the result here\n        if (xhr.readyState == 4) {\n          if (xhr.status == 200) {\n            let respone = JSON.parse(xhr.responseText);\n            let playmaster = self.state.host + ':' + respone['playmaster'];\n            let token = self.state.token;\n            let data = connect(playmaster, token);\n            this.setState({\n              socket: data['socket'],\n              status: data['connection'],\n              myTurn: false\n            });\n            console.log(xhr.responseText);\n          }\n        }\n      }.bind(self);\n\n      let game = 'tic-tac-toe';\n      let master = self.state.host + ':' + self.state.gamemaster;\n      let url = 'http://' + master + '?' + 'token=' + self.state.token + '&game=' + game;\n      xhr.open('GET', url); //xhr.setRequestHeader(\"Content-Type\", 'application/x-www-form-urlencoded');\n\n      xhr.send();\n\n      if (self.state.status > 0) {} // this.setState({\n      // \tsquares: board,\n      // \tmyTurn: true,\n      // })\n\n    });\n  }\n\n  handleClick(i) {\n    if (this.state.myTurn) {\n      const squares = this.state.squares.slice(); //create a copy of the array\n      //if the game is over or the sqare is already filled, return\n\n      if (calculateWinner(squares) || squares[i]) {\n        return;\n      }\n\n      squares[i] = this.state.type;\n      this.setState({\n        squares: squares,\n        myTurn: !this.state.myTurn\n      });\n      let message = {\n        roundID: this.state.roundID,\n        board: squares\n      };\n      this.state.socket.emit('update', message);\n      let winner = calculateWinner(squares);\n      let endgame = isGameEnded(squares); //check if the game is ended\n\n      if (endgame || winner) {\n        let message = {\n          roundID: this.state.roundID,\n          winner: winner\n        };\n        this.state.socket.emit('endgame', message);\n      }\n    }\n  }\n\n  render() {\n    const winner = calculateWinner(this.state.squares);\n    const gameOver = isGameEnded(this.state.squares);\n    let status;\n    let conn_status;\n\n    if (this.state.status == 0) {\n      conn_status = 'Connection establised!';\n    } else if (this.state.status == 1) {\n      conn_status = 'Connected! Wait opponent to connect.';\n    } else if (this.state.status == 2) {\n      conn_status = 'Ready!';\n\n      if (winner) {\n        status = 'Winner:' + winner;\n      } else if (gameOver) {\n        status = 'Game ended without winner!';\n      } else {\n        if (this.state.myTurn) {\n          status = 'Your turn!';\n        } else {\n          status = 'opponent\\'s turn';\n        }\n      }\n    } else {\n      conn_status = 'Connection error!';\n    }\n\n    let test1 = this.state.token;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"game\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"game-board\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(Board, {\n      squares: this.state.squares,\n      onClick: i => this.handleClick(i),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 6\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"game-info\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 6\n      }\n    }, conn_status), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 7\n      }\n    }, status), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 7\n      }\n    }, \"Your symbol: \", this.state.type)));\n  }\n\n}\n\nfunction calculateWinner(squares) {\n  const lines = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n\n  return null;\n}\n\nfunction isGameEnded(squares) {\n  for (var i = 0; i < squares.length; i++) {\n    if (squares[i] == null) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction getArgumenets() {\n  let url_string = window.location['href'];\n  let url = new URL(url_string);\n  let host = url.hostname;\n  let playmanster = url.searchParams.get(\"pm\");\n  let gamemaster = url.searchParams.get(\"gm\");\n  let token = url.searchParams.get(\"token\");\n  let args = {\n    'host': host,\n    'token': token,\n    'playmanster': playmanster,\n    'gamemaster': gamemaster\n  };\n  return args;\n}\n\nfunction connect(server, token) {\n  if (token || server) {}\n\n  let handShake = {\n    query: 'token=' + token\n  };\n  let socket = openSocket(server, handShake);\n  let respone = {\n    'token': token,\n    'socket': socket,\n    'status': socket['connected'] ? 0 : -1\n  };\n  return respone;\n}\n\nfunction troubleshoot(token, master) {\n  var xhr = new XMLHttpRequest();\n  xhr.addEventListener('load', () => {\n    // update the state of the component with the result here\n    let playmanster = xhr.responseText;\n    console.log(xhr.responseText);\n  });\n  let game = 'tic-tac-toe';\n  let url = master + '?' + 'token=' + token + '&game=' + game;\n  xhr.open('GET', url);\n  xhr.send();\n}\n\nexport default Game;","map":{"version":3,"sources":["/home/panagiotis/Desktop/ds_project/games/tic-tac-toe/src/Game.js"],"names":["React","openSocket","Square","props","onClick","value","Board","Component","renderSquare","i","squares","render","Game","constructor","args","getArgumenets","data","connect","state","host","gamemaster","Array","fill","myTurn","token","socket","status","type","turn","self","on","message","setState","turn_old","gtype","id","roundID","board","console","log","xhr","XMLHttpRequest","onload","e","readyState","respone","JSON","parse","responseText","playmaster","bind","game","master","url","open","send","handleClick","slice","calculateWinner","emit","winner","endgame","isGameEnded","gameOver","conn_status","test1","lines","length","a","b","c","url_string","window","location","URL","hostname","playmanster","searchParams","get","server","handShake","query","troubleshoot","addEventListener"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './index.css';\nimport openSocket from 'socket.io-client';\n\n// npm i socket.io-client\n\n//SQUARE\nfunction Square(props) {\n\n    return (\n        <button \n          className=\"square\" \n          onClick={props.onClick}\n        >\n            {props.value}\n        </button>\n    );\n}\n\n//BOARD\nclass Board extends React.Component {\n\t\n\trenderSquare(i) {\n    \treturn (\n    \t\t<Square \n    \t\t\tvalue={this.props.squares[i]}\n    \t\t\tonClick={() => this.props.onClick(i)}\n    \t\t/>);\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<div className=\"board-row\">\n\t\t\t\t\t{this.renderSquare(0)}\n\t\t\t\t\t{this.renderSquare(1)}\n\t\t\t\t\t{this.renderSquare(2)}\n\t\t\t\t</div>\n\t\t\t\t<div className=\"board-row\">\n\t\t\t\t\t{this.renderSquare(3)}\n\t\t\t\t\t{this.renderSquare(4)}\n\t\t\t\t\t{this.renderSquare(5)}\n\t\t\t\t</div>\n\t\t\t\t<div className=\"board-row\">\n\t\t\t\t\t{this.renderSquare(6)}\n\t\t\t\t\t{this.renderSquare(7)}\n\t\t\t\t\t{this.renderSquare(8)}\n\t\t\t\t</div>\n\t\t\t</div>\n    \t);\n    }\n}\n\n\n//GAME\nclass Game extends React.Component {\n\tconstructor(props) {\n    \tsuper(props);\n\n    \tlet args = getArgumenets();\n    \tlet data = connect(args['host']+':'+args['playmanster'],args['token'])\n    \t\n    \tthis.state = {\n    \t\thost: args['host'],\n    \t\tgamemaster: args['gamemaster'],\n      \t\tsquares: Array(9).fill(null),\n    \t\tmyTurn: false,\n    \t\ttoken: args['token'],\n    \t\tsocket: data['socket'],\n    \t\tstatus: data['connection'],\n    \t\ttype: '-',\n    \t\tturn: null,\n \n    \t};\n\n    \t\n\n    \tlet self = this;\n    \tthis.state.socket.on('wait', message => {\n    \t\tthis.setState({\n      \t\t\tstatus: 1\n      \t\t})\n    \t});\n\n    \tthis.state.socket.on('init', message => {\n    \t\tlet turn_old = self.state.turn;\n    \t\tlet turn = turn_old ? turn_old : message['turn'];\n    \t\tlet gtype = turn == 'first' ? 'X' : 'O' \n      \t\tthis.setState({\n      \t\t\tid: turn,\n      \t\t\tstatus: 2,\n      \t\t\ttype: gtype,\n      \t\t\tmyTurn: gtype == 'X',\n      \t\t\troundID: message['roundID']\n      \t\t})\n    \t});\n\n    \t//\n    \tthis.state.socket.on('board', board => {\n      \t\tthis.setState({\n      \t\t\tsquares: board,\n      \t\t\tmyTurn: true,\n      \t\t})\n    \t}); \n\n    \tthis.state.socket.on('disconnect', board => {\n    \t\tconsole.log(\"disconnect\");\n\n    \t\tif (self.state.status > 0) {}\n\n    \t\tthis.setState({\n\t\t\t\tstatus: 4,\n\t\t\t})\n    \t\t\n    \t\tvar xhr = new XMLHttpRequest()\n\t\t\txhr.onload = function (e) {\n\t\t\t\t// update the state of the component with the result here\n\t\t\t\tif (xhr.readyState == 4) {\n        \t\t\tif (xhr.status == 200) {\n\t\t\t\t\t\tlet respone = JSON.parse(xhr.responseText);\n\t\t\t\t\t\tlet playmaster = self.state.host + ':' + respone['playmaster'];\n\t\t\t\t\t\tlet token = self.state.token;\n\t\t\t\t\t\tlet data = connect(playmaster,token)\n\n\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\tsocket: data['socket'],\n    \t\t\t\t\t\tstatus: data['connection'],\n    \t\t\t\t\t\tmyTurn: false,\n\t\t\t\t\t\t})\n\t\t\t\t\t\tconsole.log(xhr.responseText)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t    }.bind(self);\n\n\t\t    let game = 'tic-tac-toe';\n\t\t    let master = self.state.host + ':' + self.state.gamemaster\n\t\t    let url = 'http://'+master + '?' + 'token=' + self.state.token + '&game='+ game;\n\n\t\t\txhr.open('GET', url);\n\t\t\t//xhr.setRequestHeader(\"Content-Type\", 'application/x-www-form-urlencoded');\n\t\t\txhr.send();\n    \t\tif (self.state.status >0) {}\n      \t\t// this.setState({\n      \t\t// \tsquares: board,\n      \t\t// \tmyTurn: true,\n      \t\t// })\n    \t});  \n  \t}\n\n\thandleClick(i){\n\t  \tif (this.state.myTurn) {\n\t\t\tconst squares = this.state.squares.slice();   //create a copy of the array\n\n\t\t\t//if the game is over or the sqare is already filled, return\n\t\t\tif (calculateWinner(squares) || squares[i]){\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tsquares[i] = this.state.type;\n\t\t\t\n\t\t\tthis.setState({\n\t\t\t\tsquares: squares,\n\t\t\t\tmyTurn: !this.state.myTurn,\n\t\t\t});\n\n\t\t\tlet message = {\n\t\t\t\troundID : this.state.roundID,\n\t\t\t\tboard : squares\n\t\t\t}\n\n\t\t\tthis.state.socket.emit('update', message)\n\n\t\t\tlet winner = calculateWinner(squares);\n\t\t\tlet endgame = isGameEnded(squares);\n\n\t\t\t//check if the game is ended\n\t\t\tif(endgame || winner){\n\t\t\t\tlet message = {\n\t\t\t\t\troundID : this.state.roundID,\n\t\t\t\t\twinner: winner,\n\t\t\t\t}\n\t\t\t\tthis.state.socket.emit('endgame', message)\n\t\t\t}\n\t\t}\n\t}\n\n\trender() {\n\t\tconst winner = calculateWinner(this.state.squares);\n\t\tconst gameOver = isGameEnded(this.state.squares);\n\n  \t\tlet status;\n  \t\tlet conn_status;\n\n  \t\tif (this.state.status == 0) {\n\t  \t\tconn_status = 'Connection establised!';\n\t  \t}else if (this.state.status == 1) { \n\t  \t\tconn_status = 'Connected! Wait opponent to connect.';\n\t  \t}else if (this.state.status == 2) {\n\t  \t\tconn_status = 'Ready!';\n\t  \t\tif (winner) {\n\t\t  \t\tstatus = 'Winner:' + winner;\n\t\t  \t}else if (gameOver){\n\t\t  \t\tstatus = 'Game ended without winner!';\n\t\t  \t}else{\n\t\t  \t\tif (this.state.myTurn) {\n\t\t  \t\t\tstatus = 'Your turn!';\n\t\t  \t\t}else{\n\t\t  \t\t\tstatus = 'opponent\\'s turn';\n\t\t  \t\t}\n\t\t  \t}\n\t  \t}\n\t  \telse{\n\t  \t\tconn_status = 'Connection error!';\n\t  \t}\n\n\n\n\t  \tlet test1 = this.state.token;\n\n    \treturn (\n\t\t\t<div className=\"game\">\n\t\t\t\t<div className=\"game-board\">\n\t\t\t\t\t<Board \n\t\t\t\t\t\tsquares={this.state.squares}\n\t\t\t\t\t\tonClick={(i) => this.handleClick(i)}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"game-info\">\n\t\t\t\t\t<div>{conn_status}</div>\n\t\t\t\t \t<div>{status}</div>\n\t\t\t\t \t<div>Your symbol: {this.state.type}</div>\n\t\t\t\t</div>\n\t\t\t</div>\n    );\n  }\n}\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}\n\nfunction isGameEnded(squares){\n\tfor (var i = 0; i < squares.length; i++) {\n\t\tif (squares[i] == null) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nfunction getArgumenets() {\n\tlet url_string = window.location['href'];\n  \tlet url = new URL(url_string);\n\n  \tlet host = url.hostname;\n  \tlet playmanster = url.searchParams.get(\"pm\");\n  \tlet gamemaster = url.searchParams.get(\"gm\");\n  \tlet token = url.searchParams.get(\"token\");\n\n  \tlet args = {\n  \t\t'host': host,\n  \t\t'token': token,\n  \t\t'playmanster' : playmanster,\n  \t\t'gamemaster' : gamemaster \n  \t};\n\n  \treturn args;\n}\n\nfunction connect(server, token){\n\t\n\tif (token || server) {\n\n\t}\n\n    let handShake = {\n    \tquery:'token='+token\n    }\n\n    let socket = openSocket(server, handShake)\n\n    let respone = {\n    \t'token': token,\n    \t'socket': socket,\n    \t'status': socket['connected'] ? 0 : -1,\n    }\n\n    return respone;\n\n}\n\nfunction troubleshoot(token, master){\n\tvar xhr = new XMLHttpRequest()\n\txhr.addEventListener('load', () => {\n      // update the state of the component with the result here\n      let playmanster = xhr.responseText;\n      console.log(xhr.responseText)\n    })\n\n    let game = 'tic-tac-toe';\n    let url = master + '?' + 'token=' + token + '&game='+ game;\n\n\txhr.open('GET', url);\n\txhr.send();\n}\n\nexport default Game;"]},"metadata":{},"sourceType":"module"}