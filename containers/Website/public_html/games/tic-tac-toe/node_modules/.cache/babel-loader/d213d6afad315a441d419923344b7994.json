{"ast":null,"code":"var _jsxFileName = \"/home/panagiotis/Desktop/ds_project/games/tic-tac-toe/src/Game.js\";\nimport React from 'react';\nimport './index.css';\nimport openSocket from 'socket.io-client'; // npm i socket.io-client\n//SQUARE\n\nfunction Square(props) {\n  return /*#__PURE__*/React.createElement(\"button\", {\n    className: \"square\",\n    onClick: props.onClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 9\n    }\n  }, props.value);\n} //BOARD\n\n\nclass Board extends React.Component {\n  renderSquare(i) {\n    return /*#__PURE__*/React.createElement(Square, {\n      value: this.props.squares[i],\n      onClick: () => this.props.onClick(i),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 7\n      }\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"board-row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 5\n      }\n    }, this.renderSquare(0), this.renderSquare(1), this.renderSquare(2)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"board-row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 5\n      }\n    }, this.renderSquare(3), this.renderSquare(4), this.renderSquare(5)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"board-row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 5\n      }\n    }, this.renderSquare(6), this.renderSquare(7), this.renderSquare(8)));\n  }\n\n} //GAME\n\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    let status = connect();\n    this.state = {\n      squares: Array(9).fill(null),\n      myTurn: false,\n      token: status['token'],\n      socket: status['socket'],\n      type: '-'\n    };\n    let self = this;\n    this.state.socket.on('init', message => {\n      let turn = message['turn'];\n      let gtype = turn == 'first' ? 'X' : 'O';\n      this.setState({\n        id: turn,\n        type: gtype,\n        myTurn: gtype == 'X',\n        roundID: message['roundID']\n      });\n    });\n    this.state.socket.on('board', board => {\n      this.setState({\n        squares: board,\n        myTurn: true\n      });\n    });\n  }\n\n  handleClick(i) {\n    if (this.state.myTurn) {\n      const squares = this.state.squares.slice(); //create a copy of the array\n      //if the game is over or the sqare is already filled, return\n\n      if (calculateWinner(squares) || squares[i]) {\n        return;\n      }\n\n      squares[i] = this.state.type;\n      this.setState({\n        squares: squares,\n        myTurn: !this.state.myTurn\n      });\n      let message = {\n        roundID: this.state.roundID,\n        board: squares\n      };\n      this.state.socket.emit('update', message);\n      let winStatus = calculateWinner(squares);\n      let isGameOver = checkGameOver(squares);\n\n      if (winStatus || isGameOver) {\n        let message = {\n          roundID: this.state.roundID,\n          isWinner: winStatus == this.state.type,\n          isGameOver: isGameOver\n        };\n        this.state.socket.emit('gameOver', message);\n      }\n    }\n  }\n\n  render() {\n    const winner = calculateWinner(this.state.squares);\n    const gameOver = checkGameOver(this.state.squares);\n    let status;\n\n    if (winner) {\n      status = 'Winner:' + winner;\n    } else if (gameOver) {\n      status = 'Game ended without winner!';\n    } else {\n      if (this.state.myTurn) {\n        status = 'Your turn!';\n      } else {\n        status = 'Waiting opponent...';\n      }\n    }\n\n    let test1 = this.state.token;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"game\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"game-board\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(Board, {\n      squares: this.state.squares,\n      onClick: i => this.handleClick(i),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 6\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"game-info\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 7\n      }\n    }, status), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 7\n      }\n    }, \"Your symbol: \", this.state.type)));\n  }\n\n}\n\nfunction calculateWinner(squares) {\n  const lines = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n\n  return null;\n}\n\nfunction checkGameOver(squares) {\n  for (var i = 0; i < squares.length; i++) {\n    if (squares[i] == null) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction getArgumenets() {\n  let url_string = window.location['href'];\n  let url = new URL(url_string);\n  let playmanster = url.searchParams.get(\"host\");\n  let token = url.searchParams.get(\"token\");\n  let args = {\n    'token': token,\n    'playmanster': playmanster\n  };\n  return args;\n}\n\nfunction connect() {\n  let args = getArgumenets();\n  let handShake = {\n    query: 'token=' + args['token']\n  };\n  let socket = openSocket(args['playmanster'], handShake);\n  console.log(args);\n  console.log(socket);\n\n  if (socket['connected'] == false) {\n    console.log(\"Not connected\");\n  }\n\n  let respone = {\n    'token': args['token'],\n    'socket': socket,\n    'connected': socket['connected']\n  };\n  return respone;\n}\n\nexport default Game;","map":{"version":3,"sources":["/home/panagiotis/Desktop/ds_project/games/tic-tac-toe/src/Game.js"],"names":["React","openSocket","Square","props","onClick","value","Board","Component","renderSquare","i","squares","render","Game","constructor","status","connect","state","Array","fill","myTurn","token","socket","type","self","on","message","turn","gtype","setState","id","roundID","board","handleClick","slice","calculateWinner","emit","winStatus","isGameOver","checkGameOver","isWinner","winner","gameOver","test1","lines","length","a","b","c","getArgumenets","url_string","window","location","url","URL","playmanster","searchParams","get","args","handShake","query","console","log","respone"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './index.css';\nimport openSocket from 'socket.io-client';\n\n// npm i socket.io-client\n\n//SQUARE\nfunction Square(props) {\n\n    return (\n        <button \n          className=\"square\" \n          onClick={props.onClick}\n        >\n            {props.value}\n        </button>\n    );\n}\n\n//BOARD\nclass Board extends React.Component {\n\t\n\trenderSquare(i) {\n    \treturn (\n    \t\t<Square \n    \t\t\tvalue={this.props.squares[i]}\n    \t\t\tonClick={() => this.props.onClick(i)}\n    \t\t/>);\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<div className=\"board-row\">\n\t\t\t\t\t{this.renderSquare(0)}\n\t\t\t\t\t{this.renderSquare(1)}\n\t\t\t\t\t{this.renderSquare(2)}\n\t\t\t\t</div>\n\t\t\t\t<div className=\"board-row\">\n\t\t\t\t\t{this.renderSquare(3)}\n\t\t\t\t\t{this.renderSquare(4)}\n\t\t\t\t\t{this.renderSquare(5)}\n\t\t\t\t</div>\n\t\t\t\t<div className=\"board-row\">\n\t\t\t\t\t{this.renderSquare(6)}\n\t\t\t\t\t{this.renderSquare(7)}\n\t\t\t\t\t{this.renderSquare(8)}\n\t\t\t\t</div>\n\t\t\t</div>\n    \t);\n    }\n}\n\n\n//GAME\nclass Game extends React.Component {\n\tconstructor(props) {\n    \tsuper(props);\n\n    \tlet status = connect()\n    \t\n    \tthis.state = {\n      \t\tsquares: Array(9).fill(null),\n    \t\tmyTurn: false,\n    \t\ttoken: status['token'],\n    \t\tsocket: status['socket'],\n    \t\ttype: '-',\n \n    \t};\n\n    \t\n\n    \tlet self = this;\n    \tthis.state.socket.on('init', message => {\n\n    \t\tlet turn = message['turn']\n    \t\tlet gtype = turn == 'first' ? 'X' : 'O' \n      \t\tthis.setState({\n      \t\t\tid: turn,\n      \t\t\ttype: gtype,\n      \t\t\tmyTurn: gtype == 'X',\n      \t\t\troundID: message['roundID']\n      \t\t})\n    \t});\n\n    \tthis.state.socket.on('board', board => {\n\n      \t\tthis.setState({\n      \t\t\tsquares: board,\n      \t\t\tmyTurn: true,\n      \t\t})\n\t      \n    \t});   \n  \t}\n\n\thandleClick(i){\n\t  \tif (this.state.myTurn) {\n\t\t\tconst squares = this.state.squares.slice();   //create a copy of the array\n\n\t\t\t//if the game is over or the sqare is already filled, return\n\t\t\tif (calculateWinner(squares) || squares[i]){\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tsquares[i] = this.state.type;\n\t\t\t\n\t\t\tthis.setState({\n\t\t\t\tsquares: squares,\n\t\t\t\tmyTurn: !this.state.myTurn,\n\t\t\t});\n\n\t\t\tlet message = {\n\t\t\t\troundID : this.state.roundID,\n\t\t\t\tboard : squares\n\t\t\t}\n\n\t\t\tthis.state.socket.emit('update', message)\n\n\t\t\tlet winStatus = calculateWinner(squares);\n\t\t\tlet isGameOver = checkGameOver(squares);\n\n\t\t\tif(winStatus || isGameOver){\n\t\t\t\tlet message = {\n\t\t\t\t\troundID : this.state.roundID,\n\t\t\t\t\tisWinner: winStatus == this.state.type,\n\t\t\t\t\tisGameOver: isGameOver\n\t\t\t\t}\n\t\t\t\tthis.state.socket.emit('gameOver', message)\n\t\t\t}\n\t\t}\n\t}\n\n\trender() {\n\t\tconst winner = calculateWinner(this.state.squares);\n\t\tconst gameOver = checkGameOver(this.state.squares);\n\n  \t\tlet status;\n\n\t  \tif (winner) {\n\t  \t\tstatus = 'Winner:' + winner;\n\t  \t}else if (gameOver){\n\t  \t\tstatus = 'Game ended without winner!';\n\t  \t}else{\n\t  \t\tif (this.state.myTurn) {\n\t  \t\t\tstatus = 'Your turn!';\n\t  \t\t}else{\n\t  \t\t\tstatus = 'Waiting opponent...';\n\t  \t\t}\n\t  \t}\n\n\t  \tlet test1 = this.state.token;\n\n    \treturn (\n\t\t\t<div className=\"game\">\n\t\t\t\t<div className=\"game-board\">\n\t\t\t\t\t<Board \n\t\t\t\t\t\tsquares={this.state.squares}\n\t\t\t\t\t\tonClick={(i) => this.handleClick(i)}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"game-info\">\n\t\t\t\t  <div>{status}</div>\n\t\t\t\t  <div>Your symbol: {this.state.type}</div>\n\t\t\t\t</div>\n\t\t\t</div>\n    );\n  }\n}\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}\n\nfunction checkGameOver(squares){\n\tfor (var i = 0; i < squares.length; i++) {\n\t\tif (squares[i] == null) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nfunction getArgumenets() {\n\tlet url_string = window.location['href'];\n  \tlet url = new URL(url_string);\n\n\n  \tlet playmanster = url.searchParams.get(\"host\");\n  \tlet token = url.searchParams.get(\"token\");\n\n  \tlet args = {\n  \t\t'token': token,\n  \t\t'playmanster' : playmanster \n  \t};\n\n  \treturn args;\n}\n\nfunction connect(){\n\tlet args = getArgumenets();\n\n    let handShake = {\n    \tquery:'token='+args['token']\n    }\n\n    let socket = openSocket(args['playmanster'], handShake)\n\n    console.log(args);\n    console.log(socket);\n\n    if (socket['connected'] == false) {\n    \tconsole.log(\"Not connected\");\n    }\n\n    let respone = {\n    \t'token': args['token'],\n    \t'socket': socket,\n    \t'connected': socket['connected'],\n    }\n\n    return respone;\n\n}\n\nexport default Game;"]},"metadata":{},"sourceType":"module"}