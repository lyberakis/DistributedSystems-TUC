{"ast":null,"code":"var _jsxFileName = \"/home/panagiotis/Desktop/ds_project/games/tic-tac-toe/src/Game.js\";\nimport React from 'react';\nimport './index.css';\nimport openSocket from 'socket.io-client'; // npm i socket.io-client\n\nfunction Square(props) {\n  return /*#__PURE__*/React.createElement(\"button\", {\n    className: \"square\",\n    onClick: props.onClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 9\n    }\n  }, props.value);\n}\n\nclass Board extends React.Component {\n  renderSquare(i) {\n    return /*#__PURE__*/React.createElement(Square, {\n      value: this.props.squares[i],\n      onClick: () => this.props.onClick(i),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 7\n      }\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"board-row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 5\n      }\n    }, this.renderSquare(0), this.renderSquare(1), this.renderSquare(2)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"board-row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 5\n      }\n    }, this.renderSquare(3), this.renderSquare(4), this.renderSquare(5)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"board-row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 5\n      }\n    }, this.renderSquare(6), this.renderSquare(7), this.renderSquare(8)));\n  }\n\n}\n\nlet getParamValue = function (paramName) {\n  var url = window.location.search.substring(1); //get rid of \"?\" in querystring\n\n  var qArray = url.split('&'); //get key-value pairs\n\n  for (var i = 0; i < qArray.length; i++) {\n    var pArr = qArray[i].split('='); //split key and value\n\n    if (pArr[0] === paramName) console.log(pArr[1]);\n    return pArr[1]; //return value\n  }\n};\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    var url = window.location.search.substring(1);\n    var qArray = url.split('&');\n    let host = qArray[1].split('=');\n    this.state = {\n      squares: Array(9).fill(null),\n      myTurn: false,\n      token: qArray[0].split('='),\n      socket: openSocket('http://localhost:1337'),\n      message: 'Waiting for another player...',\n      type: '-'\n    };\n    let self = this;\n    this.state.socket.on('type', type => {\n      let gtype = type == 'first' ? 'X' : 'O';\n      this.setState({\n        id: type,\n        type: gtype,\n        myTurn: gtype == 'X'\n      });\n    });\n    this.state.socket.on('board', message => {\n      this.setState({\n        squares: message['board'],\n        myTurn: true\n      });\n    }); //  \tthis.state.socket.on('color', color => {\n    //    \t\tthis.setState(...self.state, {color: color})\n    // \t\t});\n    //  \tthis.state.socket.on('turn', player => {\n    //    \t\tif (player === this.state.color) {\n    //       \tthis.setState(...self.state, {message: \"You're up. What's your move?\", yourTurn: true})\n    //     \t} else {\n    //     \t\tthis.setState(...self.state, {message: player + ' is thinking...', yourTurn: false})\n    //   \t}\n    // }\n  }\n\n  handleClick(i) {\n    if (this.state.myTurn) {\n      const squares = this.state.squares.slice(); //create a copy of the array\n      //if the game is over or the sqare is already filled, return\n\n      if (calculateWinner(squares) || squares[i]) {\n        return;\n      }\n\n      squares[i] = this.state.myTurn ? 'X' : 'O';\n      this.setState({\n        squares: squares,\n        xIsNext: !this.state.myTurn\n      });\n      let message = {\n        id: this.state.id,\n        board: squares\n      };\n      this.state.socket.emit('update', message);\n    }\n  }\n\n  render() {\n    const winner = calculateWinner(this.state.squares);\n    let status;\n\n    if (winner) {\n      status = 'Winner:' + winner;\n    } else {\n      if (this.state.myTurn) {\n        status = 'Your turn!';\n      } else {\n        status = 'Waiting opponent...';\n      }\n    }\n\n    let test1 = this.state.token;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"game\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"game-board\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(Board, {\n      squares: this.state.squares,\n      onClick: i => this.handleClick(i),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 6\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"game-info\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 7\n      }\n    }, status), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 7\n      }\n    }, this.state.type), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 7\n      }\n    }, this.state.playmaster)));\n  }\n\n}\n\nfunction calculateWinner(squares) {\n  const lines = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n\n  return null;\n}\n\nexport default Game;","map":{"version":3,"sources":["/home/panagiotis/Desktop/ds_project/games/tic-tac-toe/src/Game.js"],"names":["React","openSocket","Square","props","onClick","value","Board","Component","renderSquare","i","squares","render","getParamValue","paramName","url","window","location","search","substring","qArray","split","length","pArr","console","log","Game","constructor","host","state","Array","fill","myTurn","token","socket","message","type","self","on","gtype","setState","id","handleClick","slice","calculateWinner","xIsNext","board","emit","winner","status","test1","playmaster","lines","a","b","c"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './index.css';\nimport openSocket from 'socket.io-client';\n\n// npm i socket.io-client\n\nfunction Square(props) {\n\n    return (\n        <button \n          className=\"square\" \n          onClick={props.onClick}\n        >\n            {props.value}\n        </button>\n    );\n}\n\nclass Board extends React.Component {\n\t\n\trenderSquare(i) {\n    \treturn (\n    \t\t<Square \n    \t\t\tvalue={this.props.squares[i]}\n    \t\t\tonClick={() => this.props.onClick(i)}\n    \t\t/>);\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<div className=\"board-row\">\n\t\t\t\t\t{this.renderSquare(0)}\n\t\t\t\t\t{this.renderSquare(1)}\n\t\t\t\t\t{this.renderSquare(2)}\n\t\t\t\t</div>\n\t\t\t\t<div className=\"board-row\">\n\t\t\t\t\t{this.renderSquare(3)}\n\t\t\t\t\t{this.renderSquare(4)}\n\t\t\t\t\t{this.renderSquare(5)}\n\t\t\t\t</div>\n\t\t\t\t<div className=\"board-row\">\n\t\t\t\t\t{this.renderSquare(6)}\n\t\t\t\t\t{this.renderSquare(7)}\n\t\t\t\t\t{this.renderSquare(8)}\n\t\t\t\t</div>\n\t\t\t</div>\n    \t);\n    }\n}\n\nlet getParamValue = function(paramName)\n{\n    var url = window.location.search.substring(1); //get rid of \"?\" in querystring\n    var qArray = url.split('&'); //get key-value pairs\n    for (var i = 0; i < qArray.length; i++) \n    {\n        var pArr = qArray[i].split('='); //split key and value\n        if (pArr[0] === paramName) \n           console.log(pArr[1]);\n            return pArr[1]; //return value\n    }\n}\n\nclass Game extends React.Component {\n\tconstructor(props) {\n    \tsuper(props);\n    \tvar url = window.location.search.substring(1);\n    \tvar qArray = url.split('&');\n\n    \tlet host = qArray[1].split('=');\n\n\n    \tthis.state = {\n      \t\tsquares: Array(9).fill(null),\n    \t\tmyTurn: false,\n    \t\ttoken: qArray[0].split('='),\n    \t\tsocket: openSocket('http://localhost:1337'),\n    \t\tmessage: 'Waiting for another player...',\n    \t\ttype: '-',\n \n    \t};\n\n    \tlet self = this;\n    \tthis.state.socket.on('type', type => {\n    \t\tlet gtype = type == 'first' ? 'X' : 'O' \n      \t\tthis.setState({\n      \t\t\tid: type,\n      \t\t\ttype: gtype,\n      \t\t\tmyTurn: gtype == 'X',\n      \t\t})\n    \t});\n\n    \tthis.state.socket.on('board', message => {\n      \t\tthis.setState({\n      \t\t\tsquares: message['board'],\n      \t\t\tmyTurn: true,\n      \t\t})\n    \t});\n\n   //  \tthis.state.socket.on('color', color => {\n   //    \t\tthis.setState(...self.state, {color: color})\n   // \t\t});\n\n   //  \tthis.state.socket.on('turn', player => {\n   //    \t\tif (player === this.state.color) {\n\t  //       \tthis.setState(...self.state, {message: \"You're up. What's your move?\", yourTurn: true})\n\t  //     \t} else {\n\t  //     \t\tthis.setState(...self.state, {message: player + ' is thinking...', yourTurn: false})\n\t  //   \t}\n\t \t// }\n    \n\n\n  }\n\n\thandleClick(i){\n\t  \tif (this.state.myTurn) {\n\t\t\tconst squares = this.state.squares.slice();   //create a copy of the array\n\n\t\t\t//if the game is over or the sqare is already filled, return\n\t\t\tif (calculateWinner(squares) || squares[i]){\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tsquares[i] = this.state.myTurn ? 'X' : 'O';\n\t\t\tthis.setState({\n\t\t\t\tsquares: squares,\n\t\t\t\txIsNext: !this.state.myTurn,\n\t\t\t});\n\n\t\t\tlet message = {\n\t\t\t\tid: this.state.id,\n\t\t\t\tboard: squares,\n\n\t\t\t}\n\t\t\tthis.state.socket.emit('update', message)\n\t\t}\n\t}\n\n\trender() {\n\t\tconst winner = calculateWinner(this.state.squares);\n  \t\tlet status;\n\n\t  \tif (winner) {\n\t  \t\tstatus = 'Winner:' + winner;\n\t  \t}else{\n\t  \t\tif (this.state.myTurn) {\n\t  \t\t\tstatus = 'Your turn!';\n\t  \t\t}else{\n\t  \t\t\tstatus = 'Waiting opponent...';\n\t  \t\t}\n\t  \t}\n\n\t  \tlet test1 = this.state.token;\n\n    \treturn (\n\t\t\t<div className=\"game\">\n\t\t\t\t<div className=\"game-board\">\n\t\t\t\t\t<Board \n\t\t\t\t\t\tsquares={this.state.squares}\n\t\t\t\t\t\tonClick={(i) => this.handleClick(i)}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"game-info\">\n\t\t\t\t  <div>{status}</div>\n\t\t\t\t  <div>{this.state.type}</div>\n\t\t\t\t  <div>{this.state.playmaster}</div>\n\t\t\t\t</div>\n\t\t\t</div>\n    );\n  }\n}\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}\n\nexport default Game;"]},"metadata":{},"sourceType":"module"}