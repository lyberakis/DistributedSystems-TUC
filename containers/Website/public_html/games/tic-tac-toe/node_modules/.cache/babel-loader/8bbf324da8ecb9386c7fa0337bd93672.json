{"ast":null,"code":"import openSocket from'socket.io-client';import*as condition from'./gameConditions.js';// ==========================================\n// ==> Variables in state <==\n//==> host: The domain of the host (localhost)\n//==> gamemaster: the port of gamemaster for client requests\n//==> token: the unique token of the user issued from the Authorization Service\n//==> socket: the socket objet of the client connected to the server\n//==> type: the symbol of the user (X,O or white, black)\n//==> roundID: the ID of the game\n//==> status: Connection Status\n// -3 => unauthorized user\n// -2 => trying to reconnect\n// -1 => no connection (the client has not connect to the giver Playmaster)\n//  0 => connected\n//  1 => wait opponent to connect\n//  2 => ready to play\n//  3 => the game is completed\n//  4 => winner because opponent left\n//  5 => spectator mode\n// ==========================================\n// ==> Messages from client to playmaster <==\n// 1. Send the new board \n// let message = {\n//   roundID : this.state.roundID,\n//   board : squares\n// }\n// this.state.socket.emit('update', message)\n// 2. Inform the playmaster for the winner, if you are the last to play\n// let message = {\n//   roundID : this.state.roundID,\n//   winner: winnerInfo,  //0 for tie, 1 if you won, -1 if you lost\n// }\n// this.state.socket.emit('endgame', message)\n// ==========================================\n// ===> FOR OTHER GAME CHANGE THE LINE 109 and 133-140\n// ==========================================\n//Get argument from the URL\nexport function getArgumenets(){var url_string=window.location['href'];var url=new URL(url_string);var host=url.hostname;var playmanster=url.searchParams.get(\"pm\");var gamemaster=url.searchParams.get(\"gm\");var token=url.searchParams.get(\"token\");var args={'host':host,'token':token,'playmanster':playmanster,'gamemaster':gamemaster};return args;}//Connect to Playmaster\nexport function connect(server,token){var handShake={query:'token='+token};var socket=openSocket(server,handShake);var response={'socket':socket,'status':socket['connected']?0:-1};return response;}export function setListeners(obj){//You connected first, wait for the opponent to connect\nobj.state.socket.on('wait',function(message){obj.setState({status:1,roundID:message['roundID']});});//Both players are connected. The game can begin\nobj.state.socket.on('init',function(message){//Check if the game is new or it is continued from server fault.\nif(obj.state.type===null){var turn=message['turn'];var type=turn?'X':'O';//set your symbol\nobj.setState({status:2,type:type,myTurn:turn,roundID:message['roundID']});}else{obj.setState({status:2,roundID:message['roundID']//get the new round ID\n});}});//Both players are connected. The game can begin\nobj.state.socket.on('viewer',function(board){console.log('VIWER');obj.setState({status:5,squares:board});});//Receive the updated board\nobj.state.socket.on('board',function(message){var board=message['board'];var progress=message['progress'];obj.setState({squares:board,myTurn:true});var winner=condition.calculateWinner(board);var gameOver=condition.isGameEnded(board);//Set Game as completed\nif(winner||gameOver){obj.setState({status:3});}});//Handler for server disconnection\nobj.state.socket.on('disconnect',function(board){//if you never connected or the game is completed, return\nif(obj.state.status<0||obj.state.status>2){return;}obj.state.socket.disconnect();obj.setState({status:4});//Create a request to GameMaster\nvar xhr=new XMLHttpRequest();xhr.onload=function(e){if(xhr.readyState===4){//Check if the GameMaster accepted the request\nif(xhr.status===200){var respone=JSON.parse(xhr.responseText);obj.reconnect(respone['playmaster']);}else if(xhr.status===403){obj.setState({status:-3});}}};var game='tic-tac-toe';var master=obj.state.host+':'+obj.state.gamemaster;var url='http://'+master+'?'+'token='+obj.state.token+'&game='+game+'&roundID='+obj.state.roundID;xhr.open('GET',url);xhr.send();});//The game is over from the server's side\nobj.state.socket.on('endgame',function(message){obj.setState({status:4});obj.state.socket.disconnect();});}//Establish a new connections\nexport function reconnect(obj,port){console.log('reconnecting...');var playmaster=this.state.host+':'+port;var token=this.state.token;var data=connect(playmaster,token);obj.setState({socket:data['socket'],status:data['status']});console.log(data['socket']);obj.setListeners();}","map":{"version":3,"sources":["/home/panagiotis/Desktop/ds_project/containers/Website/public_html/games/tic-tac-toe/src/utils/multiplayer.js"],"names":["openSocket","condition","getArgumenets","url_string","window","location","url","URL","host","hostname","playmanster","searchParams","get","gamemaster","token","args","connect","server","handShake","query","socket","response","setListeners","obj","state","on","message","setState","status","roundID","type","turn","myTurn","board","console","log","squares","progress","winner","calculateWinner","gameOver","isGameEnded","disconnect","xhr","XMLHttpRequest","onload","e","readyState","respone","JSON","parse","responseText","reconnect","game","master","open","send","port","playmaster","data"],"mappings":"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","sourcesContent":["import openSocket from 'socket.io-client';\nimport * as condition from './gameConditions.js';\n\n// ==========================================\n// ==> Variables in state <==\n\n//==> host: The domain of the host (localhost)\n//==> gamemaster: the port of gamemaster for client requests\n//==> token: the unique token of the user issued from the Authorization Service\n//==> socket: the socket objet of the client connected to the server\n//==> type: the symbol of the user (X,O or white, black)\n//==> roundID: the ID of the game\n\n//==> status: Connection Status\n  // -3 => unauthorized user\n  // -2 => trying to reconnect\n  // -1 => no connection (the client has not connect to the giver Playmaster)\n  //  0 => connected\n  //  1 => wait opponent to connect\n  //  2 => ready to play\n  //  3 => the game is completed\n  //  4 => winner because opponent left\n  //  5 => spectator mode\n\n\n// ==========================================\n// ==> Messages from client to playmaster <==\n\n// 1. Send the new board \n\n// let message = {\n//   roundID : this.state.roundID,\n//   board : squares\n// }\n// this.state.socket.emit('update', message)\n\n\n// 2. Inform the playmaster for the winner, if you are the last to play\n\n// let message = {\n//   roundID : this.state.roundID,\n//   winner: winnerInfo,  //0 for tie, 1 if you won, -1 if you lost\n// }\n// this.state.socket.emit('endgame', message)\n\n// ==========================================\n\n// ===> FOR OTHER GAME CHANGE THE LINE 109 and 133-140\n// ==========================================\n\n\n//Get argument from the URL\nexport function getArgumenets() {\n\tlet url_string = window.location['href'];\n  \tlet url = new URL(url_string);\n\n  \tlet host = url.hostname;\n  \tlet playmanster = url.searchParams.get(\"pm\");\n  \tlet gamemaster = url.searchParams.get(\"gm\");\n  \tlet token = url.searchParams.get(\"token\");\n\n  \tlet args = {\n  \t\t'host': host,\n  \t\t'token': token,\n  \t\t'playmanster' : playmanster,\n  \t\t'gamemaster' : gamemaster,\n  \t};\n\n  \treturn args;\n}\n\n\n//Connect to Playmaster\nexport function connect(server, token){\n\n    let handShake = {\n    \tquery:'token='+token\n    }\n\n    let socket = openSocket(server, handShake)\n\n    let response = {\n    \t'socket': socket,\n    \t'status': socket['connected'] ? 0 : -1,\n    }\n\n    return response;\n}\n\n\nexport function setListeners(obj){\n\n  //You connected first, wait for the opponent to connect\n  obj.state.socket.on('wait', message => {\n    obj.setState({\n        status: 1,\n        roundID: message['roundID'],\n      })\n  });\n\n\n\n  //Both players are connected. The game can begin\n  obj.state.socket.on('init', message => {\n\n    //Check if the game is new or it is continued from server fault.\n    if (obj.state.type === null){\n      let turn = message['turn'];\n      let type = turn ? 'X' : 'O'   //set your symbol\n\n      obj.setState({\n        status: 2,\n        type: type,\n        myTurn: turn,\n        roundID: message['roundID']\n      })\n    }else{ \n      obj.setState({\n        status: 2,\n        roundID: message['roundID']   //get the new round ID\n      })\n    }\n  });\n\n  //Both players are connected. The game can begin\n  obj.state.socket.on('viewer', board => {\n    console.log('VIWER')\n    obj.setState({\n      status: 5,\n      squares: board,\n    })\n  });\n\n\n  //Receive the updated board\n  obj.state.socket.on('board', message => {\n      var board = message['board'];\n      var progress = message['progress'];\n      \n      obj.setState({\n        squares: board,\n        myTurn: true,\n      })\n\n      let winner = condition.calculateWinner(board);\n      let gameOver = condition.isGameEnded(board);\n\n      //Set Game as completed\n      if (winner || gameOver) {\n        obj.setState({\n          status: 3,\n        })\n      }\n  }); \n\n\n  //Handler for server disconnection\n  obj.state.socket.on('disconnect', board => {\n\n      //if you never connected or the game is completed, return\n      if (obj.state.status < 0 || obj.state.status > 2) {\n        return;\n      }\n\n    obj.state.socket.disconnect()\n\n    obj.setState({\n      status: 4,\n    })\n    \n    //Create a request to GameMaster\n    var xhr = new XMLHttpRequest()\n\n    xhr.onload = function (e) {\n\n      if (xhr.readyState === 4) {\n\n        //Check if the GameMaster accepted the request\n        if (xhr.status === 200) {  \n          let respone = JSON.parse(xhr.responseText);\n          obj.reconnect(respone['playmaster']);\n        }else if(xhr.status === 403){\n          obj.setState({\n            status: -3,\n          })\n        }\n      }\n    }\n\n    let game = 'tic-tac-toe';\n    let master = obj.state.host + ':' + obj.state.gamemaster\n    let url = 'http://'+master+'?'+'token='+obj.state.token+'&game='+game+'&roundID='+ obj.state.roundID;\n\n    xhr.open('GET', url);\n    xhr.send();\n  }); \n\n  //The game is over from the server's side\n  obj.state.socket.on('endgame', message => {\n      obj.setState({\n        status: 4,\n      })\n      obj.state.socket.disconnect();\n  }); \n\n}\n\n//Establish a new connections\nexport function reconnect(obj, port){\n  console.log('reconnecting...')\n  let playmaster = this.state.host + ':' + port;\n  let token = this.state.token;\n  var data = connect(playmaster,token)\n\n  obj.setState({\n    socket: data['socket'],\n    status: data['status'],\n  });\n\n  console.log(data['socket']);\n  obj.setListeners();\n}\n\n"]},"metadata":{},"sourceType":"module"}