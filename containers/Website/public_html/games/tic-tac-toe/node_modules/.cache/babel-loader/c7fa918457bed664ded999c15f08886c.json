{"ast":null,"code":"var _jsxFileName = \"/home/panagiotis/Desktop/ds_project/games/tic-tac-toe/src/Game.js\";\nimport React from 'react';\nimport './index.css';\nimport * as condition from './utils/gameConditions.js';\nimport * as conn from './utils/multiplayer.js'; //SQUARE\n\nfunction Square(props) {\n  return /*#__PURE__*/React.createElement(\"button\", {\n    className: \"square\",\n    onClick: props.onClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 9\n    }\n  }, props.value);\n} //BOARD\n\n\nclass Board extends React.Component {\n  renderSquare(i) {\n    return /*#__PURE__*/React.createElement(Square, {\n      value: this.props.squares[i],\n      onClick: () => this.props.onClick(i),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 7\n      }\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"board-row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 5\n      }\n    }, this.renderSquare(0), this.renderSquare(1), this.renderSquare(2)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"board-row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 5\n      }\n    }, this.renderSquare(3), this.renderSquare(4), this.renderSquare(5)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"board-row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 5\n      }\n    }, this.renderSquare(6), this.renderSquare(7), this.renderSquare(8)));\n  }\n\n} //GAME\n\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props); //Establish Connection\n\n    let args = conn.getArgumenets();\n    let data = conn.connect(args['host'] + ':' + args['playmanster'], args['token']);\n    this.state = {\n      host: args['host'],\n      gamemaster: args['gamemaster'],\n      squares: Array(9).fill(null),\n      myTurn: false,\n      token: args['token'],\n      socket: data['socket'],\n      status: data['status'],\n      type: null,\n      roundID: null\n    }; //set event handlers for server messages\n\n    conn.setListeners(this);\n  }\n\n  handleClick(i) {\n    if (this.state.myTurn) {\n      const squares = this.state.squares.slice(); //create a copy of the array\n      //if the game is over or the sqare is already filled, return\n\n      if (condition.calculateWinner(squares) || squares[i]) {\n        return;\n      }\n\n      squares[i] = this.state.type;\n      this.setState({\n        squares: squares,\n        myTurn: !this.state.myTurn\n      });\n      let message = {\n        roundID: this.state.roundID,\n        board: squares\n      };\n      this.state.socket.emit('update', message);\n      let winner = condition.calculateWinner(squares);\n      let endgame = condition.isGameEnded(squares);\n      let winnerInfo = null;\n\n      if (winner == null) {\n        winnerInfo = 0;\n      } else if (winner == this.state.type) {\n        winnerInfo = 1;\n      } else {\n        winnerInfo = -1;\n      } //check if the game is ended\n\n\n      if (endgame || winner) {\n        let message = {\n          roundID: this.state.roundID,\n          winner: winnerInfo\n        };\n        this.state.socket.emit('endgame', message);\n      }\n    }\n  } // Setup the `beforeunload` event listener\n\n\n  setupBeforeUnloadListener() {\n    window.addEventListener(\"beforeunload\", ev => {\n      ev.preventDefault();\n      return 'Are you sure you want to leave?';\n    });\n  }\n\n  componentDidMount() {\n    // Activate the event listener\n    this.setupBeforeUnloadListener();\n  }\n\n  render() {\n    const winner = condition.calculateWinner(this.state.squares);\n    const gameOver = condition.isGameEnded(this.state.squares);\n    let status;\n    let conn_status;\n\n    if (this.state.status == 0) {\n      conn_status = 'Connection establised!';\n    } else if (this.state.status == 1) {\n      conn_status = 'Connected! Wait opponent to connect.';\n    } else if (this.state.status == 2) {\n      conn_status = 'Ready!';\n\n      if (winner) {\n        status = 'Winner:' + winner;\n      } else if (gameOver) {\n        status = 'Game ended without winner!';\n      } else {\n        if (this.state.myTurn) {\n          status = 'Your turn!';\n        } else {\n          status = 'opponent\\'s turn';\n        }\n      }\n    } else if (this.state.status == 4) {\n      conn_status = 'Re-connecting!';\n    } else {\n      conn_status = 'Connection error!';\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"game\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"game-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 6\n      }\n    }, conn_status), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 7\n      }\n    }, status), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 7\n      }\n    }, \"Your symbol: \", this.state.type), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 7\n      }\n    }, \"STATUS: \", this.state.status)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"game-board\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(Board, {\n      squares: this.state.squares,\n      onClick: i => this.handleClick(i),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 6\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"game-info\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 6\n      }\n    }, conn_status), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 7\n      }\n    }, status), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 7\n      }\n    }, \"Your symbol: \", this.state.type), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 7\n      }\n    }, \"STATUS: \", this.state.status)));\n  }\n\n}\n\nexport default Game;","map":{"version":3,"sources":["/home/panagiotis/Desktop/ds_project/games/tic-tac-toe/src/Game.js"],"names":["React","condition","conn","Square","props","onClick","value","Board","Component","renderSquare","i","squares","render","Game","constructor","args","getArgumenets","data","connect","state","host","gamemaster","Array","fill","myTurn","token","socket","status","type","roundID","setListeners","handleClick","slice","calculateWinner","setState","message","board","emit","winner","endgame","isGameEnded","winnerInfo","setupBeforeUnloadListener","window","addEventListener","ev","preventDefault","componentDidMount","gameOver","conn_status"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './index.css';\nimport * as condition from './utils/gameConditions.js'; \nimport * as conn from './utils/multiplayer.js'; \n\n//SQUARE\nfunction Square(props) {\n\n    return (\n        <button \n          className=\"square\" \n          onClick={props.onClick}\n        >\n            {props.value}\n        </button>\n    );\n}\n\n//BOARD\nclass Board extends React.Component {\n\t\n\trenderSquare(i) {\n    \treturn (\n    \t\t<Square \n    \t\t\tvalue={this.props.squares[i]}\n    \t\t\tonClick={() => this.props.onClick(i)}\n    \t\t/>);\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<div className=\"board-row\">\n\t\t\t\t\t{this.renderSquare(0)}\n\t\t\t\t\t{this.renderSquare(1)}\n\t\t\t\t\t{this.renderSquare(2)}\n\t\t\t\t</div>\n\t\t\t\t<div className=\"board-row\">\n\t\t\t\t\t{this.renderSquare(3)}\n\t\t\t\t\t{this.renderSquare(4)}\n\t\t\t\t\t{this.renderSquare(5)}\n\t\t\t\t</div>\n\t\t\t\t<div className=\"board-row\">\n\t\t\t\t\t{this.renderSquare(6)}\n\t\t\t\t\t{this.renderSquare(7)}\n\t\t\t\t\t{this.renderSquare(8)}\n\t\t\t\t</div>\n\t\t\t</div>\n    \t);\n    }\n}\n\n\n//GAME\nclass Game extends React.Component {\n\tconstructor(props) {\n    \tsuper(props);\n\n    \t//Establish Connection\n    \tlet args = conn.getArgumenets();\n    \tlet data = conn.connect(args['host']+':'+args['playmanster'],args['token'])\n    \t\n    \tthis.state = {\n    \t\thost: args['host'],\n    \t\tgamemaster: args['gamemaster'],\n      \t\tsquares: Array(9).fill(null),\n    \t\tmyTurn: false,\n    \t\ttoken: args['token'],\n    \t\tsocket: data['socket'],\n    \t\tstatus: data['status'],\n    \t\ttype: null,\n    \t\troundID: null,\n    \t};\n\n    \t//set event handlers for server messages\n    \tconn.setListeners(this);\n  \t}\n\n  \t\n\thandleClick(i){\n\t  \tif (this.state.myTurn) {\n\t\t\tconst squares = this.state.squares.slice();   //create a copy of the array\n\n\t\t\t//if the game is over or the sqare is already filled, return\n\t\t\tif (condition.calculateWinner(squares) || squares[i]){\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tsquares[i] = this.state.type;\n\t\t\t\n\t\t\tthis.setState({\n\t\t\t\tsquares: squares,\n\t\t\t\tmyTurn: !this.state.myTurn,\n\t\t\t});\n\n\t\t\tlet message = {\n\t\t\t\troundID : this.state.roundID,\n\t\t\t\tboard : squares\n\t\t\t}\n\n\t\t\tthis.state.socket.emit('update', message)\n\n\t\t\tlet winner = condition.calculateWinner(squares);\n\t\t\tlet endgame = condition.isGameEnded(squares);\n\t\t\tlet winnerInfo = null;\n\n\t\t\tif (winner == null) {\n\t\t\t\twinnerInfo = 0;\n\t\t\t}else if (winner == this.state.type) {\n\t\t\t\twinnerInfo = 1;\n\t\t\t}else{\n\t\t\t\twinnerInfo = -1;\n\t\t\t}\n\n\t\t\t//check if the game is ended\n\t\t\tif(endgame || winner){\n\t\t\t\tlet message = {\n\t\t\t\t\troundID : this.state.roundID,\n\t\t\t\t\twinner: winnerInfo,\n\t\t\t\t}\n\t\t\t\tthis.state.socket.emit('endgame', message)\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// Setup the `beforeunload` event listener\n\tsetupBeforeUnloadListener() {\n\t    window.addEventListener(\"beforeunload\", (ev) => {\n\t        ev.preventDefault();\n\t        return 'Are you sure you want to leave?';\n\t    });\n\t}\n\n\tcomponentDidMount() {\n        // Activate the event listener\n        this.setupBeforeUnloadListener();\n    }\n\n\trender() {\n\t\tconst winner = condition.calculateWinner(this.state.squares);\n\t\tconst gameOver = condition.isGameEnded(this.state.squares);\n\n  \t\tlet status;\n  \t\tlet conn_status;\n\n  \t\tif (this.state.status == 0) {\n\t  \t\tconn_status = 'Connection establised!';\n\t  \t}else if (this.state.status == 1) { \n\t  \t\tconn_status = 'Connected! Wait opponent to connect.';\n\t  \t}else if (this.state.status == 2) {\n\t  \t\tconn_status = 'Ready!';\n\t  \t\tif (winner) {\n\t\t  \t\tstatus = 'Winner:' + winner;\n\t\t  \t}else if (gameOver){\n\t\t  \t\tstatus = 'Game ended without winner!';\n\t\t  \t}else{\n\t\t  \t\tif (this.state.myTurn) {\n\t\t  \t\t\tstatus = 'Your turn!';\n\t\t  \t\t}else{\n\t\t  \t\t\tstatus = 'opponent\\'s turn';\n\t\t  \t\t}\n\t\t  \t}\n\t  \t}else if (this.state.status == 4){\n\t  \t\tconn_status = 'Re-connecting!';\n\t  \t}\n\t  \telse{\n\t  \t\tconn_status = 'Connection error!';\n\t  \t}\n\n\n    \treturn (\n\t\t\t<div className=\"game\">\n\t\t\t\t<div className=\"game-title\">\n\t\t\t\t\t<div>{conn_status}</div>\n\t\t\t\t \t<div>{status}</div>\n\t\t\t\t \t<div>Your symbol: {this.state.type}</div>\n\t\t\t\t \t<div>STATUS: {this.state.status}</div>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"game-board\">\n\t\t\t\t\t<Board \n\t\t\t\t\t\tsquares={this.state.squares}\n\t\t\t\t\t\tonClick={(i) => this.handleClick(i)}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"game-info\">\n\t\t\t\t\t<div>{conn_status}</div>\n\t\t\t\t \t<div>{status}</div>\n\t\t\t\t \t<div>Your symbol: {this.state.type}</div>\n\t\t\t\t \t<div>STATUS: {this.state.status}</div>\n\t\t\t\t</div>\n\t\t\t</div>\n    );\n  }\n}\n\nexport default Game;"]},"metadata":{},"sourceType":"module"}