{"version":3,"sources":["utils/gameConditions.js","utils/multiplayer.js","Game.js","utils/messages.js","index.js"],"names":["calculateWinner","squares","lines","i","length","a","b","c","highlight","list","document","getElementsByClassName","style","textShadow","isGameEnded","connect","server","token","handShake","query","socket","openSocket","setListeners","obj","state","on","message","setState","status","roundID","type","turn","myTurn","board","console","log","winner","condition","gameOver","disconnect","xhr","XMLHttpRequest","onload","e","readyState","respone","JSON","parse","responseText","port","playmaster","host","data","reconnect","ms","min","max","url","gamemaster","Math","floor","random","setTimeout","open","setRequestHeader","send","Square","props","className","onClick","value","Board","this","renderSquare","React","Component","Game","args","url_string","window","location","URL","hostname","playmanster","searchParams","get","conn","Array","fill","slice","endgame","progress","emit","ui","endState","win","symbol","end","handleClick","id","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.8befdfa8.chunk.js","sourcesContent":["export function calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      highlight(lines[i]);\n      return squares[a];\n    }\n  }\n  return null;\n}\n\nfunction highlight(list) {\n  let i;\n  for (i in list){\n    document.getElementsByClassName('square')[list[i]].style.textShadow = 'red 0px 0px 10px';\n  }\n}\n\n\nexport function isGameEnded(squares){\n\tfor (var i = 0; i < squares.length; i++) {\n\t\tif (squares[i] == null) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n","import openSocket from 'socket.io-client';\nimport * as condition from './gameConditions.js';\n\n// ==========================================\n// ==> Variables in state <==\n\n//==> host: The domain of the host (localhost)\n//==> gamemaster: the port of gamemaster for client requests\n//==> token: the unique token of the user issued from the Authorization Service\n//==> socket: the socket objet of the client connected to the server\n//==> type: the symbol of the user (X,O or white, black)\n//==> roundID: the ID of the game\n\n//==> status: Connection Status\n  // -3 => unauthorized user\n  // -2 => trying to reconnect\n  // -1 => no connection (the client has not connect to the giver Playmaster)\n  //  0 => connected\n  //  1 => wait opponent to connect\n  //  2 => ready to play\n  //  3 => the game is completed\n  //  4 => winner because opponent left\n  //  5 => spectator mode\n\n\n// ==========================================\n// ==> Messages from client to playmaster <==\n\n// 1. Send the new board \n\n// let message = {\n//   roundID : this.state.roundID,\n//   board : squares\n// }\n// this.state.socket.emit('update', message)\n\n\n// 2. Inform the playmaster for the winner, if you are the last to play\n\n// let message = {\n//   roundID : this.state.roundID,\n//   winner: winnerInfo,  //0 for tie, 1 if you won, -1 if you lost\n// }\n// this.state.socket.emit('endgame', message)\n\n// ==========================================\n\n// ===> FOR OTHER GAME CHANGE THE LINE 109 and 133-140\n// ==========================================\n\n\n//Get argument from the URL\nexport function getArgumenets() {\n\tlet url_string = window.location['href'];\n  \tlet url = new URL(url_string);\n\n  \tlet host = url.hostname;\n  \tlet playmanster = url.searchParams.get(\"pm\");\n  \tlet gamemaster = url.searchParams.get(\"gm\");\n  \tlet token = url.searchParams.get(\"token\");\n\n  \tlet args = {\n  \t\t'host': host,\n  \t\t'token': token,\n  \t\t'playmanster' : playmanster,\n  \t\t'gamemaster' : gamemaster,\n  \t};\n\n  \treturn args;\n}\n\n\n//Connect to Playmaster\nexport function connect(server, token){\n\n    let handShake = {\n    \tquery:'token='+token\n    }\n\n    let socket = openSocket(server, handShake)\n\n    let response = {\n    \t'socket': socket,\n    \t'status': socket['connected'] ? 0 : -1,\n    }\n\n    return response;\n}\n\n\nexport function setListeners(obj){\n\n  //You connected first, wait for the opponent to connect\n  obj.state.socket.on('wait', message => {\n    obj.setState({\n        status: 1,\n        roundID: message['roundID'],\n      })\n  });\n\n\n\n  //Both players are connected. The game can begin\n  obj.state.socket.on('init', message => {\n\n    //Check if the game is new or it is continued from server fault.\n    if (obj.state.type === null){\n      let turn = message['turn'];\n      let type = turn ? 'X' : 'O'   //set your symbol\n\n      obj.setState({\n        status: 2,\n        type: type,\n        myTurn: turn,\n        roundID: message['roundID']\n      })\n    }else{ \n      obj.setState({\n        status: 2,\n        roundID: message['roundID']   //get the new round ID\n      })\n    }\n  });\n\n  //Both players are connected. The game can begin\n  obj.state.socket.on('viewer', board => {\n    console.log('VIWER')\n    obj.setState({\n      status: 5,\n      squares: board,\n    })\n  });\n\n\n  //Receive the updated board\n  obj.state.socket.on('board', message => {\n      var board = message['board'];\n      var progress = message['progress'];\n      \n      obj.setState({\n        squares: board,\n        myTurn: true,\n      })\n\n      let winner = condition.calculateWinner(board);\n      let gameOver = condition.isGameEnded(board);\n\n      //Set Game as completed\n      if (winner || gameOver) {\n        obj.setState({\n          status: 3,\n        })\n      }\n  }); \n\n\n  //Handler for server disconnection\n  obj.state.socket.on('disconnect', board => {\n\n    //if you never connected or the game is completed, return\n    if (obj.state.status < 0 || obj.state.status > 2) {\n      return;\n    }\n\n    obj.state.socket.disconnect()\n\n    obj.setState({\n      status: -2,\n    })\n    \n    //Create a request to GameMaster\n    var xhr = new XMLHttpRequest()\n\n    xhr.onload = function (e) {\n\n      if (xhr.readyState === 4) {\n\n        //Check if the GameMaster accepted the request\n        if (xhr.status === 200) {  \n          let respone = JSON.parse(xhr.responseText);\n          console.log(respone['playmaster']);\n          reconnect(obj, respone['playmaster']);\n        }else if(xhr.status === 403){\n          obj.setState({\n            status: -3,\n          })\n        }\n      }\n    }\n\n    let game = 'tic-tac-toe';\n    let master = obj.state.host + ':' + obj.state.gamemaster+'/client';\n    let url = 'http://'+master+'?'+'token='+obj.state.token+'&game='+game+'&roundID='+ obj.state.roundID;\n\n    const delay = (ms, cb) => setTimeout(cb, ms);\n    \n    delay(getRndInteger(1,300)*100, () => {\n      xhr.open('GET', url);\n      xhr.setRequestHeader('Access-Control-Allow-Origin', '*');\n      xhr.send();\n    })\n  }); \n\n  //The game is over from the server's side\n  obj.state.socket.on('endgame', message => {\n      obj.setState({\n        status: 4,\n      })\n      obj.state.socket.disconnect();\n  }); \n\n}\n\nfunction getRndInteger(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) ) + min;\n}\n\n//Establish a new connections\nexport function reconnect(obj, port){\n  console.log('reconnecting...')\n  let playmaster = obj.state.host + ':' + port;\n  let token = obj.state.token;\n  var data = connect(playmaster,token)\n\n  obj.setState({\n    socket: data['socket'],\n    status: data['status'],\n  });\n\n  console.log(data['socket']);\n  setListeners(obj);\n}\n\n","import React from 'react';\nimport './index.css';\nimport * as condition from './utils/gameConditions.js'; \nimport * as conn from './utils/multiplayer.js'; \nimport * as ui from './utils/messages.js'\n\n//SQUARE\nfunction Square(props) {\n\n    return (\n        <button \n          className=\"square\" \n          onClick={props.onClick}\n        >\n            {props.value}\n        </button>\n    );\n}\n\n//BOARD\nclass Board extends React.Component {\n\t\n\trenderSquare(i) {\n    \treturn (\n    \t\t<Square \n    \t\t\tvalue={this.props.squares[i]}\n    \t\t\tonClick={() => this.props.onClick(i)}\n    \t\t/>);\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<div className=\"board-row\">\n\t\t\t\t\t{this.renderSquare(0)}\n\t\t\t\t\t{this.renderSquare(1)}\n\t\t\t\t\t{this.renderSquare(2)}\n\t\t\t\t</div>\n\t\t\t\t<div className=\"board-row\">\n\t\t\t\t\t{this.renderSquare(3)}\n\t\t\t\t\t{this.renderSquare(4)}\n\t\t\t\t\t{this.renderSquare(5)}\n\t\t\t\t</div>\n\t\t\t\t<div className=\"board-row\">\n\t\t\t\t\t{this.renderSquare(6)}\n\t\t\t\t\t{this.renderSquare(7)}\n\t\t\t\t\t{this.renderSquare(8)}\n\t\t\t\t</div>\n\t\t\t</div>\n    \t);\n    }\n}\n\n\n//GAME\nclass Game extends React.Component {\n\tconstructor(props) {\n    \tsuper(props);\n\n    \t//Establish Connection\n    \tlet args = conn.getArgumenets();\n    \tlet data = conn.connect(args['host']+':'+args['playmanster'],args['token'])\n    \t\n    \tthis.state = {\n    \t\thost: args['host'],\n    \t\tgamemaster: args['gamemaster'],\n      \t\tsquares: Array(9).fill(null),\n    \t\tmyTurn: false,\n    \t\ttoken: args['token'],\n    \t\tsocket: data['socket'],\n    \t\tstatus: data['status'],\n    \t\ttype: null,\n    \t\troundID: null,\n    \t};\n\n    \t//set event handlers for server messages\n    \tconn.setListeners(this);\n  \t}\n\n  \t\n\thandleClick(i){\n\t  \tif (this.state.myTurn && this.state.state !== 5) {\n\t\t\tconst squares = this.state.squares.slice();   //create a copy of the array\n\n\t\t\t//if the game is over or the sqare is already filled, return\n\t\t\tif (condition.calculateWinner(squares) || squares[i]){\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tsquares[i] = this.state.type;\n\t\t\t\n\t\t\tthis.setState({\n\t\t\t\tsquares: squares,\n\t\t\t\tmyTurn: !this.state.myTurn,\n\t\t\t});\n\n\t\t\tlet winner = condition.calculateWinner(squares);\n\t\t\tlet endgame = condition.isGameEnded(squares);\n\t\t\tvar progress = 0;\n\n\t\t\tif (winner === this.state.type) {   //check if you won\n\t\t\t\tprogress = 1;\n\t\t\t}else if (winner === null && endgame) {  //the game is ended and nobody won\n\t\t\t\tprogress = 2;\n\t\t\t}\n\n\t\t\t//check if the game is ended\n\t\t\tif(endgame || winner){\n\t\t\t\tthis.setState({\n\t\t\t\t\tstatus: 3,\n\t\t\t\t});\n\t\n\t\t\t}\n\n\t\t\tlet message = {\n\t\t\t\troundID : this.state.roundID,\n\t\t\t\tboard : squares,\n\t\t\t\tprogress: progress,\n\t\t\t}\n\n\t\t\tconsole.log(message)\n\n\t\t\tthis.state.socket.emit('update', message)\n\t\t}\n\t}\n\t\n\t// // Setup the `beforeunload` event listener\n\t// setupBeforeUnloadListener() {\n\t//     window.addEventListener(\"beforeunload\", (ev) => {\n\t//         ev.preventDefault();\n\t//         return 'Are you sure you want to leave?';\n\t//     });\n\t// }\n\n\t// componentDidMount() {\n //        // Activate the event listener\n //        this.setupBeforeUnloadListener();\n //    }\n\n\trender() {\n\t\tlet winner = condition.calculateWinner(this.state.squares);\n\t\tlet gameOver = condition.isGameEnded(this.state.squares);\n  \t\tlet status = ui.showGameStatus(this.state.status);\n  \t\tlet endState = ui.showWinner(winner, this.state.type, gameOver, this.state.status);\n  \t\t\n  \t\tif (this.state.status !== 5) {\n\t  \t\tvar turn = ui.showTurn(this.state.status, this.state.myTurn);\n\t  \t\tvar symbol = ui.showSymbol(this.state.type)\n\t  \t}\n\t  \t\n    \treturn (\n\t\t\t<div className=\"game\">\n\t\t\t\t<div className=\"game-title\">\n\t\t\t\t\t<div>Tic - Tac - Toe</div>\n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"game-board\">\n\t\t\t\t\t<Board \n\t\t\t\t\t\tsquares={this.state.squares}\n\t\t\t\t\t\tonClick={(i) => this.handleClick(i)}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"game-info row\">\n\t\t\t\t\t<div className=\"status column left\">\n\t\t\t\t\t\t<div>{symbol}</div>\n\t\t\t\t\t\t<div>{status}</div>\n\t\t\t\t\t \t<div>{turn}</div>\n\t\t\t\t\t </div>\n\t\t\t\t\t <div className=\"column right\">\n\t\t\t\t\t \t<div id=\"endstate\">{endState}</div>\n\t\t\t\t\t </div>\n\t\t\t\t</div>\n\t\t\t</div>\n    );\n  }\n}\n\nexport default Game;","\n\nexport function showGameStatus(status){\n\tlet message;\n\n\tswitch(status){\n\t\tcase -3:\n\t\t\tmessage = 'Unauthorized connection.';\n\t\t\tbreak;\n\t\tcase -2:\n\t\t\tmessage = 'Redirecting...';\n\t\t\tbreak;\n\t\tcase -1:\n\t\t\tmessage = 'No connection found.';\n\t\t\tbreak;\n\t\tcase 0:\n\t\t\tmessage = 'Connected!';\n\t\t\tbreak;\n\t\tcase 1:\n\t\t\tmessage = 'Wait for opponent to connect.';\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tmessage = 'The game is active.';\n\t\t\tbreak;\n\t\tcase 3:\n\t\t\tmessage = 'The game is completed!';\n\t\t\tbreak;\n\t\tcase 4:\n\t\t\tmessage = 'The opponent left.';\n\t\t\tbreak;\n\t\tcase 5:\n\t\t\tmessage = 'Spectator mode.';\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tmessage = 'Undefined status.';\n\t\t\tbreak;\n\t}\n\n\treturn message;\n}\n\n\nexport function showWinner(win, symbol, end, status){\n\tlet message;\n\n\tif (status !== 5) {\n\t\tif ((symbol !== null && win === symbol) || status === 4) {\n\t\t\tmessage = 'VICTORY!';\n\t\t}else if (win != null && win !== symbol){\n\t\t\tmessage = 'DEFEAT!';\n\t\t}else if (win == null && end === true) {\n\t\t\tmessage = 'TIE!';\n\t\t}\n\t}else{\n\t\tif (win !== null) {\n\t\t\tmessage = 'WINNER: '+win;\n\t\t}else if (end){\n\t\t\tmessage = 'TIE!';\n\t\t}\n\t}\n\n\treturn message;\n}\n\nexport function showTurn(status, turn){\n\tlet message;\n\n\tif (status === 2) {\n\t\tif (turn) {\n\t\t\tmessage = 'Your turn.';\n\t\t}else{\n\t\t\tmessage = 'Opponent\\'s turn.';\n\t\t}\n\t}\n\n\treturn message;\n}\n\n\nexport function showSymbol(symbol){\n\tlet message;\n\n\tif (symbol) {\n\t\tmessage = 'You are: ' + symbol;\n\t}\n\n\treturn message;\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Game from './Game'\n\nReactDOM.render(\n  <Game />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}